neuralmagic/guidellm
ecf2984645202eea022cc7c9f245947e2dd5457d
Container boring_joliot d1724c4e7391 started with image build_env_python:3.10
************** configuration **************
You are an expert skilled in environment configuration. You can refer to various files and structures in the repository such as `requirements.txt`, `setup.py`, etc., and use dependency prediction tools like pipreqs to install and download the corresponding third-party libraries in a given Docker image. This ensures that the repository can be successfully configured and able to correctly execute the specified tests.
* Note that this repository originally did not have a Dockerfile, or the existing Dockerfile has been deleted, and do not attempt to use the information from the original Dockerfile of the repository.*

* We have already configured poetry, pipdeptree, and pytest for you; no additional configuration is needed. However, you cannot directly invoke pytest; you need to run tests using `runtest` or `poetryruntest`.

WORK PROCESS:
1. **Read Directory Structure**: Check the folder structure in the root directory, focusing on the configuration files related to setting up the environment.
2. **Determine Python Version**: Decide if you need to switch the Python version in the Docker container. The current version is python:3.10. If you want to switch the Python version, please run the `change_python_version python_version` command, where python_version is the Python version number (for example, `change_python_version 3.9`), and you do not need to add quotation marks. If you do not need to make any changes, please ignore this step. You can also run these commands at any point later during the environment configuration to switch the Python version.
    *Note*: You can only switch the Python version within the container; switching to other images is not allowed.
3. **Check the configuration files in the root directory**: Read configuration files related to setting up the environment, such as: Information in the `.github` folder, `setup.py`, `setup.cfg`, `Pipfile` and `Pipfile.lock`, `environment.yml`, `poetry.lock` and `pyproject.toml`, etc.
3.5 **Try testing (optional)**: Using `runtest` command to check if it is possible to pass the tests directly without any additional configuration.
4. **Review Additional Files**: Consider other potential files and structures for environment configuration.
5. **Automatically install according to the installation script**: Based on the observed structure in the root directory, determine the necessary installation commands:
    a. Poetry Detected: If a poetry.lock file is present in the root directory, Install Poetry using the relevant method for your system. Execute the command `poetry install` to install the dependencies specified in the lock file.
    b. Setup.py Detected: If a setup.py file exists in the root directory, run the command `pip install -e .` to install the package in editable mode along with its dependencies.
    c. Other Descriptor Files: For other specific files that indicate dependency management, assess and determine the appropriate method to install the required dependencies.
    *Note*: We only consider automatically installation script in the repository. Do not consider `requirements.txt` directly in this step!
6. **Collecting Third-Party Library Download List**: In this step, you need to locate all files in the root directory that list dependencies line by line, such as `requirements.txt`, `requirements_dev.txt`, etc. Use a command like `queue_file /repo/requirements.txt` to submit them to the download list. I will handle the unified downloading later.
    If you have determined the path to the requirements file, please enter `waitinglist addfile` followed by the path to the requirements file. For example, `waitinglist addfile /repo/requirements.txt`.
    *Note*: The files you collect must follow the standard requirements.txt format. Do not collect files in any other formats. For instance, if you are unsure about the format of `/repo/requirements_test.txt`, you can use the command `cat /repo/requirements_test.txt` to read the file contents and ensure the file fully meets the requirements before submitting it. If no such dependency-listing files are found, you may skip this step.
    *Note*: In a standard requirements.txt file, each valid entry on a line consists of package_name followed by version_constraints (if there are no version_constraints, the latest version is implied). For example: "numpy==2.1", "numpy>2.0,<3.0", "numpy" (implies the latest version).
    *Note*: We will not collect items that are improperly formatted.
7. **Using pipreqs to Obtain Additional Lists**: In this step, you should use `runpipreqs` to analyze the third-party libraries that need to be installed based on the findings of the previous step. Simply use the command `get pipreqs`, and it will generate a `requirements_pipreqs.txt` file in the project root directory (/repo) and show you the warnings and errors.
    *Note*: If you have already collected some requirements.txt files in Step 5, you do not need to execute `runpipreqs` in this step. Avoid collecting too many dependencies repeatedly. You can directly execute `download` after handling conflicts and formatting errors. If errors occur in subsequent tests, you can then run `runpipreqs`.
8. **Handling pipreqs Warnings**: For warnings that appear in pipreqs, such as not being able to find a module on PyPI, it may be due to a discrepancy between the download name and the import name of a third-party library. For example, `import cv2` requires downloading not `cv2` but `opencv-python`. For each warning, you need to address the discrepancy by ensuring the correct package names are used for the downloads.
    You should review "pipreqs_output.txt" (used to store output during the pipreqs dependency generation process) and "requirements_pipreqs.txt" (the final generated dependency results) to check for any inconsistencies. Use ```diff and ``` to make adjustments to "requirements_pipreqs.txt" as needed.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
9. **Update lists**: Add the "requirements_pipreqs.txt" file generated by pipreqs and corrected by you (or maybe not) to the waiting list using the command `waitinglist addfile /repo/requirements_pipreqs.txt`.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
10. **Resolve version_constraint conflicts**: Process the elements in conflict_list. Based on the information in conflict_list, resolve any existing version_constraints conflicts. Only after these have been resolved can you proceed with the download.
11. **Unified download execution**: After analyzing the original requirements.txt of the repository and the "requirements.txt" generated by pipreqs, and resolving any conflict issues, you need to enter download to execute the unified `download`. This will download each element currently in the waiting_list one by one, and eventually, the download status will be returned.
12. **Error Handling**: After the download is complete, you need to handle the error messages based on the information provided. We will return the list of third-party libraries and their dependencies in your current environment. When resolving these errors, you need to ensure that these dependencies are properly managed. For example, you cannot directly uninstall a package that is required by another package, nor can you install a version that does not meet the constraints.
    For instance, if package A depends on package B with a requirement of "B>=1.0", you cannot simply run pip uninstall B as this would cause package A to lack its dependency. Similarly, you cannot run `pip install B==0.5` because this would not satisfy the requirement of "B>=1.0".
    You can make use of the following tools:
    a.(Strongly recommend) `pipdeptree`: Use pipdeptree to see the structure of the python third-party library downloaded.
    b.(Strongly recommend) `pipdeptree -p <package_name>`: Use pipdeptree -p followed by package_name can display the dependency information of a specific third-party library.
    c.(Strongly recommend) `pip index versions <package_name> --python-version <python_version>`: This command is used to query the versions of a specific package for a particular Python version, including pre-release versions. For example, `pip index versions requests --python-version 3.10` can be used to find the versions of requests that are available for Python 3.10.
    d. `pip install -q`: Use this command to install a specific version of a package with minimal output. This greatly reduces the verbosity, showing only crucial information and final status. It is recommended to specify the version with == to avoid conflicts with the existing environment. For example, use pip install -q requests==2.25.1 to ensure a quiet and specific version installation.
    e. `pip install -e`: Use this command to install a package in "editable" mode. This is particularly useful during development when you want to make changes to the source code and have them immediately reflected in the installed package without needing to reinstall it. For example, pip install -e . will install the package located in the current directory in editable mode. Another common use case is to install a package from a local path or a VCS repository while keeping it editable. For example, pip install -e git+https://github.com/username/repo.git#egg=package_name.
    f. `pip uninstall`: Use this command to uninstall a third-party library. This should be used cautiously as it may cause dependency issues. If you need to change the version of a package, it is better to use `pip install [package_name]==[version]` instead.
    g. `apt-get update -qq && apt-get install [package]=[version] -y -qq`: Use this command to install system packages if needed, remember to use `-y`. Use `-qq` to minimize the output if there is nothing wrong.
    h. `export <variable>=<value>`: Use this command to set system environment variables.
    i. You can use the `--help` parameter to view detailed usage instructions for various tools, such as `pipdeptree --help` and `pip install --help`, etc.
    j. You may also use other commands that are not listed here, including built-in Bash commands and other system commands.
    *Note*: Always consider the potential impact of each command on the system. Aim to achieve the best results with minimal changes.
    *Note*: For modules not found in the error message, first check if the corresponding module is available in the project folder before proceeding with external downloads. For example, if you encounter an error stating ModuleNotFoundError: No module named 'my_module', check if there is a file named my_module.py in your project directory. If it is not present, then you can look for the module externally and download it if necessary.
    *Note*: Do not use external download tools like `git clone` or `wget` to download a large number of files directly in the /repo folder (or its subdirectories) to avoid causing significant changes to the original repository.
    *Note*: Flexibility: You do not need to complete all configurations in one go. If you are unsure whether the configuration is approximately complete, you can use the `runtest` or `poetryruntest`(When you configured in poetry environment) command. I will check the configured environment and return any error messages. Based on the error messages, you can make further adjustments.
    *Note*: In special cases, if you feel that the Docker environment has become too messy to achieve your goal, you can use `clear_configuration` command to restore it to the initial Python 3.10 environment or `change_python_version` and start over.
**Most Important!** You can execute `runtest` or `poetryruntest` anywhere when you decide to test the environment. You do not need to complete all the previous steps; you can directly run `runtest` or `poetryruntest` to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
If you encounter import errors such as ModuleNotFoundError or ImportError, you can consider two solutions. One solution is to use external tools like pip or apt-get to download these dependencies. The other solution is to check for local dependencies in the repository; if local dependencies are available, you can use `export PYTHONPATH=` statements to set environment variables (preferably), or modify the __init__.py file to resolve the issue.
Please note that when manually using pip, apt-get, poetry, or other tools to download third-party libraries, try to use the `-q` (quiet) mode if available to reduce intermediate progress bar outputs. Additionally, we will help remove more obvious progress bar information to minimize interference with the analysis.
If you need to install packages using pip, please consider adding them to the waiting list first, and then use the `download` command to proceed with the installation.
In each round of the conversation, we will inform you of the commands that have been correctly executed and have changed the state of the current Docker container. Please reflect on each round's Observation in relation to the current state of the Docker container and decide the subsequent Action.
If you need to run two or more commands, please strictly follow the order by enclosing each command in ONE ```bash and ``` blocks connected by "&&" with ONE line! It is not recommended to use backslashes (\) for line continuation. If you need to execute commands that span multiple lines, it is advisable to write them into a .sh file and then run the executable file. For example, if you want to enter the /repo directory and execute `poetry install`, you should input:
```bash
cd /repo && poetry install
```

It is not recommended to directly input:
```bash
cd /repo
```
```bash
poetry install
```

Nor is it recommended to input:
```bash
cd /repo \
poetry install
```

We also strongly request that you try to write the instructions on the same line as much as possible, and do not break them into multiple lines, as this may cause parsing errors. Even if the line of instructions contains a lot of && connections, do not arbitrarily break it into multiple lines.

We will automatically maintain two lists in the background to facilitate the installation and download of third-party libraries. These are:
1. waiting list: Used to store third-party libraries waiting to be downloaded, including both pip and apt libraries. You can use `waitinglist show` to show all items in it.
2. conflict list: Used to store elements with the same name as those in the waiting list but with inconsistent version constraints. You can use `conflictlist show` to show all items in it.
*Note*: you only need to follow the prompts to complete operations on these lists during the running process and can only manipulate them using the provided commands.
*Note*: Before operating waiting list, conflict list, or download commands, you can use waitinglist show or conflictlist show to observe their structure each time.


IN GOOD FORMAT: 
All your answer must contain Thought and Action. 
Calling CLI tools Action using bash block like ```bash  ```. 
Editing and Writing code Action using diff block like ```diff ```.
The command line you generate will be run in the bash sandbox environment, and the running results will be returned to you through the system messages.

IMPORTANT TIPS: 
        * Each round of reply can only contain one ```bash ``` block, which means Each round of your answers contain only *ONE* action!
        * Please submit the first command first, then after receiving the response, you can issue the second command. You are free to use any other bash communication.

You are now in the Docker environment of python:3.10. Please perform all operations within this environment.
CLI TOOLS: You can call CLI tools in  ```bash ... ``` block as Action with a Thought. like:
### Thought: I need to understand the structure of the root directory.
### Action:
```bash
ls /repo
```

For another example:
### Thought: I need to read the README.md file.
### Action:
```bash
cat README.md
```


CODE EDITING AND WRITING: All changes to files must use the ```diff  ```  block format, with symbols <<<<<<< SEARCH, ======= and >>>>>>> REPLACE 

You need to provide code patch. The patch should according to the original code, indent correctly, and do not include line numbers. The format is as follows: 
### Thought: Modify explanation...
### Action: 
```diff 
/absolute/path/of/target.py
<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE

<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE
``` 
Every *SEARCH/REPLACE block must use this format:
1. The opening fence ```diff 
2. The file path alone on a line, verbatim. No bold asterisks, no quotes around it, no escaping of characters, etc.
3. The start of search block: <<<<<<< SEARCH
4. A contiguous chunk of lines to search for in the existing source code
5. The dividing line: =======
6. The lines to replace into the source code
7. The end of the replace block: >>>>>>> REPLACE
8. The closing fence: ``` 
Once you want to modify the code you MUST: 
        * Include *ALL* the code being searched and replaced!
        * Every *SEARCH* section must *EXACTLY MATCH* the existing source code, character for character, including all comments, docstrings, etc.
        * '<<<<<<< SEARCH', '=======' and  '>>>>>>> REPLACE' symbols must be on a line by themselves and cannot be indented.
        * All code modifications must be expressed in the REPLACE format above (including delete an insert). We will find the source code with the highest matching degree in the original file and replace it. Please provide sufficient and unique old line(s) from snippet to facilitate matching.
        * If the code patch you provide is successfully applied, the differences before and after the code modification will be returned.
        * The paths of modified files must be completely absolute paths.
        * Make sure the patch you provide is indented correctly especially in python programs: The indentation of old lines is exactly the same as the original code, and the indentation of new lines is correct.
        * All patches must be based on the original code viewed by the tools, and fabricated code patch(es) is prohibited.
        * Previously successfully applied patches will modify the code, and new patches must be applied based on the current code. Please review the relevant code again then provide new patches.
        * If the old line(s) is empty, it is considered to be inserted at the beginning of the file. If the file does not exist, a new file will be created and the new line will be written. like:
### Thought: Create a.py
### Action:
```diff
/project_path/.../a.py
<<<<<<< SEARCH
=======
    [new line(s) to add]
>>>>>>> REPLACE
```

*Note*: Do not make extensive changes to the existing files in the /repo folder. You may only make appropriate and necessary changes to the original repository files (e.g., when there are actual errors or tests that cannot be run).
*Very Important Note*: Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
In addition to typical bash commands, we also provide the following commands that can be used, you can use them flexibly if needed:
waitinglist add -p package_name [-v version_constraints] -t tool # Add item into waiting list. If no 'version_constraints' are specified, the latest version will be downloaded by default.
waitinglist addfile file_path # Add all entries from a file similar to requirements.txt format to the waiting list.
waitinglist clear # Used to clear all the items in the waiting list.
conflictlist solve -v "[version_cosntraints]" # Resolve the conflict for the first element in the conflict list, and update the version constraints for the corresponding package_name and tool to version_constraints. If no 'version_constraints' are specified, the latest version will be downloaded by default.
conflictlist solve -u # Keep the original version constraint that exists in the waiting list, and discard the other version constraints with the same name and tool in the conflict list.
conflictlist clear # Used to clear all the items in the conflict list.
conflictlist show # Used to show all the items in the conflict list.
waitinglist show # Used to show all the items in the waiting list.
download # Download all pending elements in the waiting list at once.
runtest # Check if the configured environment is correct.
poetryruntest # Check if the configured environment is correct in poetry environment! If you want to run tests in poetry environment, run it.
runpipreqs # Generate 'requirements_pipreqs.txt' and 'pipreqs_output.txt' and 'pipreqs_error.txt'.
change_python_version python_version # Switching the Python version in the Docker container will forgo any installations made prior to the switch. The Python version number should be represented directly with numbers and dots, without any quotation marks.
clear_configuration # Reset all the configuration to the initial setting of python:3.10.


VERY IMPORTANT TIPS: 
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!

---------------------------
### Thought:
I need to understand the structure of the root directory to identify relevant configuration files for setting up the environment.

### Action:
```bash
ls /repo
```
### Observation:
Running `ls /repo`...
CODE_OF_CONDUCT.md  DEVELOPING.md  MANIFEST.in	docs		src    tox.ini
CONTRIBUTING.md     LICENSE	   README.md	pyproject.toml	tests  utils
`ls /repo` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 199 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought:
I noticed the presence of `pyproject.toml`, which indicates that this project uses a modern Python packaging system possibly managed by Poetry. Additionally, there are several other markdown files that could provide useful information about the project, such as README.md and others.

I will now inspect the contents of `pyproject.toml` to understand the dependencies and settings used by the project.

### Action:
```bash
cat /repo/pyproject.toml
```
### Observation:
Running `cat /repo/pyproject.toml`...
The output is too long, so we've truncated it to show you the first and last 5000 characters.
Running `cat /repo/pyproject.toml`...
[build-system]
requires = ["setuptools >= 61.0", "wheel", "build"]
build-backend = "setuptools.build_meta"
[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
[tool.setuptools.package-data]
guidellm = ["*"]
# ************************************************
# ********** Project Metadata **********
# ************************************************
[project]
name = "guidellm"
version = "0.1.0"
description = "Guidance platform for deploying and managing large language models."
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.8.0,<4.0"
license = { file = "LICENSE" }
authors = [ { name = "Neuralmagic, Inc." } ]
urls = { homepage = "https://github.com/neuralmagic/guidellm" }
dependencies = [
    "click",
    "datasets",
    "ftfy>=6.0.0",
    "loguru",
    "numpy",
    "openai",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pyyaml>=6.0.0",
    "requests",
    "rich",
    "transformers",
]
[project.optional-dependencies]
dev = [
    # general and configurations
    "pre-commit~=3.5.0",
    "scipy~=1.10",
    "sphinx~=7.1.2",
    "tox~=4.16.0",
    # testing
    "pytest~=8.2.2",
    "pytest-asyncio~=0.23.8",
    "pytest-cov~=5.0.0",
    "pytest-mock~=3.14.0",
    "pytest-rerunfailures~=14.0",
    "requests-mock~=1.12.1",
    # code quality
    "mypy~=1.10.1",
    "ruff~=0.5.2",
    # docs quality
    "mdformat~=0.7.17",
    "mdformat-footnote~=0.1.1",
    "mdformat-frontmatter~=2.0.8",
    "mdformat-gfm~=0.3.6",
    # type-checking
    "types-click~=7.1.8",
    "types-PyYAML~=6.0.1",
    "types-requests~=2.32.0",
    "types-toml",
]
[project.entry-points.console_scripts]
guidellm = "guidellm.main:generate_benchmark_report_cli"
guidellm-config = "guidellm.config:print_config"
# ************************************************
# ********** Code Quality Tools **********
# ************************************************
[tool.black]
line-length = 88
target-version = ['py38']
[tool.isort]
profile = "black"
[tool.mypy]
files = ["src/guidellm", "tests"]
python_version = '3.8'
warn_redundant_casts = true
warn_unused_ignores = false
show_error_codes = true
namespace_packages = true
exclude = ["venv", ".tox"]
# Silence "type import errors" as our 3rd-party libs does not have types
# Check: https://mypy.readthedocs.io/en/latest/config_file.html#import-discovery
follow_imports = 'silent'
[[tool.mypy.overrides]]
module = ["datasets.*"]
ignore_missing_imports=true
[tool.ruff]
line-length = 88
indent-width = 4
exclude = ["build", "dist", "env", ".venv"]
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
[tool.ruff.lint]
ignore = [
    "PLR0913",
    "TCH001",
    "COM812",
    "ISC001",
    "TCH002",
    "PLW1514", # allow Path.open without encoding
    "RET505", # allow `else` blocks
    "RET506" # allow `else` blocks
]
select = [
    # Rules reference: https://docs.astral.sh/ruff/rules/
    # Code Style / Formatting
    "E", # pycodestyle: checks adherence to PEP 8 conventions including spacing, indentation, and line length
    "W", # pycodestyle: checks adherence to PEP 8 conventions including spacing, indentation, and line length
    "A", # flake8-builtins: prevents shadowing of Python built-in names
    "C", # Convention: ensures code adheres to specific style and formatting conventions
    "COM", # flake8-commas: enforces the correct use of trailing commas
    "ERA", # eradicate: detects commented-out code that should be removed
    "I", # isort: ensures imports are sorted in a consistent manner
    "ICN", # flake8-import-conventions: enforces import conventions for better readability
    "N", # pep8-naming: enforces PEP 8 naming conventions for classes, functions, and variables
    "NPY", # NumPy: enforces best practices for using the NumPy library
    "PD", # pandas-vet: enforces best practices for using the pandas library
    "PT", # flake8-pytest-style: enforces best practices and style conventions for pytest tests
    "PTH", # flake8-use-pathlib: encourages the use of pathlib over os.path for file system operations
    "Q", # flake8-quotes: enforces consistent use of single or double quotes
    "TCH", # flake8-type-checking: enforces type checking practices and standards
    "TID", # flake8-tidy-imports: enforces tidy and well-organized imports
    "RUF022", # flake8-ruff: enforce sorting of __all__ in modules
    # Code Structure / Complexity
    "C4", # flake8-comprehensions: improves readability and performance of list, set, and dict comprehensions
    "C90", # mccabe: checks for overly complex code using cyclomatic complexity
    "ISC", # flake8-implicit-str-concat: prevents implicit string concatenation
    "PIE", # flake8-pie: identifies and corrects common code inefficiencies and mistakes
    "R", # Refactor: suggests improvements to code structure and readability
    "SIM", # flake8-simplify: simplifies complex expressions and improves code readability
    # Code Security / Bug Prevention
    "ARG", # flake8-unused-arguments: detects unused function and method arguments
    "ASYNC", # flake8-async: identifies incorrect or inefficient usage patterns in asynchronous code
    "B", # flake8-bugbear: detects common programming mistakes and potential bugs
    "BLE", # flake8-blind-except: prevents blind exceptions that catch all exceptions without handling
    "E", # Error: detects and reports errors in the code
    "F", # Pyflakes: detects unused imports, shadowed imports, undefined variables, and various formatting errors in string operations
    "INP", # flake8-no-pep420: prevents implicit namespace packages by requiring __init__.py
    "PGH", # pygrep-hooks: detects deprecated and dangerous code patterns
    "PL", # Pylint: comprehensive source code analyzer for enforcing coding standards and detecting errors
    "RSE", # flake8-raise: ensures exceptions are raised correctly
    "S", # flake8-bandit: detects security issues and vulnerabilities in the code
    "SLF", # flake8-se
...[Truncation]...
    "types-requests~=2.32.0",
    "types-toml",
]
[project.entry-points.console_scripts]
guidellm = "guidellm.main:generate_benchmark_report_cli"
guidellm-config = "guidellm.config:print_config"
# ************************************************
# ********** Code Quality Tools **********
# ************************************************
[tool.black]
line-length = 88
target-version = ['py38']
[tool.isort]
profile = "black"
[tool.mypy]
files = ["src/guidellm", "tests"]
python_version = '3.8'
warn_redundant_casts = true
warn_unused_ignores = false
show_error_codes = true
namespace_packages = true
exclude = ["venv", ".tox"]
# Silence "type import errors" as our 3rd-party libs does not have types
# Check: https://mypy.readthedocs.io/en/latest/config_file.html#import-discovery
follow_imports = 'silent'
[[tool.mypy.overrides]]
module = ["datasets.*"]
ignore_missing_imports=true
[tool.ruff]
line-length = 88
indent-width = 4
exclude = ["build", "dist", "env", ".venv"]
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
[tool.ruff.lint]
ignore = [
    "PLR0913",
    "TCH001",
    "COM812",
    "ISC001",
    "TCH002",
    "PLW1514", # allow Path.open without encoding
    "RET505", # allow `else` blocks
    "RET506" # allow `else` blocks
]
select = [
    # Rules reference: https://docs.astral.sh/ruff/rules/
    # Code Style / Formatting
    "E", # pycodestyle: checks adherence to PEP 8 conventions including spacing, indentation, and line length
    "W", # pycodestyle: checks adherence to PEP 8 conventions including spacing, indentation, and line length
    "A", # flake8-builtins: prevents shadowing of Python built-in names
    "C", # Convention: ensures code adheres to specific style and formatting conventions
    "COM", # flake8-commas: enforces the correct use of trailing commas
    "ERA", # eradicate: detects commented-out code that should be removed
    "I", # isort: ensures imports are sorted in a consistent manner
    "ICN", # flake8-import-conventions: enforces import conventions for better readability
    "N", # pep8-naming: enforces PEP 8 naming conventions for classes, functions, and variables
    "NPY", # NumPy: enforces best practices for using the NumPy library
    "PD", # pandas-vet: enforces best practices for using the pandas library
    "PT", # flake8-pytest-style: enforces best practices and style conventions for pytest tests
    "PTH", # flake8-use-pathlib: encourages the use of pathlib over os.path for file system operations
    "Q", # flake8-quotes: enforces consistent use of single or double quotes
    "TCH", # flake8-type-checking: enforces type checking practices and standards
    "TID", # flake8-tidy-imports: enforces tidy and well-organized imports
    "RUF022", # flake8-ruff: enforce sorting of __all__ in modules
    # Code Structure / Complexity
    "C4", # flake8-comprehensions: improves readability and performance of list, set, and dict comprehensions
    "C90", # mccabe: checks for overly complex code using cyclomatic complexity
    "ISC", # flake8-implicit-str-concat: prevents implicit string concatenation
    "PIE", # flake8-pie: identifies and corrects common code inefficiencies and mistakes
    "R", # Refactor: suggests improvements to code structure and readability
    "SIM", # flake8-simplify: simplifies complex expressions and improves code readability
    # Code Security / Bug Prevention
    "ARG", # flake8-unused-arguments: detects unused function and method arguments
    "ASYNC", # flake8-async: identifies incorrect or inefficient usage patterns in asynchronous code
    "B", # flake8-bugbear: detects common programming mistakes and potential bugs
    "BLE", # flake8-blind-except: prevents blind exceptions that catch all exceptions without handling
    "E", # Error: detects and reports errors in the code
    "F", # Pyflakes: detects unused imports, shadowed imports, undefined variables, and various formatting errors in string operations
    "INP", # flake8-no-pep420: prevents implicit namespace packages by requiring __init__.py
    "PGH", # pygrep-hooks: detects deprecated and dangerous code patterns
    "PL", # Pylint: comprehensive source code analyzer for enforcing coding standards and detecting errors
    "RSE", # flake8-raise: ensures exceptions are raised correctly
    "S", # flake8-bandit: detects security issues and vulnerabilities in the code
    "SLF", # flake8-self: prevents incorrect usage of the self argument in class methods
    "T10", # flake8-debugger: detects the presence of debugging tools such as pdb
    "T20", # flake8-print: detects print statements left in the code
    "UP", # pyupgrade: automatically upgrades syntax for newer versions of Python
    "W", # Warning: provides warnings about potential issues in the code
    "YTT", # flake8-2020: identifies code that will break with future Python releases
    # Code Documentation
    "FIX", # flake8-fixme: detects FIXMEs and other temporary comments that should be resolved
]
[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests
    "ARG", # Unused function args allowed in tests
    "PLR2004", # Magic value used in comparison
    "TCH002", # No import only type checking in tests
    "SLF001", # enable private member access in tests
    "S105", # allow hardcoded passwords in tests
    "S311", # allow standard pseudo-random generators in tests
    "PT011", # allow generic exceptions in tests
    "N806", # allow uppercase variable names in tests
    "PGH003", # allow general ignores in tests
    "S106", # allow hardcoded passwords in tests
    "PLR0915", # allow complext statements in tests
]
[tool.ruff.lint.isort]
known-first-party = ["guidellm", "tests"]
[tool.pytest.ini_options]
addopts = '-s -vvv --cache-clear'
markers = [
    "smoke: quick tests to check basic functionality",
    "sanity: detailed tests to ensure major functions work correctly",
    "regression: tests to ensure that new changes do not break existing functionality"
]
`cat /repo/pyproject.toml` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 198 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought:
The `pyproject.toml` file indicates that the project uses Poetry for dependency management and includes all necessary dependencies and optional development dependencies. Therefore, I will proceed to install the project's dependencies using Poetry.

### Action:
```bash
cd /repo && poetry install
```
### Observation:
Running `cd /repo`...
`cd /repo` executes with returncode: 0
Running `poetry install`...
[31;1m[tool.poetry] section not found in /repo/pyproject.toml[39;22m
The command execution failed, so I have reverted it back to the previous state, which is the environment before running this command.
`poetry install` executes with returncode: 1

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 197 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought:
It appears that the `pyproject.toml` file does not include a `[tool.poetry]` section, so Poetry cannot be used directly to install the dependencies. As the `pyproject.toml` uses setuptools, I will install the dependencies specified in the file using `pip install -e .`.

### Action:
```bash
pip install -e /repo
```
### Observation:
Running `pip install -e /repo`...
The output is too long, so we've truncated it to show you the first and last 5000 characters.
Running `pip install -e /repo`...
Looking in indexes: http://simple/
Obtaining file:///repo
  Installing build dependencies ... [?25l- \ | / - done
  Downloading http://packages/click/click-8.1.7-py3-none-any.whl (97 kB)
Collecting datasets (from guidellm==0.1.0)
  Downloading http://packages/datasets/datasets-3.2.0-py3-none-any.whl (480 kB)
Collecting ftfy>=6.0.0 (from guidellm==0.1.0)
  Downloading http://packages/ftfy/ftfy-6.3.1-py3-none-any.whl (44 kB)
Collecting loguru (from guidellm==0.1.0)
  Downloading http://packages/loguru/loguru-0.7.3-py3-none-any.whl (61 kB)
Collecting numpy (from guidellm==0.1.0)
  Downloading http://packages/numpy/numpy-2.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.4 MB)
  Downloading http://packages/openai/openai-1.57.4-py3-none-any.whl (390 kB)
Collecting pydantic>=2.0.0 (from guidellm==0.1.0)
  Downloading http://packages/pydantic/pydantic-2.10.3-py3-none-any.whl (456 kB)
Collecting pydantic-settings>=2.0.0 (from guidellm==0.1.0)
  Downloading http://packages/pydantic-settings/pydantic_settings-2.7.0-py3-none-any.whl (29 kB)
Collecting pyyaml>=6.0.0 (from guidellm==0.1.0)
  Downloading http://packages/pyyaml/PyYAML-6.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (751 kB)
  Using cached http://packages/requests/requests-2.32.3-py3-none-any.whl (64 kB)
Collecting rich (from guidellm==0.1.0)
  Downloading http://packages/rich/rich-13.9.4-py3-none-any.whl (242 kB)
Collecting transformers (from guidellm==0.1.0)
  Downloading http://packages/transformers/transformers-4.47.0-py3-none-any.whl (10.1 MB)
  Downloading http://packages/wcwidth/wcwidth-0.2.13-py2.py3-none-any.whl (34 kB)
Collecting annotated-types>=0.6.0 (from pydantic>=2.0.0->guidellm==0.1.0)
  Downloading http://packages/annotated-types/annotated_types-0.7.0-py3-none-any.whl (13 kB)
Collecting pydantic-core==2.27.1 (from pydantic>=2.0.0->guidellm==0.1.0)
  Downloading http://packages/pydantic-core/pydantic_core-2.27.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)
  Downloading http://packages/typing-extensions/typing_extensions-4.12.2-py3-none-any.whl (37 kB)
Collecting python-dotenv>=0.21.0 (from pydantic-settings>=2.0.0->guidellm==0.1.0)
  Downloading http://packages/python-dotenv/python_dotenv-1.0.1-py3-none-any.whl (19 kB)
Collecting filelock (from datasets->guidellm==0.1.0)
  Using cached http://packages/filelock/filelock-3.16.1-py3-none-any.whl (16 kB)
Collecting pyarrow>=15.0.0 (from datasets->guidellm==0.1.0)
  Downloading http://packages/pyarrow/pyarrow-18.1.0-cp310-cp310-manylinux_2_28_x86_64.whl (40.1 MB)
[?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/40.1 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m40.1/40.1 MB[0m [31m315.5 MB/s[0m eta [36m0:00:00[0m
[?25hCollecting dill<0.3.9,>=0.3.0 (from datasets->guidellm==0.1.0)
  Downloading http://packages/dill/dill-0.3.8-py3-none-any.whl (116 kB)
Collecting pandas (from datasets->guidellm==0.1.0)
  Downloading http://packages/pandas/pandas-2.2.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.1 MB)
[?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/13.1 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m13.1/13.1 MB[0m [31m242.7 MB/s[0m eta [36m0:00:00[0m
[?25hCollecting tqdm>=4.66.3 (from datasets->guidellm==0.1.0)
  Downloading http://packages/tqdm/tqdm-4.67.1-py3-none-any.whl (78 kB)
Collecting xxhash (from datasets->guidellm==0.1.0)
  Downloading http://packages/xxhash/xxhash-3.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)
Collecting multiprocess<0.70.17 (from datasets->guidellm==0.1.0)
  Downloading http://packages/multiprocess/multiprocess-0.70.16-py310-none-any.whl (134 kB)
Collecting fsspec<=2024.9.0,>=2023.1.0 (from fsspec[http]<=2024.9.0,>=2023.1.0->datasets->guidellm==0.1.0)
  Downloading http://packages/fsspec/fsspec-2024.9.0-py3-none-any.whl (179 kB)
Collecting aiohttp (from datasets->guidellm==0.1.0)
  Downloading http://packages/aiohttp/aiohttp-3.11.10-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)
[?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/1.6 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m1.6/1.6 MB[0m [31m62.2 MB/s[0m eta [36m0:00:00[0m
[?25hCollecting huggingface-hub>=0.23.0 (from datasets->guidellm==0.1.0)
  Downloading http://packages/huggingface-hub/huggingface_hub-0.27.0-py3-none-any.whl (450 kB)
Requirement already satisfied: packaging in /usr/local/lib/python3.10/site-packages (from datasets->guidellm==0.1.0) (24.2)
Collecting charset-normalizer<4,>=2 (from requests->guidellm==0.1.0)
  Using cached http://packages/charset-normalizer/charset_normalizer-3.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (144 kB)
Collecting idna<4,>=2.5 (from requests->guidellm==0.1.0)
  Using cached http://packages/idna/idna-3.10-py3-none-any.whl (70 kB)
Collecting urllib3<3,>=1.21.1 (from requests->guidellm==0.1.0)
  Using cached http://packages/urllib3/urllib3-2.2.3-py3-none-any.whl (126 kB)
Collecting certifi>=2017.4.17 (from requests->guidellm==0.1.0)
  Downloading http://packages/certifi/certifi-2024.12.14-py3-non
...[Truncation]...
2,>=0.21 (from transformers->guidellm==0.1.0)
  Downloading http://packages/tokenizers/tokenizers-0.21.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)
[?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/3.0 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m3.0/3.0 MB[0m [31m114.2 MB/s[0m eta [36m0:00:00[0m
[?25hCollecting safetensors>=0.4.1 (from transformers->guidellm==0.1.0)
  Downloading http://packages/safetensors/safetensors-0.4.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (435 kB)
Requirement already satisfied: exceptiongroup>=1.0.2 in /usr/local/lib/python3.10/site-packages (from anyio<5,>=3.5.0->openai->guidellm==0.1.0) (1.2.2)
Collecting aiohappyeyeballs>=2.3.0 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/aiohappyeyeballs/aiohappyeyeballs-2.4.4-py3-none-any.whl (14 kB)
Collecting aiosignal>=1.1.2 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/aiosignal/aiosignal-1.3.2-py2.py3-none-any.whl (7.6 kB)
Collecting async-timeout<6.0,>=4.0 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/async-timeout/async_timeout-5.0.1-py3-none-any.whl (6.2 kB)
Collecting attrs>=17.3.0 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/attrs/attrs-24.3.0-py3-none-any.whl (63 kB)
Collecting frozenlist>=1.1.1 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/frozenlist/frozenlist-1.5.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (241 kB)
Collecting multidict<7.0,>=4.5 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/multidict/multidict-6.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (124 kB)
Collecting propcache>=0.2.0 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/propcache/propcache-0.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (205 kB)
Collecting yarl<2.0,>=1.17.0 (from aiohttp->datasets->guidellm==0.1.0)
  Downloading http://packages/yarl/yarl-1.18.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (319 kB)
Collecting httpcore==1.* (from httpx<1,>=0.23.0->openai->guidellm==0.1.0)
  Downloading http://packages/httpcore/httpcore-1.0.7-py3-none-any.whl (78 kB)
Collecting h11<0.15,>=0.13 (from httpcore==1.*->httpx<1,>=0.23.0->openai->guidellm==0.1.0)
  Downloading http://packages/h11/h11-0.14.0-py3-none-any.whl (58 kB)
Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich->guidellm==0.1.0)
  Downloading http://packages/mdurl/mdurl-0.1.2-py3-none-any.whl (10.0 kB)
Collecting python-dateutil>=2.8.2 (from pandas->datasets->guidellm==0.1.0)
  Downloading http://packages/python-dateutil/python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
Collecting pytz>=2020.1 (from pandas->datasets->guidellm==0.1.0)
  Downloading http://packages/pytz/pytz-2024.2-py2.py3-none-any.whl (508 kB)
Collecting tzdata>=2022.7 (from pandas->datasets->guidellm==0.1.0)
  Downloading http://packages/tzdata/tzdata-2024.2-py2.py3-none-any.whl (346 kB)
Collecting six>=1.5 (from python-dateutil>=2.8.2->pandas->datasets->guidellm==0.1.0)
  Downloading http://packages/six/six-1.17.0-py2.py3-none-any.whl (11 kB)
Building wheels for collected packages: guidellm
  Building editable for guidellm (pyproject.toml) ... [?25l- done
[?25h  Created wheel for guidellm: filename=guidellm-0.1.0-0.editable-py3-none-any.whl size=14937 sha256=b3b5102b78b13f47071cf4c449d6e0d14d0f801476f6595000b8a3f30f7f7189
  Stored in directory: /tmp/pip-ephem-wheel-cache-hk76sema/wheels/83/05/69/977b54e69478800cfcea8a9437a7ea4a9b1a48db334f824611
Successfully built guidellm
Installing collected packages: wcwidth, pytz, xxhash, urllib3, tzdata, typing-extensions, tqdm, sniffio, six, safetensors, regex, pyyaml, python-dotenv, pygments, pyarrow, propcache, numpy, mdurl, loguru, jiter, idna, h11, ftfy, fsspec, frozenlist, filelock, distro, dill, click, charset-normalizer, certifi, attrs, async-timeout, annotated-types, aiohappyeyeballs, requests, python-dateutil, pydantic-core, multiprocess, multidict, markdown-it-py, httpcore, anyio, aiosignal, yarl, rich, pydantic, pandas, huggingface-hub, httpx, tokenizers, pydantic-settings, openai, aiohttp, transformers, datasets, guidellm
Successfully installed aiohappyeyeballs-2.4.4 aiohttp-3.11.10 aiosignal-1.3.2 annotated-types-0.7.0 anyio-4.7.0 async-timeout-5.0.1 attrs-24.3.0 certifi-2024.12.14 charset-normalizer-3.4.0 click-8.1.7 datasets-3.2.0 dill-0.3.8 distro-1.9.0 filelock-3.16.1 frozenlist-1.5.0 fsspec-2024.9.0 ftfy-6.3.1 guidellm-0.1.0 h11-0.14.0 httpcore-1.0.7 httpx-0.28.1 huggingface-hub-0.27.0 idna-3.10 jiter-0.8.2 loguru-0.7.3 markdown-it-py-3.0.0 mdurl-0.1.2 multidict-6.1.0 multiprocess-0.70.16 numpy-2.2.0 openai-1.57.4 pandas-2.2.3 propcache-0.2.1 pyarrow-18.1.0 pydantic-2.10.3 pydantic-core-2.27.1 pydantic-settings-2.7.0 pygments-2.18.0 python-dateutil-2.9.0.post0 python-dotenv-1.0.1 pytz-2024.2 pyyaml-6.0.2 regex-2024.11.6 requests-2.32.3 rich-13.9.4 safetensors-0.4.5 six-1.17.0 sniffio-1.3.1 tokenizers-0.21.0 tqdm-4.67.1 transformers-4.47.0 typing-extensions-4.12.2 tzdata-2024.2 urllib3-2.2.3 wcwidth-0.2.13 xxhash-3.5.0 yarl-1.18.3
[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.[0m[33m
`pip install -e /repo` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 196 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
pip install -e /repo
---------------------------
### Thought:
I have successfully installed the project's dependencies using `pip install -e /repo`. Next, I will attempt to run the tests to see if the environment is correctly configured and if there are any errors that need to be addressed.

### Action:
```bash
runtest
```
### Observation:
Running `python /home/tools/runtest.py`...
Error: Please modify the configuration according to the error messages below. Once all issues are resolved, rerun the tests.
============================= test session starts ==============================
platform linux -- Python 3.10.15, pytest-8.3.4, pluggy-1.5.0 -- /usr/local/bin/python3.10
cachedir: .pytest_cache
rootdir: /repo
configfile: pyproject.toml
plugins: anyio-4.7.0, xdist-3.6.1
collecting ... None of PyTorch, TensorFlow >= 2.0, or Flax have been found. Models won't be available and only tokenizers, configuration and file/data utilities can be used.
collected 2 items / 1 error
<Dir repo>
  <Package tests>
    <Package e2e>
      <Module test_guidellm.py>
        <Function test_import>
    <Package integration>
      <Module test_guidellm.py>
        <Function test_import>
==================================== ERRORS ====================================
_________________________ ERROR collecting tests/unit __________________________
/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module
    exec(co, module.__dict__)
tests/unit/conftest.py:6: in <module>
    import requests_mock
E   ModuleNotFoundError: No module named 'requests_mock'
=========================== short test summary info ============================
ERROR tests/unit - ModuleNotFoundError: No module named 'requests_mock'
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
===================== 2 tests collected, 1 error in 1.78s ======================
The command execution failed, so I have reverted it back to the previous state, which is the environment before running this command.
`runtest` executes with returncode: 2

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 195 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
pip install -e /repo
---------------------------
### Thought:
The error indicates that the `requests_mock` module is missing. This module is listed as an optional development dependency in the `pyproject.toml`. I will add `requests-mock` to the waiting list and then proceed to download it.

### Action:
```bash
waitinglist add -p requests-mock -t pip && download
```
### Observation:
Running `waitinglist add -p requests-mock -t pip`...
'requests-mock' (using pip to download) has been added into the waiting list. If you have multiple elements to add to the waitinglist, you can use && to connect multiple `waitinglist add` statements and surround them with ```bash and ```. Please make sure to write the complete statements; we will only recognize complete statements. Do not use ellipses or other incomplete forms.Running `download`...
'requests-mock' has been removed from the waiting list.
"requests-mock" installed successfully.
In this round, the following third-party libraries were successfully downloaded. They are:
requests-mock (using tool pip)
No third-party libraries failed to download in this round.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 194 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
pip install -e /repo
python /home/tools/pip_download.py -p requests-mock
---------------------------
### Thought:
I have successfully installed the `requests-mock` module. I will now attempt to run the tests again to see if there are any further issues that need to be addressed.

### Action:
```bash
runtest
```
### Observation:
Running `python /home/tools/runtest.py`...
The output is too long, so we've truncated it to show you the first and last 5000 characters.
Running `python /home/tools/runtest.py`...
Error: Please modify the configuration according to the error messages below. Once all issues are resolved, rerun the tests.
============================= test session starts ==============================
platform linux -- Python 3.10.15, pytest-8.3.4, pluggy-1.5.0 -- /usr/local/bin/python3.10
cachedir: .pytest_cache
rootdir: /repo
configfile: pyproject.toml
plugins: requests-mock-1.12.1, anyio-4.7.0, xdist-3.6.1
collecting ... None of PyTorch, TensorFlow >= 2.0, or Flax have been found. Models won't be available and only tokenizers, configuration and file/data utilities can be used.
collected 327 items / 1 error
<Dir repo>
  <Package tests>
    <Package e2e>
      <Module test_guidellm.py>
        <Function test_import>
    <Package integration>
      <Module test_guidellm.py>
        <Function test_import>
    <Package unit>
      <Package backend>
        <Module test_base.py>
          <Function test_backend_registry>
          <Function test_generative_response_creation>
          <Function test_backend_make_request>
          <Function test_backend_submit_final>
          <Function test_backend_submit_multi>
          <Function test_backend_submit_no_response>
          <Function test_backend_submit_multi_final>
          <Function test_backend_models>
          <Function test_backend_test_connection>
          <Function test_backend_tokenizer>
          <Function test_backend_abstract_methods>
        <Module test_openai_backend.py>
          <Function test_openai_backend_create[test_key-http://test-target-test-model-request_args0-http://test-target]>
          <Function test_openai_backend_create[None-None-None-request_args1-http://localhost:8000/v1]>
          <Function test_openai_backend_models>
          <Function test_openai_backend_make_request[req0-None]>
          <Function test_openai_backend_make_request[req1-None]>
          <Function test_openai_backend_make_request[req2-request_args2]>
          <Function test_openai_backend_make_request[req3-request_args3]>
          <Function test_openai_backend_submit>
          <Function test_openai_backend_api_key>
          <Function test_openai_backend_api_key_env>
          <Function test_openai_backend_target>
          <Function test_openai_backend_target_env>
          <Function test_openai_backend_target_none_error>
      <Package cli>
        <Module test_custom_type_params.py>
          <Function test_valid_integer_input>
          <Function test_valid_dataset_input>
          <Function test_invalid_string_input>
          <Function test_invalid_float_input>
          <Function test_invalid_non_numeric_string_input>
          <Function test_invalid_mixed_string_input>
      <Package core>
        <Module test_distribution.py>
          <Function test_distribution_initialization>
          <Function test_distribution_statistics>
          <Function test_distribution_no_data>
          <Function test_distribution_add_data>
          <Function test_distribution_remove_data>
          <Function test_distribution_str>
          <Function test_distribution_repr>
          <Function test_distribution_json>
          <Function test_distribution_yaml>
        <Module test_report.py>
          <Function test_guidance_report_initialization>
          <Function test_guidance_report_initialization_with_params>
          <Function test_guidance_report_print>
          <Function test_guidance_report_json>
          <Function test_guidance_report_yaml>
          <Function test_guidance_report_save_load_file>
          <Function test_empty_guidance_report>
          <Function test_compare_guidance_reports>
          <Function test_compare_guidance_reports_inequality>
        <Module test_request.py>
          <Function test_text_generation_request_initialization>
          <Function test_text_generation_request_initialization_with_params>
          <Function test_request_json>
          <Function test_request_yaml>
        <Module test_result.py>
          <Function test_text_generation_result_initialization>
          <Function test_text_generation_result_start>
          <Function test_text_generation_result_output_token>
          <Function test_text_generation_result_end>
          <Function test_text_generation_result_improper_lifecycle>
          <Function test_text_generation_result_json>
          <Function test_text_generation_result_yaml>
          <Function test_text_generation_error_initialization>
          <Function test_text_generation_error_json>
          <Function test_text_generation_error_yaml>
          <Function test_text_generation_benchmark_initialization>
          <Function test_text_generation_benchmark_started>
          <Function test_text_generation_benchmark_expected_rate>
          <Function test_text_generation_benchmark_overloaded_rate>
          <Function test_text_generation_benchmark_completed_with_result>
          <Function test_text_generation_benchmark_completed_with_error>
          <Function test_text_generation_benchmark_iter>
          <Function test_text_generation_benchmark_json>
          <Function test_text_generation_benchmark_yaml>
          <Function test_text_generation_benchmark_report_initialization>
          <Function test_text_generation_benchmark_report_add_benchmark>
          <Function test_text_generation_benchmark_report_iter>
          <Function test_text_generation_benchmark_report_json>
          <Function test_text_generation_benchmark_report_yaml>
        <Module test_serializable.py>
          <Function test_serializable_json>
          <Function test_serializable_yaml>
          <Function test_serializable_file_json>
          <Function test_serializable_file_yaml>
          <Function test_serializable_file_without_extension>
          <Function test_serializable_file_with_directory_json>
          <Function test_serializable_file_with_directory_yaml>
          <Function test_serializable_file_infer_extension>
          <Fun
...[Truncation]...
rators, new_lines = split_text(text)\n    assert words == ["This", "is", "a", "test", "with", "mixed", "separators."]\n    assert separators == ["\\t", " ", " ", "\\n", " ", " ", " "]\n    assert new_lines == [0, 4]\n]>
          <Function test_load_text_file_not_found>
          <Function test_load_text_lines[text\nline 1\nline 2-csv-None-expected0]>
          <Function test_load_text_lines[{"text": "line 1"}\n{"text": "line 2"}-jsonl-None-expected1]>
          <Function test_load_text_lines[text\nline 1\nline 2-txt-None-expected2]>
          <Function test_load_text_lines_invalid_data>
          <Function test_parse_text_objects_invalid_format>
          <Function test_parse_text_objects_invalid_data>
          <Function test_load_text_lines_with_filters[text\nline 1\nline 2\n-csv-filters0-expected0]>
          <Function test_is_path_with_symlink>
          <Function test_is_path_like_with_symlink>
          <Function test_load_text_lines_empty>
          <Function test_split_text_with_empty_string>
          <Function test_split_lines_by_punctuation_with_no_punctuation>
          <Function test_is_path_invalid_type>
          <Function test_is_path_like_invalid_type>
          <Function test_load_text_invalid_url>
          <Function test_parse_text_objects_empty_csv>
          <Function test_parse_text_objects_empty_jsonl>
          <Function test_parse_text_objects_invalid_jsonl>
          <Function test_parse_text_objects_empty_yaml>
          <Function test_clean_text_with_unicode>
          <Function test_split_lines_by_punctuation_with_multiple_punctuations>
          <Function test_is_url_empty_string>
          <Function test_load_text_invalid_data>
          <Function test_load_text_lines_empty_format>
          <Function test_split_text_with_mixed_separators>
        <Module test_transformers.py>
          <Function test_load_transformers_dataset[mock/directory/file.csv-dataset0-train-None-Dataset]>
          <Function test_load_transformers_dataset[mock/directory/file.json-dataset1-None-preferred_splits1-Dataset]>
          <Function test_load_transformers_dataset[mock/directory/file.py-dataset2-None-None-Dataset]>
          <Function test_load_transformers_dataset[dataset_arg3-None-val-None-Dataset]>
          <Function test_load_transformers_dataset[dataset_arg4-None-None-None-Dataset]>
          <Function test_load_transformers_dataset[dataset_arg5-None-None-None-IterableDataset]>
          <Function test_load_transformers_dataset[dataset_arg6-None-validation-None-IterableDataset]>
          <Function test_resolve_transformers_dataset[mock/directory/file.csv-dataset0-train-None-Dataset]>
          <Function test_resolve_transformers_dataset[mock/directory/file.json-dataset1-None-preferred_splits1-DatasetDict]>
          <Function test_resolve_transformers_dataset[mock/directory/file.py-dataset2-None-None-DatasetDict]>
          <Function test_resolve_transformers_dataset[mock/directory/file.unk-dataset3-None-None-DatasetDict]>
          <Function test_resolve_transformers_dataset[dataset_arg4-None-val-None-DatasetDict]>
          <Function test_resolve_transformers_dataset[dataset_arg5-None-None-None-Dataset]>
          <Function test_resolve_transformers_dataset[dataset_arg6-None-None-None-IterableDatasetDict]>
          <Function test_resolve_transformers_dataset[dataset_arg7-None-validation-None-IterableDataset]>
          <Function test_resolve_transformers_dataset_invalid>
          <Function test_resolve_transformers_dataset_split[dataset0-None-None-Dataset]>
          <Function test_resolve_transformers_dataset_split[dataset1-None-None-IterableDataset]>
          <Function test_resolve_transformers_dataset_split[dataset2-validation-None-IterableDataset]>
          <Function test_resolve_transformers_dataset_split_missing>
          <Function test_resolve_transformers_dataset_column[dataset0-None-None-text]>
          <Function test_resolve_transformers_dataset_column[dataset1-text-None-text]>
          <Function test_resolve_transformers_dataset_column[dataset2-None-preferred_columns2-text]>
          <Function test_resolve_transformers_dataset_column[dataset3-None-preferred_columns3-text]>
          <Function test_resolve_transformers_dataset_column[dataset4-None-None-text]>
          <Function test_resolve_transformers_dataset_column_missing>
==================================== ERRORS ====================================
_________ ERROR collecting tests/unit/scheduler/test_load_generator.py _________
ImportError while importing test module '/repo/tests/unit/scheduler/test_load_generator.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/local/lib/python3.10/site-packages/_pytest/python.py:493: in importtestmodule
    mod = import_path(
/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path
    importlib.import_module(module_name)
/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:184: in exec_module
    exec(co, module.__dict__)
tests/unit/scheduler/test_load_generator.py:5: in <module>
    from scipy.stats import kstest  # type: ignore
E   ModuleNotFoundError: No module named 'scipy'
=========================== short test summary info ============================
ERROR tests/unit/scheduler/test_load_generator.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
==================== 327 tests collected, 1 error in 2.38s =====================
The command execution failed, so I have reverted it back to the previous state, which is the environment before running this command.
`runtest` executes with returncode: 2

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 193 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
pip install -e /repo
python /home/tools/pip_download.py -p requests-mock
---------------------------
### Thought:
The error indicates that the `scipy` module is missing. This module is listed as an optional development dependency in the `pyproject.toml`. I will add `scipy` to the waiting list and then proceed to download it.

### Action:
```bash
waitinglist add -p scipy -t pip && download
```
### Observation:
Running `waitinglist add -p scipy -t pip`...
'scipy' (using pip to download) has been added into the waiting list. If you have multiple elements to add to the waitinglist, you can use && to connect multiple `waitinglist add` statements and surround them with ```bash and ```. Please make sure to write the complete statements; we will only recognize complete statements. Do not use ellipses or other incomplete forms.Running `download`...
'scipy' has been removed from the waiting list.
"scipy" installed successfully.
In this round, the following third-party libraries were successfully downloaded. They are:
scipy (using tool pip)
No third-party libraries failed to download in this round.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 192 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
pip install -e /repo
python /home/tools/pip_download.py -p requests-mock
python /home/tools/pip_download.py -p scipy
---------------------------
### Thought:
I have successfully installed the `scipy` module. I will now attempt to run the tests again to see if there are any further issues that need to be addressed.

### Action:
```bash
runtest
```
Congratulations, you have successfully configured the environment!
============================= test session starts ==============================
platform linux -- Python 3.10.15, pytest-8.3.4, pluggy-1.5.0 -- /usr/local/bin/python3.10
cachedir: .pytest_cache
rootdir: /repo
configfile: pyproject.toml
plugins: requests-mock-1.12.1, anyio-4.7.0, xdist-3.6.1
collecting ... None of PyTorch, TensorFlow >= 2.0, or Flax have been found. Models won't be available and only tokenizers, configuration and file/data utilities can be used.
collected 345 items

<Dir repo>
  <Package tests>
    <Package e2e>
      <Module test_guidellm.py>
        <Function test_import>
    <Package integration>
      <Module test_guidellm.py>
        <Function test_import>
    <Package unit>
      <Package backend>
        <Module test_base.py>
          <Function test_backend_registry>
          <Function test_generative_response_creation>
          <Function test_backend_make_request>
          <Function test_backend_submit_final>
          <Function test_backend_submit_multi>
          <Function test_backend_submit_no_response>
          <Function test_backend_submit_multi_final>
          <Function test_backend_models>
          <Function test_backend_test_connection>
          <Function test_backend_tokenizer>
          <Function test_backend_abstract_methods>
        <Module test_openai_backend.py>
          <Function test_openai_backend_create[test_key-http://test-target-test-model-request_args0-http://test-target]>
          <Function test_openai_backend_create[None-None-None-request_args1-http://localhost:8000/v1]>
          <Function test_openai_backend_models>
          <Function test_openai_backend_make_request[req0-None]>
          <Function test_openai_backend_make_request[req1-None]>
          <Function test_openai_backend_make_request[req2-request_args2]>
          <Function test_openai_backend_make_request[req3-request_args3]>
          <Function test_openai_backend_submit>
          <Function test_openai_backend_api_key>
          <Function test_openai_backend_api_key_env>
          <Function test_openai_backend_target>
          <Function test_openai_backend_target_env>
          <Function test_openai_backend_target_none_error>
      <Package cli>
        <Module test_custom_type_params.py>
          <Function test_valid_integer_input>
          <Function test_valid_dataset_input>
          <Function test_invalid_string_input>
          <Function test_invalid_float_input>
          <Function test_invalid_non_numeric_string_input>
          <Function test_invalid_mixed_string_input>
      <Package core>
        <Module test_distribution.py>
          <Function test_distribution_initialization>
          <Function test_distribution_statistics>
          <Function test_distribution_no_data>
          <Function test_distribution_add_data>
          <Function test_distribution_remove_data>
          <Function test_distribution_str>
          <Function test_distribution_repr>
          <Function test_distribution_json>
          <Function test_distribution_yaml>
        <Module test_report.py>
          <Function test_guidance_report_initialization>
          <Function test_guidance_report_initialization_with_params>
          <Function test_guidance_report_print>
          <Function test_guidance_report_json>
          <Function test_guidance_report_yaml>
          <Function test_guidance_report_save_load_file>
          <Function test_empty_guidance_report>
          <Function test_compare_guidance_reports>
          <Function test_compare_guidance_reports_inequality>
        <Module test_request.py>
          <Function test_text_generation_request_initialization>
          <Function test_text_generation_request_initialization_with_params>
          <Function test_request_json>
          <Function test_request_yaml>
        <Module test_result.py>
          <Function test_text_generation_result_initialization>
          <Function test_text_generation_result_start>
          <Function test_text_generation_result_output_token>
          <Function test_text_generation_result_end>
          <Function test_text_generation_result_improper_lifecycle>
          <Function test_text_generation_result_json>
          <Function test_text_generation_result_yaml>
          <Function test_text_generation_error_initialization>
          <Function test_text_generation_error_json>
          <Function test_text_generation_error_yaml>
          <Function test_text_generation_benchmark_initialization>
          <Function test_text_generation_benchmark_started>
          <Function test_text_generation_benchmark_expected_rate>
          <Function test_text_generation_benchmark_overloaded_rate>
          <Function test_text_generation_benchmark_completed_with_result>
          <Function test_text_generation_benchmark_completed_with_error>
          <Function test_text_generation_benchmark_iter>
          <Function test_text_generation_benchmark_json>
          <Function test_text_generation_benchmark_yaml>
          <Function test_text_generation_benchmark_report_initialization>
          <Function test_text_generation_benchmark_report_add_benchmark>
          <Function test_text_generation_benchmark_report_iter>
          <Function test_text_generation_benchmark_report_json>
          <Function test_text_generation_benchmark_report_yaml>
        <Module test_serializable.py>
          <Function test_serializable_json>
          <Function test_serializable_yaml>
          <Function test_serializable_file_json>
          <Function test_serializable_file_yaml>
          <Function test_serializable_file_without_extension>
          <Function test_serializable_file_with_directory_json>
          <Function test_serializable_file_with_directory_yaml>
          <Function test_serializable_file_infer_extension>
          <Function test_serializable_file_invalid_extension>
          <Function test_serializable_load_missing_path>
          <Function test_serializable_load_non_file_path>
      <Package executor>
        <Module test_base.py>
          <Function test_executor_result_instantiation>
          <Function test_executor_instantiation[sweep-None]>
          <Function test_executor_instantiation[synchronous-None]>
          <Function test_executor_instantiation[throughput-None]>
          <Function test_executor_instantiation[constant-10]>
          <Function test_executor_instantiation[constant-rate4]>
          <Function test_executor_instantiation[poisson-10]>
          <Function test_executor_instantiation[poisson-rate6]>
          <Function test_executor_run_sweep>
          <Function test_executor_run_non_rate_modes[synchronous]>
          <Function test_executor_run_non_rate_modes[throughput]>
          <Function test_executor_run_rate_modes[constant-10]>
          <Function test_executor_run_rate_modes[constant-rate1]>
          <Function test_executor_run_rate_modes[poisson-10]>
          <Function test_executor_run_rate_modes[poisson-rate3]>
        <Module test_profile_generator.py>
          <Function test_profile_generator_mode>
          <Function test_profile_instantiation>
          <Function test_profile_generator_instantiation[sweep-None]>
          <Function test_profile_generator_instantiation[synchronous-None]>
          <Function test_profile_generator_instantiation[throughput-None]>
          <Function test_profile_generator_instantiation[constant-10]>
          <Function test_profile_generator_instantiation[constant-rate4]>
          <Function test_profile_generator_instantiation[poisson-10]>
          <Function test_profile_generator_instantiation[poisson-rate6]>
          <Function test_profile_generator_invalid_instantiation[invalid_mode-None]>
          <Function test_profile_generator_invalid_instantiation[sweep-10]>
          <Function test_profile_generator_invalid_instantiation[sweep-rate2]>
          <Function test_profile_generator_invalid_instantiation[synchronous-10]>
          <Function test_profile_generator_invalid_instantiation[synchronous-rate4]>
          <Function test_profile_generator_invalid_instantiation[throughput-10]>
          <Function test_profile_generator_invalid_instantiation[throughput-rate6]>
          <Function test_profile_generator_invalid_instantiation[constant-None]>
          <Function test_profile_generator_invalid_instantiation[constant--1]>
          <Function test_profile_generator_invalid_instantiation[constant-0]>
          <Function test_profile_generator_invalid_instantiation[poisson-None]>
          <Function test_profile_generator_invalid_instantiation[poisson--1]>
          <Function test_profile_generator_invalid_instantiation[poisson-0]>
          <Function test_profile_generator_next_sweep>
          <Function test_profile_generator_next_synchronous>
          <Function test_profile_generator_next_throughput>
          <Function test_profile_generator_next_constant[10]>
          <Function test_profile_generator_next_constant[rate1]>
          <Function test_profile_generator_next_poisson[10]>
          <Function test_profile_generator_next_poisson[rate1]>
      <Package request>
        <Module test_base.py>
          <Function test_request_generator_sync_constructor>
          <Function test_request_generator_async_constructor>
          <Function test_request_generator_sync_iter>
          <Function test_request_generator_async_iter>
          <Function test_request_generator_iter_calls_create_item>
          <Function test_request_generator_async_iter_calls_create_item>
          <Function test_request_generator_repr>
          <Function test_request_generator_stop>
          <Function test_request_generator_with_mock_tokenizer>
          <Function test_request_generator_populate_queue>
          <Function test_request_generator_async_stop_during_population>
        <Module test_emulated.py>
          <Function test_emulated_config_construction>
          <Function test_emulated_config_create_dict>
          <Function test_emulated_config_token_range[10-2-None-None-expected_range0]>
          <Function test_emulated_config_token_range[10-2-5-15-expected_range1]>
          <Function test_emulated_config_token_range[10-None-5-15-expected_range2]>
          <Function test_emulated_config_token_range[10-2-1-None-expected_range3]>
          <Function test_emulated_config_sample_tokens[10-None-None-None-expected_range0]>
          <Function test_emulated_config_sample_tokens[10-5-None-None-expected_range1]>
          <Function test_emulated_config_sample_tokens[10-5-5-15-expected_range2]>
          <Function test_emulated_config_sample_tokens[10-None-5-15-expected_range3]>
          <Function test_emulated_config_sample_tokens[10-5-2-None-expected_range4]>
          <Function test_emulated_config_sample_tokens[10-5-None-20-expected_range5]>
          <Function test_emulated_config_create>
          <Function test_endless_data_words_construction[word1 word2  word3\nword4   word5-expected_words0-expected_indices0]>
          <Function test_endless_data_words_construction[word1  word2\n  word3   word4\n word5-expected_words1-expected_indices1]>
          <Function test_endless_data_words_create_from_basic_file>
          <Function test_endless_data_words_create_text[word1 word2 word3 word4-0-2-word1 word2]>
          <Function test_endless_data_words_create_text[word1     word2\nword3   word4-1-2-word2\nword3]>
          <Function test_endless_data_words_create_text[word1     word2\nword3   word4-1-6-word2\nword3   word4 word1     word2\nword3]>
          <Function test_emulated_request_generator_construction>
          <Function test_emulated_request_generator_create_item>
          <Function test_emulated_request_generator_sample_prompt>
          <Function test_emulated_request_generator_random_seed>
          <Function test_emulated_request_generator_lifecycle[dict-config0]>
          <Function test_emulated_request_generator_lifecycle[dict-config1]>
          <Function test_emulated_request_generator_lifecycle[dict-config2]>
          <Function test_emulated_request_generator_lifecycle[json_str-{"prompt_tokens": 10, "generated_tokens": 20}]>
          <Function test_emulated_request_generator_lifecycle[key_value_str-prompt_tokens=10, generated_tokens=20]>
          <Function test_emulated_request_generator_lifecycle[file_str-{"prompt_tokens": 10, "generated_tokens": 20}]>
          <Function test_emulated_request_generator_lifecycle[file_path-{"prompt_tokens": 10, "generated_tokens": 20}]>
        <Module test_file.py>
          <Function test_file_request_generator_constructor>
          <Function test_file_request_generator_create_item>
          <Function test_file_request_generator_file_types_lifecycle[txt-Test content 1.\nTest content 2.\nTest content 3.\n]>
          <Function test_file_request_generator_file_types_lifecycle[csv-text,label,extra\nTest content 1.,1,extra 1\nTest content 2.,2,extra 2\nTest content 3.,3,extra 3\n]>
          <Function test_file_request_generator_file_types_lifecycle[jsonl-{"text": "Test content 1."}\n{"text": "Test content 2."}\n{"text": "Test content 3."}\n]>
          <Function test_file_request_generator_file_types_lifecycle[csv-prompt,text,extra\nTest content 1., text 1, extra 1\nTest content 2., text 2, extra 2\nTest content 3., text 3, extra 3\n]>
          <Function test_file_request_generator_file_types_lifecycle[json-[{"text": "Test content 1."}, {"text": "Test content 2."}, {"text": "Test content 3."}]\n]>
          <Function test_file_request_generator_file_types_lifecycle[json-{"object_1": {"text": "Test content 1."}, "object_2": {"text": "Test content 2."}, "object_3": {"text": "Test content 3."}}\n]>
          <Function test_file_request_generator_file_types_lifecycle[yaml-items:\n   - text: Test content 1.\n   - text: Test content 2.\n   - text: Test content 3.\n]>
          <Function test_file_request_generator_file_types_lifecycle[yaml-object_1:\n  text: Test content 1.\nobject_2:\n  text: Test content 2.\nobject_3:\n  text: Test content 3.\n]>
          <Function test_file_request_generator_len[txt-Test content 1.\nTest content 2.\nTest content 3.\n]>
          <Function test_file_request_generator_len[csv-text,label,extra\nTest content 1.,1,extra 1\nTest content 2.,2,extra 2\nTest content 3.,3,extra 3\n]>
          <Function test_file_request_generator_len[jsonl-{"text": "Test content 1."}\n{"text": "Test content 2."}\n{"text": "Test content 3."}\n]>
          <Function test_file_request_generator_len[csv-prompt,text,extra\nTest content 1., text 1, extra 1\nTest content 2., text 2, extra 2\nTest content 3., text 3, extra 3\n]>
          <Function test_file_request_generator_len[json-[{"text": "Test content 1."}, {"text": "Test content 2."}, {"text": "Test content 3."}]\n]>
          <Function test_file_request_generator_len[json-{"object_1": {"text": "Test content 1."}, "object_2": {"text": "Test content 2."}, "object_3": {"text": "Test content 3."}}\n]>
          <Function test_file_request_generator_len[yaml-items:\n   - text: Test content 1.\n   - text: Test content 2.\n   - text: Test content 3.\n]>
          <Function test_file_request_generator_len[yaml-object_1:\n  text: Test content 1.\nobject_2:\n  text: Test content 2.\nobject_3:\n  text: Test content 3.\n]>
        <Module test_transformers.py>
          <Function test_transformers_dataset_request_generator_constructor>
          <Function test_transformers_dataset_request_generator_create_item>
          <Function test_transformers_dataset_request_generator_lifecycle[mock/directory/file.csv-dataset0]>
          <Function test_transformers_dataset_request_generator_lifecycle[mock/directory/file.json-dataset1]>
          <Function test_transformers_dataset_request_generator_lifecycle[mock/directory/file.py-dataset2]>
          <Function test_transformers_dataset_request_generator_lifecycle[dataset_arg3-None]>
          <Function test_transformers_dataset_request_generator_lifecycle[dataset_arg4-None]>
          <Function test_transformers_dataset_request_generator_lifecycle[dataset_arg5-None]>
          <Function test_transformers_dataset_request_generator_lifecycle[dataset_arg6-None]>
          <Function test_transformers_dataset_request_generator_len[mock/directory/file.csv-dataset0]>
          <Function test_transformers_dataset_request_generator_len[mock/directory/file.json-dataset1]>
          <Function test_transformers_dataset_request_generator_len[mock/directory/file.py-dataset2]>
          <Function test_transformers_dataset_request_generator_len[dataset_arg3-None]>
          <Function test_transformers_dataset_request_generator_len[dataset_arg4-None]>
      <Package scheduler>
        <Module test_base.py>
          <Function test_scheduler_result>
          <Function test_scheduler_instantiation[synchronous-None-10-None]>
          <Function test_scheduler_instantiation[throughput-5.0-None-60.0]>
          <Function test_scheduler_instantiation[poisson-10.0-100-None]>
          <Function test_scheduler_instantiation[constant-1.0-None-120.0]>
          <Function test_scheduler_invalid_instantiation[invalid_mode-None-10-None]>
          <Function test_scheduler_invalid_instantiation[synchronous-None-None-None]>
          <Function test_scheduler_invalid_instantiation[synchronous-None--1-10]>
          <Function test_scheduler_invalid_instantiation[synchronous-None-10--1]>
          <Function test_scheduler_invalid_instantiation[constant--1-None-10]>
          <Function test_scheduler_invalid_instantiation[constant-None-None-10]>
          <Function test_scheduler_invalid_instantiation[poisson--1-None-10]>
          <Function test_scheduler_invalid_instantiation[poisson-None-None-10]>
          <Function test_scheduler_run_number[synchronous]>
          <Function test_scheduler_run_number[throughput]>
          <Function test_scheduler_run_number[poisson]>
          <Function test_scheduler_run_number[constant]>
          <Function test_scheduler_run_duration[synchronous]>
          <Function test_scheduler_run_duration[constant]>
        <Module test_load_generator.py>
          <Function test_load_generator_mode>
          <Function test_load_generator_instantiation[constant-10]>
          <Function test_load_generator_instantiation[poisson-5]>
          <Function test_load_generator_instantiation[throughput-None]>
          <Function test_load_generator_instantiation[synchronous-None]>
          <Function test_load_generator_invalid_instantiation[invalid_mode-None-ValueError]>
          <Function test_load_generator_invalid_instantiation[constant-0-ValueError]>
          <Function test_load_generator_invalid_instantiation[poisson--1-ValueError]>
          <Function test_load_generator_times[synchronous-None]>
          <Function test_load_generator_times[throughput-None]>
          <Function test_load_generator_times[constant-1]>
          <Function test_load_generator_times[poisson-5]>
          <Function test_load_generator_invalid_times>
          <Function test_load_generator_throughput_times>
          <Function test_load_generator_constant_times[1]>
          <Function test_load_generator_constant_times[10]>
          <Function test_load_generator_constant_times[42]>
          <Function test_load_generator_poisson_times>
      <Module test_config.py>
        <Function test_default_settings>
        <Function test_settings_from_env_variables>
        <Function test_report_generation_default_source>
        <Function test_logging_settings>
        <Function test_openai_settings>
        <Function test_report_generation_settings>
      <Module test_logger.py>
        <Function test_default_logger_settings>
        <Function test_configure_logger_console_settings>
        <Function test_configure_logger_file_settings>
        <Function test_configure_logger_console_and_file>
        <Function test_environment_variable_override>
        <Function test_logging_disabled>
      <Module test_main.py>
        <Function test_generate_benchmark_report_invoke_smoke>
        <Function test_generate_benchmark_report_cli_smoke>
        <Function test_generate_benchmark_report_emulated_with_dataset_requests>
        <Function test_generate_benchmark_report_cli_emulated_with_dataset_requests>
        <Function test_generate_benchmark_report_openai_limited_by_file_dataset[txt-Test prompt 1-1-constant-1.0]>
          Mock only a few functions to get the proper report result
          from the ``Backend.make_request``.
          
          Notes:
              All the results are collected in the `benchmark.errors``,
              since the most of the responses are mocked and can't be processed.
              But the ordering of the results is still the same for both collections.
          
              ``mock_benchmark_report`` and ``mock_benchmark_report_progress``
              are used for preventing working with IO bound tasks.
        <Function test_generate_benchmark_report_openai_limited_by_file_dataset[txt-Test prompt 1-1-sweep-1.0]>
          Mock only a few functions to get the proper report result
          from the ``Backend.make_request``.
          
          Notes:
              All the results are collected in the `benchmark.errors``,
              since the most of the responses are mocked and can't be processed.
              But the ordering of the results is still the same for both collections.
          
              ``mock_benchmark_report`` and ``mock_benchmark_report_progress``
              are used for preventing working with IO bound tasks.
        <Function test_generate_benchmark_report_openai_limited_by_file_dataset[txt-Test prompt 1\nTest prompt 2\nTest prompt 3\n-3-constant-1.0]>
          Mock only a few functions to get the proper report result
          from the ``Backend.make_request``.
          
          Notes:
              All the results are collected in the `benchmark.errors``,
              since the most of the responses are mocked and can't be processed.
              But the ordering of the results is still the same for both collections.
          
              ``mock_benchmark_report`` and ``mock_benchmark_report_progress``
              are used for preventing working with IO bound tasks.
        <Function test_generate_benchmark_report_openai_limited_by_file_dataset[txt-Test prompt 1\nTest prompt 2\nTest prompt 3\n-3-sweep-1.0]>
          Mock only a few functions to get the proper report result
          from the ``Backend.make_request``.
          
          Notes:
              All the results are collected in the `benchmark.errors``,
              since the most of the responses are mocked and can't be processed.
              But the ordering of the results is still the same for both collections.
          
              ``mock_benchmark_report`` and ``mock_benchmark_report_progress``
              are used for preventing working with IO bound tasks.
      <Package utils>
        <Module test_injector.py>
          <Function test_inject_data>
          <Function test_create_report_to_file>
          <Function test_create_report_to_directory>
        <Module test_progress.py>
          <Function test_initialization>
          <Function test_start_method>
          <Function test_update_benchmark>
          <Function test_finish_method>
          <Function test_error_on_update_completed_benchmark>
          <Function test_multiple_updates>
        <Module test_text.py>
          <Function test_filter_text[hello world-hello-world-hello ]>
          <Function test_filter_text[hello world-world-None-world]>
          <Function test_filter_text[hello world-None-hello-]>
          <Function test_filter_text[hello world-None-None-hello world]>
          <Function test_clean_text[This is\ta test.\n   New line.-True-True-False-False-This is a test.\nNew line.]>
          <Function test_clean_text[This is\ta test.\n   New line.-True-True-True-False-This is a test.\nNew line.]>
          <Function test_clean_text[This is a test. New line.-True-False-False-True-This is a test.\nNew line.]>
          <Function test_split_lines_by_punctuation>
          <Function test_is_url[https://example.com-True]>
          <Function test_is_url[ftp://example.com-True]>
          <Function test_is_url[not a url-False]>
          <Function test_is_path[/repo/tests/unit/utils/test_text.py-True]>
          <Function test_is_path[/non/existent/path-False]>
          <Function test_is_path_like[/repo/tests/unit/utils/test_text.py-True-True]>
          <Function test_is_path_like[/non/existent/path-False-True]>
          <Function test_is_path_like[https://example.com-False-False]>
          <Function test_split_text>
          <Function test_parse_text_objects[text\nline 1\nline 2-csv-expected0]>
          <Function test_parse_text_objects[{"text": "line 1"}\n{"text": "line 2"}-jsonl-expected1]>
          <Function test_load_text[https://example.com-Mock content]>
          <Function test_load_text[/repo/tests/unit/utils/test_text.py-from pathlib import Path\nfrom unittest.mock import patch\n\nimport pytest\nimport requests\n\nfrom guidellm.utils.text import (\n    clean_text,\n    filter_text,\n    is_path,\n    is_path_like,\n    is_url,\n    load_text,\n    load_text_lines,\n    parse_text_objects,\n    split_lines_by_punctuation,\n    split_text,\n)\n\n\n@pytest.fixture()\ndef sample_text():\n    return "This is a sample text.\\nThis is another line!"\n\n\n@pytest.fixture()\ndef sample_dict_data():\n    return [{"text": "line 1"}, {"text": "line 2"}, {"text": "line 3"}]\n\n\n@pytest.fixture()\ndef sample_csv_data():\n    return "text\\nline 1\\nline 2\\nline 3"\n\n\n@pytest.fixture()\ndef sample_jsonl_data():\n    return '{"text": "line 1"}\\n{"text": "line 2"}\\n{"text": "line 3"}'\n\n\n@pytest.fixture()\ndef sample_yaml_data():\n    return """\n    text:\n      - line 1\n      - line 2\n      - line 3\n    """\n\n\n@pytest.fixture()\ndef mock_response():\n    response = requests.Response()\n    response.status_code = 200\n    response._content = b"Mock content"\n    return response\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    ("text", "start", "end", "expected"),\n    [\n        ("hello world", "hello", "world", "hello "),\n        ("hello world", "world", None, "world"),\n        ("hello world", None, "hello", ""),\n        ("hello world", None, None, "hello world"),\n    ],\n)\ndef test_filter_text(text, start, end, expected):\n    assert filter_text(text, start, end) == expected\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    (\n        "text",\n        "fix_encoding",\n        "clean_whitespace",\n        "remove_empty_lines",\n        "force_new_line_punctuation",\n        "expected",\n    ),\n    [\n        (\n            "This is\\ta test.\\n   New line.",\n            True,\n            True,\n            False,\n            False,\n            "This is a test.\\nNew line.",\n        ),\n        (\n            "This is\\ta test.\\n   New line.",\n            True,\n            True,\n            True,\n            False,\n            "This is a test.\\nNew line.",\n        ),\n        (\n            "This is a test. New line.",\n            True,\n            False,\n            False,\n            True,\n            "This is a test.\\nNew line.",\n        ),\n    ],\n)\ndef test_clean_text(\n    text,\n    fix_encoding,\n    clean_whitespace,\n    remove_empty_lines,\n    force_new_line_punctuation,\n    expected,\n):\n    assert (\n        clean_text(\n            text,\n            fix_encoding,\n            clean_whitespace,\n            remove_empty_lines,\n            force_new_line_punctuation,\n        )\n        == expected\n    )\n\n\n@pytest.mark.smoke()\ndef test_split_lines_by_punctuation(sample_text):\n    expected = ["This is a sample text.", "This is another line!"]\n    assert split_lines_by_punctuation(sample_text) == expected\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    ("url", "expected"),\n    [\n        ("https://example.com", True),\n        ("ftp://example.com", True),\n        ("not a url", False),\n    ],\n)\ndef test_is_url(url, expected):\n    assert is_url(url) == expected\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    ("path", "expected"),\n    [\n        (str(Path(__file__)), True),\n        ("/non/existent/path", False),\n    ],\n)\ndef test_is_path(path, expected):\n    assert is_path(path) == expected\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    ("path", "enforce_file", "expected"),\n    [\n        (str(Path(__file__)), True, True),\n        ("/non/existent/path", False, True),\n        ("https://example.com", False, False),\n    ],\n)\ndef test_is_path_like(path, enforce_file, expected):\n    assert is_path_like(path, enforce_file) == expected\n\n\n@pytest.mark.smoke()\ndef test_split_text(sample_text):\n    words, separators, new_lines = split_text(sample_text)\n    assert words == [\n        "This",\n        "is",\n        "a",\n        "sample",\n        "text.",\n        "This",\n        "is",\n        "another",\n        "line!",\n    ]\n    assert separators == [" ", " ", " ", " ", "\\n", " ", " ", " ", " "]\n    assert new_lines == [0, 5]\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    ("data", "format_", "expected"),\n    [\n        ("text\\nline 1\\nline 2", "csv", [{"text": "line 1"}, {"text": "line 2"}]),\n        (\n            '{"text": "line 1"}\\n{"text": "line 2"}',\n            "jsonl",\n            [{"text": "line 1"}, {"text": "line 2"}],\n        ),\n    ],\n)\ndef test_parse_text_objects(data, format_, expected):\n    assert parse_text_objects(data, format_) == expected\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    ("data", "expected"),\n    [\n        ("https://example.com", "Mock content"),\n        (str(Path(__file__)), Path(__file__).read_text()),\n    ],\n)\ndef test_load_text(data, expected, mock_response):\n    with patch("requests.get", return_value=mock_response):\n        assert load_text(data) == expected\n\n\n@pytest.mark.regression()\ndef test_load_text_file_not_found():\n    with pytest.raises(FileNotFoundError):\n        load_text("/non/existent/file.txt")\n\n\n@pytest.mark.smoke()\n@pytest.mark.parametrize(\n    ("data", "format_", "filters", "expected"),\n    [\n        ("text\\nline 1\\nline 2", "csv", None, ["line 1", "line 2"]),\n        ('{"text": "line 1"}\\n{"text": "line 2"}', "jsonl", None, ["line 1", "line 2"]),\n        ("text\\nline 1\\nline 2", "txt", None, ["text", "line 1", "line 2"]),\n    ],\n)\ndef test_load_text_lines(data, format_, filters, expected):\n    assert load_text_lines(data, format_=format_, filters=filters) == expected\n\n\n@pytest.mark.regression()\ndef test_load_text_lines_invalid_data():\n    with pytest.raises(ValueError):\n        load_text_lines(123)  # type: ignore\n\n\n@pytest.mark.regression()\ndef test_parse_text_objects_invalid_format():\n    with pytest.raises(ValueError):\n        parse_text_objects("text", format_="unsupported")\n\n\n@pytest.mark.regression()\ndef test_parse_text_objects_invalid_data():\n    with pytest.raises(ValueError):\n        parse_text_objects(123)  # type: ignore\n\n\n@pytest.mark.regression()\n@pytest.mark.parametrize(\n    ("data", "format_", "filters", "expected"),\n    [\n        (\n            "text\\nline 1\\nline 2\\n",\n            "csv",\n            ["text"],\n            ["line 1", "line 2"],\n        ),\n    ],\n)\ndef test_load_text_lines_with_filters(data, format_, filters, expected):\n    assert load_text_lines(data, format_=format_, filters=filters) == expected\n\n\n@pytest.mark.regression()\ndef test_is_path_with_symlink(tmp_path):\n    # Create a symlink to a temporary file\n    target_file = tmp_path / "target_file.txt"\n    target_file.write_text("Sample content")\n    symlink_path = tmp_path / "symlink"\n    symlink_path.symlink_to(target_file)\n\n    assert is_path(str(symlink_path)) is True\n\n\n@pytest.mark.regression()\ndef test_is_path_like_with_symlink(tmp_path):\n    # Create a symlink to a temporary file\n    target_file = tmp_path / "target_file.txt"\n    target_file.write_text("Sample content")\n    symlink_path = tmp_path / "symlink.file"\n    symlink_path.symlink_to(target_file)\n\n    assert is_path_like(str(symlink_path), enforce_file=True) is True\n\n\n@pytest.mark.regression()\ndef test_load_text_lines_empty():\n    # Test loading text lines from an empty string\n    assert load_text_lines("") == []\n\n\n@pytest.mark.regression()\ndef test_split_text_with_empty_string():\n    words, separators, new_lines = split_text("")\n    assert words == []\n    assert separators == []\n    assert new_lines == []\n\n\n@pytest.mark.regression()\ndef test_split_lines_by_punctuation_with_no_punctuation():\n    text = "This is a test without punctuation"\n    assert split_lines_by_punctuation(text) == [text]\n\n\n@pytest.mark.regression()\ndef test_is_path_invalid_type():\n    assert not is_path(None)\n    assert not is_path(123)\n    assert not is_path(["not", "a", "path"])\n\n\n@pytest.mark.regression()\ndef test_is_path_like_invalid_type():\n    assert not is_path_like(None, enforce_file=False)\n    assert not is_path_like(123, enforce_file=True)\n    assert not is_path_like(["not", "a", "path"], enforce_file=False)\n\n\n@pytest.mark.regression()\ndef test_load_text_invalid_url():\n    with pytest.raises(requests.ConnectionError):\n        load_text("http://invalid.url")\n\n\n@pytest.mark.regression()\ndef test_parse_text_objects_empty_csv():\n    assert parse_text_objects("text\\n", "csv") == []\n\n\n@pytest.mark.regression()\ndef test_parse_text_objects_empty_jsonl():\n    assert parse_text_objects("", "jsonl") == []\n\n\n@pytest.mark.regression()\ndef test_parse_text_objects_invalid_jsonl():\n    with pytest.raises(ValueError):\n        parse_text_objects("{invalid_json}", "jsonl")\n\n\n@pytest.mark.regression()\ndef test_parse_text_objects_empty_yaml():\n    assert parse_text_objects("", "yaml") == []\n\n\n@pytest.mark.regression()\ndef test_clean_text_with_unicode():\n    text = "This is a test with unicode: \\u2013 \\u2014"\n    cleaned_text = clean_text(text, fix_encoding=True, clean_whitespace=True)\n    assert cleaned_text == "This is a test with unicode: \u2013 \u2014"\n\n\n@pytest.mark.regression()\ndef test_split_lines_by_punctuation_with_multiple_punctuations():\n    text = "First sentence. Second sentence? Third sentence!"\n    expected = ["First sentence.", "Second sentence?", "Third sentence!"]\n    assert split_lines_by_punctuation(text) == expected\n\n\n@pytest.mark.regression()\ndef test_is_url_empty_string():\n    assert not is_url("")\n\n\n@pytest.mark.regression()\ndef test_load_text_invalid_data():\n    with pytest.raises(TypeError):\n        load_text(123)  # type: ignore\n\n\n@pytest.mark.regression()\ndef test_load_text_lines_empty_format():\n    data = "text\\nline 1\\nline 2"\n    assert load_text_lines(data, format_="") == ["text", "line 1", "line 2"]\n\n\n@pytest.mark.regression()\ndef test_split_text_with_mixed_separators():\n    text = "This\\tis a test\\nwith mixed separators."\n    words, separators, new_lines = split_text(text)\n    assert words == ["This", "is", "a", "test", "with", "mixed", "separators."]\n    assert separators == ["\\t", " ", " ", "\\n", " ", " ", " "]\n    assert new_lines == [0, 4]\n]>
          <Function test_load_text_file_not_found>
          <Function test_load_text_lines[text\nline 1\nline 2-csv-None-expected0]>
          <Function test_load_text_lines[{"text": "line 1"}\n{"text": "line 2"}-jsonl-None-expected1]>
          <Function test_load_text_lines[text\nline 1\nline 2-txt-None-expected2]>
          <Function test_load_text_lines_invalid_data>
          <Function test_parse_text_objects_invalid_format>
          <Function test_parse_text_objects_invalid_data>
          <Function test_load_text_lines_with_filters[text\nline 1\nline 2\n-csv-filters0-expected0]>
          <Function test_is_path_with_symlink>
          <Function test_is_path_like_with_symlink>
          <Function test_load_text_lines_empty>
          <Function test_split_text_with_empty_string>
          <Function test_split_lines_by_punctuation_with_no_punctuation>
          <Function test_is_path_invalid_type>
          <Function test_is_path_like_invalid_type>
          <Function test_load_text_invalid_url>
          <Function test_parse_text_objects_empty_csv>
          <Function test_parse_text_objects_empty_jsonl>
          <Function test_parse_text_objects_invalid_jsonl>
          <Function test_parse_text_objects_empty_yaml>
          <Function test_clean_text_with_unicode>
          <Function test_split_lines_by_punctuation_with_multiple_punctuations>
          <Function test_is_url_empty_string>
          <Function test_load_text_invalid_data>
          <Function test_load_text_lines_empty_format>
          <Function test_split_text_with_mixed_separators>
        <Module test_transformers.py>
          <Function test_load_transformers_dataset[mock/directory/file.csv-dataset0-train-None-Dataset]>
          <Function test_load_transformers_dataset[mock/directory/file.json-dataset1-None-preferred_splits1-Dataset]>
          <Function test_load_transformers_dataset[mock/directory/file.py-dataset2-None-None-Dataset]>
          <Function test_load_transformers_dataset[dataset_arg3-None-val-None-Dataset]>
          <Function test_load_transformers_dataset[dataset_arg4-None-None-None-Dataset]>
          <Function test_load_transformers_dataset[dataset_arg5-None-None-None-IterableDataset]>
          <Function test_load_transformers_dataset[dataset_arg6-None-validation-None-IterableDataset]>
          <Function test_resolve_transformers_dataset[mock/directory/file.csv-dataset0-train-None-Dataset]>
          <Function test_resolve_transformers_dataset[mock/directory/file.json-dataset1-None-preferred_splits1-DatasetDict]>
          <Function test_resolve_transformers_dataset[mock/directory/file.py-dataset2-None-None-DatasetDict]>
          <Function test_resolve_transformers_dataset[mock/directory/file.unk-dataset3-None-None-DatasetDict]>
          <Function test_resolve_transformers_dataset[dataset_arg4-None-val-None-DatasetDict]>
          <Function test_resolve_transformers_dataset[dataset_arg5-None-None-None-Dataset]>
          <Function test_resolve_transformers_dataset[dataset_arg6-None-None-None-IterableDatasetDict]>
          <Function test_resolve_transformers_dataset[dataset_arg7-None-validation-None-IterableDataset]>
          <Function test_resolve_transformers_dataset_invalid>
          <Function test_resolve_transformers_dataset_split[dataset0-None-None-Dataset]>
          <Function test_resolve_transformers_dataset_split[dataset1-None-None-IterableDataset]>
          <Function test_resolve_transformers_dataset_split[dataset2-validation-None-IterableDataset]>
          <Function test_resolve_transformers_dataset_split_missing>
          <Function test_resolve_transformers_dataset_column[dataset0-None-None-text]>
          <Function test_resolve_transformers_dataset_column[dataset1-text-None-text]>
          <Function test_resolve_transformers_dataset_column[dataset2-None-preferred_columns2-text]>
          <Function test_resolve_transformers_dataset_column[dataset3-None-preferred_columns3-text]>
          <Function test_resolve_transformers_dataset_column[dataset4-None-None-text]>
          <Function test_resolve_transformers_dataset_column_missing>

========================= 345 tests collected in 2.62s =========================
Container 19aee6166d22 stopped and removed
Spend totally 250.55081987380981.
