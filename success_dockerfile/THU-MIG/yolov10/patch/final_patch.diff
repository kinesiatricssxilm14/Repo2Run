diff --git a/examples/YOLOv8-OpenCV-ONNX-Python/main.py b/examples/YOLOv8-OpenCV-ONNX-Python/main.py
deleted file mode 100644
index 8d9c7a50..00000000
--- a/examples/YOLOv8-OpenCV-ONNX-Python/main.py
+++ /dev/null
@@ -1,130 +0,0 @@
-# Ultralytics YOLO ðŸš€, AGPL-3.0 license
-
-import argparse
-
-import cv2.dnn
-import numpy as np
-
-from ultralytics.utils import ASSETS, yaml_load
-from ultralytics.utils.checks import check_yaml
-
-CLASSES = yaml_load(check_yaml("coco128.yaml"))["names"]
-colors = np.random.uniform(0, 255, size=(len(CLASSES), 3))
-
-
-def draw_bounding_box(img, class_id, confidence, x, y, x_plus_w, y_plus_h):
-    """
-    Draws bounding boxes on the input image based on the provided arguments.
-
-    Args:
-        img (numpy.ndarray): The input image to draw the bounding box on.
-        class_id (int): Class ID of the detected object.
-        confidence (float): Confidence score of the detected object.
-        x (int): X-coordinate of the top-left corner of the bounding box.
-        y (int): Y-coordinate of the top-left corner of the bounding box.
-        x_plus_w (int): X-coordinate of the bottom-right corner of the bounding box.
-        y_plus_h (int): Y-coordinate of the bottom-right corner of the bounding box.
-    """
-    label = f"{CLASSES[class_id]} ({confidence:.2f})"
-    color = colors[class_id]
-    cv2.rectangle(img, (x, y), (x_plus_w, y_plus_h), color, 2)
-    cv2.putText(img, label, (x - 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
-
-
-def main(onnx_model, input_image):
-    """
-    Main function to load ONNX model, perform inference, draw bounding boxes, and display the output image.
-
-    Args:
-        onnx_model (str): Path to the ONNX model.
-        input_image (str): Path to the input image.
-
-    Returns:
-        list: List of dictionaries containing detection information such as class_id, class_name, confidence, etc.
-    """
-    # Load the ONNX model
-    model: cv2.dnn.Net = cv2.dnn.readNetFromONNX(onnx_model)
-
-    # Read the input image
-    original_image: np.ndarray = cv2.imread(input_image)
-    [height, width, _] = original_image.shape
-
-    # Prepare a square image for inference
-    length = max((height, width))
-    image = np.zeros((length, length, 3), np.uint8)
-    image[0:height, 0:width] = original_image
-
-    # Calculate scale factor
-    scale = length / 640
-
-    # Preprocess the image and prepare blob for model
-    blob = cv2.dnn.blobFromImage(image, scalefactor=1 / 255, size=(640, 640), swapRB=True)
-    model.setInput(blob)
-
-    # Perform inference
-    outputs = model.forward()
-
-    # Prepare output array
-    outputs = np.array([cv2.transpose(outputs[0])])
-    rows = outputs.shape[1]
-
-    boxes = []
-    scores = []
-    class_ids = []
-
-    # Iterate through output to collect bounding boxes, confidence scores, and class IDs
-    for i in range(rows):
-        classes_scores = outputs[0][i][4:]
-        (minScore, maxScore, minClassLoc, (x, maxClassIndex)) = cv2.minMaxLoc(classes_scores)
-        if maxScore >= 0.25:
-            box = [
-                outputs[0][i][0] - (0.5 * outputs[0][i][2]),
-                outputs[0][i][1] - (0.5 * outputs[0][i][3]),
-                outputs[0][i][2],
-                outputs[0][i][3],
-            ]
-            boxes.append(box)
-            scores.append(maxScore)
-            class_ids.append(maxClassIndex)
-
-    # Apply NMS (Non-maximum suppression)
-    result_boxes = cv2.dnn.NMSBoxes(boxes, scores, 0.25, 0.45, 0.5)
-
-    detections = []
-
-    # Iterate through NMS results to draw bounding boxes and labels
-    for i in range(len(result_boxes)):
-        index = result_boxes[i]
-        box = boxes[index]
-        detection = {
-            "class_id": class_ids[index],
-            "class_name": CLASSES[class_ids[index]],
-            "confidence": scores[index],
-            "box": box,
-            "scale": scale,
-        }
-        detections.append(detection)
-        draw_bounding_box(
-            original_image,
-            class_ids[index],
-            scores[index],
-            round(box[0] * scale),
-            round(box[1] * scale),
-            round((box[0] + box[2]) * scale),
-            round((box[1] + box[3]) * scale),
-        )
-
-    # Display the image with bounding boxes
-    cv2.imshow("image", original_image)
-    cv2.waitKey(0)
-    cv2.destroyAllWindows()
-
-    return detections
-
-
-if __name__ == "__main__":
-    parser = argparse.ArgumentParser()
-    parser.add_argument("--model", default="yolov8n.onnx", help="Input your ONNX model.")
-    parser.add_argument("--img", default=str(ASSETS / "bus.jpg"), help="Path to input image.")
-    args = parser.parse_args()
-    main(args.model, args.img)
diff --git a/examples/YOLOv8-OpenCV-int8-tflite-Python/main.py b/examples/YOLOv8-OpenCV-int8-tflite-Python/main.py
deleted file mode 100644
index 53fba1f5..00000000
--- a/examples/YOLOv8-OpenCV-int8-tflite-Python/main.py
+++ /dev/null
@@ -1,299 +0,0 @@
-# Ultralytics YOLO ðŸš€, AGPL-3.0 license
-
-import argparse
-
-import cv2
-import numpy as np
-from tflite_runtime import interpreter as tflite
-
-from ultralytics.utils import ASSETS, yaml_load
-from ultralytics.utils.checks import check_yaml
-
-# Declare as global variables, can be updated based trained model image size
-img_width = 640
-img_height = 640
-
-
-class LetterBox:
-    def __init__(
-        self, new_shape=(img_width, img_height), auto=False, scaleFill=False, scaleup=True, center=True, stride=32
-    ):
-        self.new_shape = new_shape
-        self.auto = auto
-        self.scaleFill = scaleFill
-        self.scaleup = scaleup
-        self.stride = stride
-        self.center = center  # Put the image in the middle or top-left
-
-    def __call__(self, labels=None, image=None):
-        """Return updated labels and image with added border."""
-
-        if labels is None:
-            labels = {}
-        img = labels.get("img") if image is None else image
-        shape = img.shape[:2]  # current shape [height, width]
-        new_shape = labels.pop("rect_shape", self.new_shape)
-        if isinstance(new_shape, int):
-            new_shape = (new_shape, new_shape)
-
-        # Scale ratio (new / old)
-        r = min(new_shape[0] / shape[0], new_shape[1] / shape[1])
-        if not self.scaleup:  # only scale down, do not scale up (for better val mAP)
-            r = min(r, 1.0)
-
-        # Compute padding
-        ratio = r, r  # width, height ratios
-        new_unpad = int(round(shape[1] * r)), int(round(shape[0] * r))
-        dw, dh = new_shape[1] - new_unpad[0], new_shape[0] - new_unpad[1]  # wh padding
-        if self.auto:  # minimum rectangle
-            dw, dh = np.mod(dw, self.stride), np.mod(dh, self.stride)  # wh padding
-        elif self.scaleFill:  # stretch
-            dw, dh = 0.0, 0.0
-            new_unpad = (new_shape[1], new_shape[0])
-            ratio = new_shape[1] / shape[1], new_shape[0] / shape[0]  # width, height ratios
-
-        if self.center:
-            dw /= 2  # divide padding into 2 sides
-            dh /= 2
-
-        if shape[::-1] != new_unpad:  # resize
-            img = cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)
-        top, bottom = int(round(dh - 0.1)) if self.center else 0, int(round(dh + 0.1))
-        left, right = int(round(dw - 0.1)) if self.center else 0, int(round(dw + 0.1))
-        img = cv2.copyMakeBorder(
-            img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=(114, 114, 114)
-        )  # add border
-        if labels.get("ratio_pad"):
-            labels["ratio_pad"] = (labels["ratio_pad"], (left, top))  # for evaluation
-
-        if len(labels):
-            labels = self._update_labels(labels, ratio, dw, dh)
-            labels["img"] = img
-            labels["resized_shape"] = new_shape
-            return labels
-        else:
-            return img
-
-    def _update_labels(self, labels, ratio, padw, padh):
-        """Update labels."""
-
-        labels["instances"].convert_bbox(format="xyxy")
-        labels["instances"].denormalize(*labels["img"].shape[:2][::-1])
-        labels["instances"].scale(*ratio)
-        labels["instances"].add_padding(padw, padh)
-        return labels
-
-
-class Yolov8TFLite:
-    def __init__(self, tflite_model, input_image, confidence_thres, iou_thres):
-        """
-        Initializes an instance of the Yolov8TFLite class.
-
-        Args:
-            tflite_model: Path to the TFLite model.
-            input_image: Path to the input image.
-            confidence_thres: Confidence threshold for filtering detections.
-            iou_thres: IoU (Intersection over Union) threshold for non-maximum suppression.
-        """
-
-        self.tflite_model = tflite_model
-        self.input_image = input_image
-        self.confidence_thres = confidence_thres
-        self.iou_thres = iou_thres
-
-        # Load the class names from the COCO dataset
-        self.classes = yaml_load(check_yaml("coco128.yaml"))["names"]
-
-        # Generate a color palette for the classes
-        self.color_palette = np.random.uniform(0, 255, size=(len(self.classes), 3))
-
-    def draw_detections(self, img, box, score, class_id):
-        """
-        Draws bounding boxes and labels on the input image based on the detected objects.
-
-        Args:
-            img: The input image to draw detections on.
-            box: Detected bounding box.
-            score: Corresponding detection score.
-            class_id: Class ID for the detected object.
-
-        Returns:
-            None
-        """
-
-        # Extract the coordinates of the bounding box
-        x1, y1, w, h = box
-
-        # Retrieve the color for the class ID
-        color = self.color_palette[class_id]
-
-        # Draw the bounding box on the image
-        cv2.rectangle(img, (int(x1), int(y1)), (int(x1 + w), int(y1 + h)), color, 2)
-
-        # Create the label text with class name and score
-        label = f"{self.classes[class_id]}: {score:.2f}"
-
-        # Calculate the dimensions of the label text
-        (label_width, label_height), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 1)
-
-        # Calculate the position of the label text
-        label_x = x1
-        label_y = y1 - 10 if y1 - 10 > label_height else y1 + 10
-
-        # Draw a filled rectangle as the background for the label text
-        cv2.rectangle(
-            img,
-            (int(label_x), int(label_y - label_height)),
-            (int(label_x + label_width), int(label_y + label_height)),
-            color,
-            cv2.FILLED,
-        )
-
-        # Draw the label text on the image
-        cv2.putText(img, label, (int(label_x), int(label_y)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
-
-    def preprocess(self):
-        """
-        Preprocesses the input image before performing inference.
-
-        Returns:
-            image_data: Preprocessed image data ready for inference.
-        """
-
-        # Read the input image using OpenCV
-        self.img = cv2.imread(self.input_image)
-
-        print("image before", self.img)
-        # Get the height and width of the input image
-        self.img_height, self.img_width = self.img.shape[:2]
-
-        letterbox = LetterBox(new_shape=[img_width, img_height], auto=False, stride=32)
-        image = letterbox(image=self.img)
-        image = [image]
-        image = np.stack(image)
-        image = image[..., ::-1].transpose((0, 3, 1, 2))
-        img = np.ascontiguousarray(image)
-        # n, h, w, c
-        image = img.astype(np.float32)
-        return image / 255
-
-    def postprocess(self, input_image, output):
-        """
-        Performs post-processing on the model's output to extract bounding boxes, scores, and class IDs.
-
-        Args:
-            input_image (numpy.ndarray): The input image.
-            output (numpy.ndarray): The output of the model.
-
-        Returns:
-            numpy.ndarray: The input image with detections drawn on it.
-        """
-
-        boxes = []
-        scores = []
-        class_ids = []
-        for pred in output:
-            pred = np.transpose(pred)
-            for box in pred:
-                x, y, w, h = box[:4]
-                x1 = x - w / 2
-                y1 = y - h / 2
-                boxes.append([x1, y1, w, h])
-                idx = np.argmax(box[4:])
-                scores.append(box[idx + 4])
-                class_ids.append(idx)
-
-        indices = cv2.dnn.NMSBoxes(boxes, scores, self.confidence_thres, self.iou_thres)
-
-        for i in indices:
-            # Get the box, score, and class ID corresponding to the index
-            box = boxes[i]
-            gain = min(img_width / self.img_width, img_height / self.img_height)
-            pad = (
-                round((img_width - self.img_width * gain) / 2 - 0.1),
-                round((img_height - self.img_height * gain) / 2 - 0.1),
-            )
-            box[0] = (box[0] - pad[0]) / gain
-            box[1] = (box[1] - pad[1]) / gain
-            box[2] = box[2] / gain
-            box[3] = box[3] / gain
-            score = scores[i]
-            class_id = class_ids[i]
-            if score > 0.25:
-                print(box, score, class_id)
-                # Draw the detection on the input image
-                self.draw_detections(input_image, box, score, class_id)
-
-        return input_image
-
-    def main(self):
-        """
-        Performs inference using a TFLite model and returns the output image with drawn detections.
-
-        Returns:
-            output_img: The output image with drawn detections.
-        """
-
-        # Create an interpreter for the TFLite model
-        interpreter = tflite.Interpreter(model_path=self.tflite_model)
-        self.model = interpreter
-        interpreter.allocate_tensors()
-
-        # Get the model inputs
-        input_details = interpreter.get_input_details()
-        output_details = interpreter.get_output_details()
-
-        # Store the shape of the input for later use
-        input_shape = input_details[0]["shape"]
-        self.input_width = input_shape[1]
-        self.input_height = input_shape[2]
-
-        # Preprocess the image data
-        img_data = self.preprocess()
-        img_data = img_data
-        # img_data = img_data.cpu().numpy()
-        # Set the input tensor to the interpreter
-        print(input_details[0]["index"])
-        print(img_data.shape)
-        img_data = img_data.transpose((0, 2, 3, 1))
-
-        scale, zero_point = input_details[0]["quantization"]
-        interpreter.set_tensor(input_details[0]["index"], img_data)
-
-        # Run inference
-        interpreter.invoke()
-
-        # Get the output tensor from the interpreter
-        output = interpreter.get_tensor(output_details[0]["index"])
-        scale, zero_point = output_details[0]["quantization"]
-        output = (output.astype(np.float32) - zero_point) * scale
-
-        output[:, [0, 2]] *= img_width
-        output[:, [1, 3]] *= img_height
-        print(output)
-        # Perform post-processing on the outputs to obtain output image.
-        return self.postprocess(self.img, output)
-
-
-if __name__ == "__main__":
-    # Create an argument parser to handle command-line arguments
-    parser = argparse.ArgumentParser()
-    parser.add_argument(
-        "--model", type=str, default="yolov8n_full_integer_quant.tflite", help="Input your TFLite model."
-    )
-    parser.add_argument("--img", type=str, default=str(ASSETS / "bus.jpg"), help="Path to input image.")
-    parser.add_argument("--conf-thres", type=float, default=0.5, help="Confidence threshold")
-    parser.add_argument("--iou-thres", type=float, default=0.5, help="NMS IoU threshold")
-    args = parser.parse_args()
-
-    # Create an instance of the Yolov8TFLite class with the specified arguments
-    detection = Yolov8TFLite(args.model, args.img, args.conf_thres, args.iou_thres)
-
-    # Perform object detection and obtain the output image
-    output_image = detection.main()
-
-    # Display the output image in a window
-    cv2.imshow("Output", output_image)
-
-    # Wait for a key press to exit
-    cv2.waitKey(0)
diff --git a/examples/YOLOv8-SAHI-Inference-Video/yolov8_sahi.py b/examples/YOLOv8-SAHI-Inference-Video/yolov8_sahi.py
deleted file mode 100644
index f2b8274c..00000000
--- a/examples/YOLOv8-SAHI-Inference-Video/yolov8_sahi.py
+++ /dev/null
@@ -1,111 +0,0 @@
-# Ultralytics YOLO ðŸš€, AGPL-3.0 license
-
-import argparse
-from pathlib import Path
-
-import cv2
-from sahi import AutoDetectionModel
-from sahi.predict import get_sliced_prediction
-from sahi.utils.yolov8 import download_yolov8s_model
-
-from ultralytics.utils.files import increment_path
-
-
-def run(weights="yolov8n.pt", source="test.mp4", view_img=False, save_img=False, exist_ok=False):
-    """
-    Run object detection on a video using YOLOv8 and SAHI.
-
-    Args:
-        weights (str): Model weights path.
-        source (str): Video file path.
-        view_img (bool): Show results.
-        save_img (bool): Save results.
-        exist_ok (bool): Overwrite existing files.
-    """
-
-    # Check source path
-    if not Path(source).exists():
-        raise FileNotFoundError(f"Source path '{source}' does not exist.")
-
-    yolov8_model_path = f"models/{weights}"
-    download_yolov8s_model(yolov8_model_path)
-    detection_model = AutoDetectionModel.from_pretrained(
-        model_type="yolov8", model_path=yolov8_model_path, confidence_threshold=0.3, device="cpu"
-    )
-
-    # Video setup
-    videocapture = cv2.VideoCapture(source)
-    frame_width, frame_height = int(videocapture.get(3)), int(videocapture.get(4))
-    fps, fourcc = int(videocapture.get(5)), cv2.VideoWriter_fourcc(*"mp4v")
-
-    # Output setup
-    save_dir = increment_path(Path("ultralytics_results_with_sahi") / "exp", exist_ok)
-    save_dir.mkdir(parents=True, exist_ok=True)
-    video_writer = cv2.VideoWriter(str(save_dir / f"{Path(source).stem}.mp4"), fourcc, fps, (frame_width, frame_height))
-
-    while videocapture.isOpened():
-        success, frame = videocapture.read()
-        if not success:
-            break
-
-        results = get_sliced_prediction(
-            frame, detection_model, slice_height=512, slice_width=512, overlap_height_ratio=0.2, overlap_width_ratio=0.2
-        )
-        object_prediction_list = results.object_prediction_list
-
-        boxes_list = []
-        clss_list = []
-        for ind, _ in enumerate(object_prediction_list):
-            boxes = (
-                object_prediction_list[ind].bbox.minx,
-                object_prediction_list[ind].bbox.miny,
-                object_prediction_list[ind].bbox.maxx,
-                object_prediction_list[ind].bbox.maxy,
-            )
-            clss = object_prediction_list[ind].category.name
-            boxes_list.append(boxes)
-            clss_list.append(clss)
-
-        for box, cls in zip(boxes_list, clss_list):
-            x1, y1, x2, y2 = box
-            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (56, 56, 255), 2)
-            label = str(cls)
-            t_size = cv2.getTextSize(label, 0, fontScale=0.6, thickness=1)[0]
-            cv2.rectangle(
-                frame, (int(x1), int(y1) - t_size[1] - 3), (int(x1) + t_size[0], int(y1) + 3), (56, 56, 255), -1
-            )
-            cv2.putText(
-                frame, label, (int(x1), int(y1) - 2), 0, 0.6, [255, 255, 255], thickness=1, lineType=cv2.LINE_AA
-            )
-
-        if view_img:
-            cv2.imshow(Path(source).stem, frame)
-        if save_img:
-            video_writer.write(frame)
-
-        if cv2.waitKey(1) & 0xFF == ord("q"):
-            break
-    video_writer.release()
-    videocapture.release()
-    cv2.destroyAllWindows()
-
-
-def parse_opt():
-    """Parse command line arguments."""
-    parser = argparse.ArgumentParser()
-    parser.add_argument("--weights", type=str, default="yolov8n.pt", help="initial weights path")
-    parser.add_argument("--source", type=str, required=True, help="video file path")
-    parser.add_argument("--view-img", action="store_true", help="show results")
-    parser.add_argument("--save-img", action="store_true", help="save results")
-    parser.add_argument("--exist-ok", action="store_true", help="existing project/name ok, do not increment")
-    return parser.parse_args()
-
-
-def main(opt):
-    """Main function."""
-    run(**vars(opt))
-
-
-if __name__ == "__main__":
-    opt = parse_opt()
-    main(opt)
diff --git a/examples/YOLOv8-Segmentation-ONNXRuntime-Python/main.py b/examples/YOLOv8-Segmentation-ONNXRuntime-Python/main.py
deleted file mode 100644
index 141d21b9..00000000
--- a/examples/YOLOv8-Segmentation-ONNXRuntime-Python/main.py
+++ /dev/null
@@ -1,342 +0,0 @@
-# Ultralytics YOLO ðŸš€, AGPL-3.0 license
-
-import argparse
-
-import cv2
-import numpy as np
-import onnxruntime as ort
-
-from ultralytics.utils import ASSETS, yaml_load
-from ultralytics.utils.checks import check_yaml
-from ultralytics.utils.plotting import Colors
-
-
-class YOLOv8Seg:
-    """YOLOv8 segmentation model."""
-
-    def __init__(self, onnx_model):
-        """
-        Initialization.
-
-        Args:
-            onnx_model (str): Path to the ONNX model.
-        """
-
-        # Build Ort session
-        self.session = ort.InferenceSession(
-            onnx_model,
-            providers=["CUDAExecutionProvider", "CPUExecutionProvider"]
-            if ort.get_device() == "GPU"
-            else ["CPUExecutionProvider"],
-        )
-
-        # Numpy dtype: support both FP32 and FP16 onnx model
-        self.ndtype = np.half if self.session.get_inputs()[0].type == "tensor(float16)" else np.single
-
-        # Get model width and height(YOLOv8-seg only has one input)
-        self.model_height, self.model_width = [x.shape for x in self.session.get_inputs()][0][-2:]
-
-        # Load COCO class names
-        self.classes = yaml_load(check_yaml("coco128.yaml"))["names"]
-
-        # Create color palette
-        self.color_palette = Colors()
-
-    def __call__(self, im0, conf_threshold=0.4, iou_threshold=0.45, nm=32):
-        """
-        The whole pipeline: pre-process -> inference -> post-process.
-
-        Args:
-            im0 (Numpy.ndarray): original input image.
-            conf_threshold (float): confidence threshold for filtering predictions.
-            iou_threshold (float): iou threshold for NMS.
-            nm (int): the number of masks.
-
-        Returns:
-            boxes (List): list of bounding boxes.
-            segments (List): list of segments.
-            masks (np.ndarray): [N, H, W], output masks.
-        """
-
-        # Pre-process
-        im, ratio, (pad_w, pad_h) = self.preprocess(im0)
-
-        # Ort inference
-        preds = self.session.run(None, {self.session.get_inputs()[0].name: im})
-
-        # Post-process
-        boxes, segments, masks = self.postprocess(
-            preds,
-            im0=im0,
-            ratio=ratio,
-            pad_w=pad_w,
-            pad_h=pad_h,
-            conf_threshold=conf_threshold,
-            iou_threshold=iou_threshold,
-            nm=nm,
-        )
-        return boxes, segments, masks
-
-    def preprocess(self, img):
-        """
-        Pre-processes the input image.
-
-        Args:
-            img (Numpy.ndarray): image about to be processed.
-
-        Returns:
-            img_process (Numpy.ndarray): image preprocessed for inference.
-            ratio (tuple): width, height ratios in letterbox.
-            pad_w (float): width padding in letterbox.
-            pad_h (float): height padding in letterbox.
-        """
-
-        # Resize and pad input image using letterbox() (Borrowed from Ultralytics)
-        shape = img.shape[:2]  # original image shape
-        new_shape = (self.model_height, self.model_width)
-        r = min(new_shape[0] / shape[0], new_shape[1] / shape[1])
-        ratio = r, r
-        new_unpad = int(round(shape[1] * r)), int(round(shape[0] * r))
-        pad_w, pad_h = (new_shape[1] - new_unpad[0]) / 2, (new_shape[0] - new_unpad[1]) / 2  # wh padding
-        if shape[::-1] != new_unpad:  # resize
-            img = cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)
-        top, bottom = int(round(pad_h - 0.1)), int(round(pad_h + 0.1))
-        left, right = int(round(pad_w - 0.1)), int(round(pad_w + 0.1))
-        img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=(114, 114, 114))
-
-        # Transforms: HWC to CHW -> BGR to RGB -> div(255) -> contiguous -> add axis(optional)
-        img = np.ascontiguousarray(np.einsum("HWC->CHW", img)[::-1], dtype=self.ndtype) / 255.0
-        img_process = img[None] if len(img.shape) == 3 else img
-        return img_process, ratio, (pad_w, pad_h)
-
-    def postprocess(self, preds, im0, ratio, pad_w, pad_h, conf_threshold, iou_threshold, nm=32):
-        """
-        Post-process the prediction.
-
-        Args:
-            preds (Numpy.ndarray): predictions come from ort.session.run().
-            im0 (Numpy.ndarray): [h, w, c] original input image.
-            ratio (tuple): width, height ratios in letterbox.
-            pad_w (float): width padding in letterbox.
-            pad_h (float): height padding in letterbox.
-            conf_threshold (float): conf threshold.
-            iou_threshold (float): iou threshold.
-            nm (int): the number of masks.
-
-        Returns:
-            boxes (List): list of bounding boxes.
-            segments (List): list of segments.
-            masks (np.ndarray): [N, H, W], output masks.
-        """
-        x, protos = preds[0], preds[1]  # Two outputs: predictions and protos
-
-        # Transpose the first output: (Batch_size, xywh_conf_cls_nm, Num_anchors) -> (Batch_size, Num_anchors, xywh_conf_cls_nm)
-        x = np.einsum("bcn->bnc", x)
-
-        # Predictions filtering by conf-threshold
-        x = x[np.amax(x[..., 4:-nm], axis=-1) > conf_threshold]
-
-        # Create a new matrix which merge these(box, score, cls, nm) into one
-        # For more details about `numpy.c_()`: https://numpy.org/doc/1.26/reference/generated/numpy.c_.html
-        x = np.c_[x[..., :4], np.amax(x[..., 4:-nm], axis=-1), np.argmax(x[..., 4:-nm], axis=-1), x[..., -nm:]]
-
-        # NMS filtering
-        x = x[cv2.dnn.NMSBoxes(x[:, :4], x[:, 4], conf_threshold, iou_threshold)]
-
-        # Decode and return
-        if len(x) > 0:
-            # Bounding boxes format change: cxcywh -> xyxy
-            x[..., [0, 1]] -= x[..., [2, 3]] / 2
-            x[..., [2, 3]] += x[..., [0, 1]]
-
-            # Rescales bounding boxes from model shape(model_height, model_width) to the shape of original image
-            x[..., :4] -= [pad_w, pad_h, pad_w, pad_h]
-            x[..., :4] /= min(ratio)
-
-            # Bounding boxes boundary clamp
-            x[..., [0, 2]] = x[:, [0, 2]].clip(0, im0.shape[1])
-            x[..., [1, 3]] = x[:, [1, 3]].clip(0, im0.shape[0])
-
-            # Process masks
-            masks = self.process_mask(protos[0], x[:, 6:], x[:, :4], im0.shape)
-
-            # Masks -> Segments(contours)
-            segments = self.masks2segments(masks)
-            return x[..., :6], segments, masks  # boxes, segments, masks
-        else:
-            return [], [], []
-
-    @staticmethod
-    def masks2segments(masks):
-        """
-        It takes a list of masks(n,h,w) and returns a list of segments(n,xy) (Borrowed from
-        https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L750)
-
-        Args:
-            masks (numpy.ndarray): the output of the model, which is a tensor of shape (batch_size, 160, 160).
-
-        Returns:
-            segments (List): list of segment masks.
-        """
-        segments = []
-        for x in masks.astype("uint8"):
-            c = cv2.findContours(x, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)[0]  # CHAIN_APPROX_SIMPLE
-            if c:
-                c = np.array(c[np.array([len(x) for x in c]).argmax()]).reshape(-1, 2)
-            else:
-                c = np.zeros((0, 2))  # no segments found
-            segments.append(c.astype("float32"))
-        return segments
-
-    @staticmethod
-    def crop_mask(masks, boxes):
-        """
-        It takes a mask and a bounding box, and returns a mask that is cropped to the bounding box. (Borrowed from
-        https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L599)
-
-        Args:
-            masks (Numpy.ndarray): [n, h, w] tensor of masks.
-            boxes (Numpy.ndarray): [n, 4] tensor of bbox coordinates in relative point form.
-
-        Returns:
-            (Numpy.ndarray): The masks are being cropped to the bounding box.
-        """
-        n, h, w = masks.shape
-        x1, y1, x2, y2 = np.split(boxes[:, :, None], 4, 1)
-        r = np.arange(w, dtype=x1.dtype)[None, None, :]
-        c = np.arange(h, dtype=x1.dtype)[None, :, None]
-        return masks * ((r >= x1) * (r < x2) * (c >= y1) * (c < y2))
-
-    def process_mask(self, protos, masks_in, bboxes, im0_shape):
-        """
-        Takes the output of the mask head, and applies the mask to the bounding boxes. This produces masks of higher quality
-        but is slower. (Borrowed from https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L618)
-
-        Args:
-            protos (numpy.ndarray): [mask_dim, mask_h, mask_w].
-            masks_in (numpy.ndarray): [n, mask_dim], n is number of masks after nms.
-            bboxes (numpy.ndarray): bboxes re-scaled to original image shape.
-            im0_shape (tuple): the size of the input image (h,w,c).
-
-        Returns:
-            (numpy.ndarray): The upsampled masks.
-        """
-        c, mh, mw = protos.shape
-        masks = np.matmul(masks_in, protos.reshape((c, -1))).reshape((-1, mh, mw)).transpose(1, 2, 0)  # HWN
-        masks = np.ascontiguousarray(masks)
-        masks = self.scale_mask(masks, im0_shape)  # re-scale mask from P3 shape to original input image shape
-        masks = np.einsum("HWN -> NHW", masks)  # HWN -> NHW
-        masks = self.crop_mask(masks, bboxes)
-        return np.greater(masks, 0.5)
-
-    @staticmethod
-    def scale_mask(masks, im0_shape, ratio_pad=None):
-        """
-        Takes a mask, and resizes it to the original image size. (Borrowed from
-        https://github.com/ultralytics/ultralytics/blob/465df3024f44fa97d4fad9986530d5a13cdabdca/ultralytics/utils/ops.py#L305)
-
-        Args:
-            masks (np.ndarray): resized and padded masks/images, [h, w, num]/[h, w, 3].
-            im0_shape (tuple): the original image shape.
-            ratio_pad (tuple): the ratio of the padding to the original image.
-
-        Returns:
-            masks (np.ndarray): The masks that are being returned.
-        """
-        im1_shape = masks.shape[:2]
-        if ratio_pad is None:  # calculate from im0_shape
-            gain = min(im1_shape[0] / im0_shape[0], im1_shape[1] / im0_shape[1])  # gain  = old / new
-            pad = (im1_shape[1] - im0_shape[1] * gain) / 2, (im1_shape[0] - im0_shape[0] * gain) / 2  # wh padding
-        else:
-            pad = ratio_pad[1]
-
-        # Calculate tlbr of mask
-        top, left = int(round(pad[1] - 0.1)), int(round(pad[0] - 0.1))  # y, x
-        bottom, right = int(round(im1_shape[0] - pad[1] + 0.1)), int(round(im1_shape[1] - pad[0] + 0.1))
-        if len(masks.shape) < 2:
-            raise ValueError(f'"len of masks shape" should be 2 or 3, but got {len(masks.shape)}')
-        masks = masks[top:bottom, left:right]
-        masks = cv2.resize(
-            masks, (im0_shape[1], im0_shape[0]), interpolation=cv2.INTER_LINEAR
-        )  # INTER_CUBIC would be better
-        if len(masks.shape) == 2:
-            masks = masks[:, :, None]
-        return masks
-
-    def draw_and_visualize(self, im, bboxes, segments, vis=False, save=True):
-        """
-        Draw and visualize results.
-
-        Args:
-            im (np.ndarray): original image, shape [h, w, c].
-            bboxes (numpy.ndarray): [n, 4], n is number of bboxes.
-            segments (List): list of segment masks.
-            vis (bool): imshow using OpenCV.
-            save (bool): save image annotated.
-
-        Returns:
-            None
-        """
-
-        # Draw rectangles and polygons
-        im_canvas = im.copy()
-        for (*box, conf, cls_), segment in zip(bboxes, segments):
-            # draw contour and fill mask
-            cv2.polylines(im, np.int32([segment]), True, (255, 255, 255), 2)  # white borderline
-            cv2.fillPoly(im_canvas, np.int32([segment]), self.color_palette(int(cls_), bgr=True))
-
-            # draw bbox rectangle
-            cv2.rectangle(
-                im,
-                (int(box[0]), int(box[1])),
-                (int(box[2]), int(box[3])),
-                self.color_palette(int(cls_), bgr=True),
-                1,
-                cv2.LINE_AA,
-            )
-            cv2.putText(
-                im,
-                f"{self.classes[cls_]}: {conf:.3f}",
-                (int(box[0]), int(box[1] - 9)),
-                cv2.FONT_HERSHEY_SIMPLEX,
-                0.7,
-                self.color_palette(int(cls_), bgr=True),
-                2,
-                cv2.LINE_AA,
-            )
-
-        # Mix image
-        im = cv2.addWeighted(im_canvas, 0.3, im, 0.7, 0)
-
-        # Show image
-        if vis:
-            cv2.imshow("demo", im)
-            cv2.waitKey(0)
-            cv2.destroyAllWindows()
-
-        # Save image
-        if save:
-            cv2.imwrite("demo.jpg", im)
-
-
-if __name__ == "__main__":
-    # Create an argument parser to handle command-line arguments
-    parser = argparse.ArgumentParser()
-    parser.add_argument("--model", type=str, required=True, help="Path to ONNX model")
-    parser.add_argument("--source", type=str, default=str(ASSETS / "bus.jpg"), help="Path to input image")
-    parser.add_argument("--conf", type=float, default=0.25, help="Confidence threshold")
-    parser.add_argument("--iou", type=float, default=0.45, help="NMS IoU threshold")
-    args = parser.parse_args()
-
-    # Build model
-    model = YOLOv8Seg(args.model)
-
-    # Read image by OpenCV
-    img = cv2.imread(args.source)
-
-    # Inference
-    boxes, segments, _ = model(img, conf_threshold=args.conf, iou_threshold=args.iou)
-
-    # Draw bboxes and polygons
-    if len(boxes) > 0:
-        model.draw_and_visualize(img, boxes, segments, vis=False, save=True)