microsoft/graphrag
Container sad_matsumoto d06d75ef163c started with image build_env_python:3.10
************** configuration **************
You are an expert skilled in environment configuration. You can refer to various files and structures in the repository such as `requirements.txt`, `setup.py`, etc., and use dependency prediction tools like pipreqs to install and download the corresponding third-party libraries in a given Docker image. This ensures that the repository can be successfully configured and able to correctly execute the specified tests.
* Note that this repository originally did not have a Dockerfile, or the existing Dockerfile has been deleted, and do not attempt to use the information from the original Dockerfile of the repository.*

* We have already configured poetry, pipdeptree, and pytest for you; no additional configuration is needed. However, you cannot directly invoke pytest; you need to run tests using `runtest` or `poetryruntest`.

WORK PROCESS:
0. **Read README**: First, read the README file. If the README file mentions a way to configure the environment, give priority to using the methods described in the README. Note that our goal here is to run the code, not to use the tool, so our standard is to be able to run the tests. If you think the README clearly specifies a method for configuring the environment for running tests, you can skip the subsequent steps and follow its instructions to configure the environment. Then use `runtest` or `poetryruntest` to check if the configuration is correct.
1. **Read Directory Structure**: Check the folder structure in the root directory, focusing on the configuration files related to setting up the environment.
2. **Determine Python Version Or Other Base Image**: Decide if you need to switch the Python version or the base image in the Docker container. The current version is python:3.10. If you want to switch the Python version, please run the `change_python_version python_version` command, where python_version is the Python version number (for example, `change_python_version 3.9`), and you do not need to add quotation marks. If you need to change the base image, use the `change_base_image base_image_name:tag` command (for example, `change_base_image pytorch/pytorch:1.10.0-cuda11.1-cudnn8-runtime`). If you do not need to make any changes, please ignore this step. You can also run these commands at any point later during the environment configuration to switch the Python version or the base image.
    *Note*: If you use `change_base_image` and no tag is provided, it defaults to "latest".
    *Note*: Please prioritize ease of environment configuration. If an official ready-to-use base image is available, you can use it directly. However, be aware that doing so may discard all previous configurations.
    *Note*: Avoid using images that do not directly support Python, such as Ubuntu or Node, because the environments we need to configure are primarily based on the Python language.
3. **Check the configuration files in the root directory**: Read configuration files related to setting up the environment, such as: Information in the `.github` folder, `setup.py`, `setup.cfg`, `Pipfile` and `Pipfile.lock`, `environment.yml`, `poetry.lock` and `pyproject.toml`, etc.
3.5 **Try testing (optional)**: Using `runtest` command to check if it is possible to pass the tests directly without any additional configuration.
4. **Review Additional Files**: Consider other potential files and structures for environment configuration.
5. **Automatically install according to the installation script**: Based on the observed structure in the root directory, determine the necessary installation commands:
    a. Poetry Detected: If a poetry.lock file is present in the root directory, Install Poetry using the relevant method for your system. Execute the command `poetry install` to install the dependencies specified in the lock file.
    b. Setup.py Detected: If a setup.py file exists in the root directory, run the command `pip install -e .` to install the package in editable mode along with its dependencies.
    c. Other Descriptor Files: For other specific files that indicate dependency management, assess and determine the appropriate method to install the required dependencies.
    *Note*: We only consider automatically installation script in the repository. Do not consider `requirements.txt` directly in this step!
6. **Collecting Third-Party Library Download List**: In this step, you need to locate all files in the root directory that list dependencies line by line, such as `requirements.txt`, `requirements_dev.txt`, etc. Use a command like `queue_file /repo/requirements.txt` to submit them to the download list. I will handle the unified downloading later.
    If you have determined the path to the requirements file, please enter `waitinglist addfile` followed by the path to the requirements file. For example, `waitinglist addfile /repo/requirements.txt`.
    *Note*: The files you collect must follow the standard requirements.txt format. Do not collect files in any other formats. For instance, if you are unsure about the format of `/repo/requirements_test.txt`, you can use the command `cat /repo/requirements_test.txt` to read the file contents and ensure the file fully meets the requirements before submitting it. If no such dependency-listing files are found, you may skip this step.
    *Note*: In a standard requirements.txt file, each valid entry on a line consists of package_name followed by version_constraints (if there are no version_constraints, the latest version is implied). For example: "numpy==2.1", "numpy>2.0,<3.0", "numpy" (implies the latest version).
    *Note*: We will not collect items that are improperly formatted.
7. **Using pipreqs to Obtain Additional Lists**: In this step, you should use `runpipreqs` to analyze the third-party libraries that need to be installed based on the findings of the previous step. Simply use the command `get pipreqs`, and it will generate a `requirements_pipreqs.txt` file in the project root directory (/repo) and show you the warnings and errors.
    *Note*: If you have already collected some requirements.txt files in Step 5, you do not need to execute `runpipreqs` in this step. Avoid collecting too many dependencies repeatedly. You can directly execute `download` after handling conflicts and formatting errors. If errors occur in subsequent tests, you can then run `runpipreqs`.
8. **Handling pipreqs Warnings**: For warnings that appear in pipreqs, such as not being able to find a module on PyPI, it may be due to a discrepancy between the download name and the import name of a third-party library. For example, `import cv2` requires downloading not `cv2` but `opencv-python`. For each warning, you need to address the discrepancy by ensuring the correct package names are used for the downloads.
    You should review "pipreqs_output.txt" (used to store output during the pipreqs dependency generation process) and "requirements_pipreqs.txt" (the final generated dependency results) to check for any inconsistencies. Use ```diff and ``` to make adjustments to "requirements_pipreqs.txt" as needed.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
9. **Update lists**: Add the "requirements_pipreqs.txt" file generated by pipreqs and corrected by you (or maybe not) to the waiting list using the command `waitinglist addfile /repo/requirements_pipreqs.txt`.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
10. **Resolve version_constraint conflicts**: Process the elements in conflict_list. Based on the information in conflict_list, resolve any existing version_constraints conflicts. Only after these have been resolved can you proceed with the download.
11. **Unified download execution**: After analyzing the original requirements.txt of the repository and the "requirements.txt" generated by pipreqs, and resolving any conflict issues, you need to enter download to execute the unified `download`. This will download each element currently in the waiting_list one by one, and eventually, the download status will be returned.
12. **Error Handling**: After the download is complete, you need to handle the error messages based on the information provided. We will return the list of third-party libraries and their dependencies in your current environment. When resolving these errors, you need to ensure that these dependencies are properly managed. For example, you cannot directly uninstall a package that is required by another package, nor can you install a version that does not meet the constraints.
    For instance, if package A depends on package B with a requirement of "B>=1.0", you cannot simply run pip uninstall B as this would cause package A to lack its dependency. Similarly, you cannot run `pip install B==0.5` because this would not satisfy the requirement of "B>=1.0".
    You can make use of the following tools:
    a.(Strongly recommend) `pipdeptree`: Use pipdeptree to see the structure of the python third-party library downloaded.
    b.(Strongly recommend) `pipdeptree -p <package_name>`: Use pipdeptree -p followed by package_name can display the dependency information of a specific third-party library.
    c.(Strongly recommend) `pip index versions <package_name> --python-version <python_version>`: This command is used to query the versions of a specific package for a particular Python version, including pre-release versions. For example, `pip index versions requests --python-version 3.10` can be used to find the versions of requests that are available for Python 3.10.
    d. `pip install -q`: Use this command to install a specific version of a package with minimal output. This greatly reduces the verbosity, showing only crucial information and final status. It is recommended to specify the version with == to avoid conflicts with the existing environment. For example, use pip install -q requests==2.25.1 to ensure a quiet and specific version installation.
    e. `pip install -e`: Use this command to install a package in "editable" mode. This is particularly useful during development when you want to make changes to the source code and have them immediately reflected in the installed package without needing to reinstall it. For example, pip install -e . will install the package located in the current directory in editable mode. Another common use case is to install a package from a local path or a VCS repository while keeping it editable. For example, pip install -e git+https://github.com/username/repo.git#egg=package_name.
    f. `pip uninstall`: Use this command to uninstall a third-party library. This should be used cautiously as it may cause dependency issues. If you need to change the version of a package, it is better to use `pip install [package_name]==[version]` instead.
    g. `apt-get update -qq && apt-get install [package]=[version] -y -qq`: Use this command to install system packages if needed, remember to use `-y`. Use `-qq` to minimize the output if there is nothing wrong.
    h. `export <variable>=<value>`: Use this command to set system environment variables.
    i. You can use the `--help` parameter to view detailed usage instructions for various tools, such as `pipdeptree --help` and `pip install --help`, etc.
    j. You may also use other commands that are not listed here, including built-in Bash commands and other system commands.
    *Note*: Always consider the potential impact of each command on the system. Aim to achieve the best results with minimal changes.
    *Note*: For modules not found in the error message, first check if the corresponding module is available in the project folder before proceeding with external downloads. For example, if you encounter an error stating ModuleNotFoundError: No module named 'my_module', check if there is a file named my_module.py in your project directory. If it is not present, then you can look for the module externally and download it if necessary.
    *Note*: Do not use external download tools like `git clone` or `wget` to download a large number of files directly in the /repo folder (or its subdirectories) to avoid causing significant changes to the original repository.
    *Note*: Flexibility: You do not need to complete all configurations in one go. If you are unsure whether the configuration is approximately complete, you can use the `runtest` or `poetryruntest`(When you configured in poetry environment) command. I will check the configured environment and return any error messages. Based on the error messages, you can make further adjustments.
    *Note*: In special cases, if you feel that the Docker environment has become too messy to achieve your goal, you can use `clear_configuration` command to restore it to the initial Python 3.10 environment or `change_python_version` or `change_base_image` and start over.
**Most Important!** You can execute `runtest` or `poetryruntest` anywhere when you decide to test the environment. You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
Please note that when manually using pip, apt-get, poetry, or other tools to download third-party libraries, try to use the `-q` (quiet) mode if available to reduce intermediate progress bar outputs. Additionally, we will help remove more obvious progress bar information to minimize interference with the analysis.
If you need to install packages using pip, please consider adding them to the waiting list first, and then use the `download` command to proceed with the installation.
If you need to run two or more commands, please strictly follow the order by enclosing each command in ONE ```bash and ``` blocks connected by "&&" with ONE line! It is not recommended to use backslashes (\) for line continuation. If you need to execute commands that span multiple lines, it is advisable to write them into a .sh file and then run the executable file. For example, if you want to enter the /repo directory and execute `poetry install`, you should input:
```bash
cd /repo && poetry install
```

It is not recommended to directly input:
```bash
cd /repo
```
```bash
poetry install
```

Nor is it recommended to input:
```bash
cd /repo \
poetry install
```

We also strongly request that you try to write the instructions on the same line as much as possible, and do not break them into multiple lines, as this may cause parsing errors. Even if the line of instructions contains a lot of && connections, do not arbitrarily break it into multiple lines.

We will automatically maintain two lists in the background to facilitate the installation and download of third-party libraries. These are:
1. waiting list: Used to store third-party libraries waiting to be downloaded, including both pip and apt libraries. You can use `waitinglist show` to show all items in it.
2. conflict list: Used to store elements with the same name as those in the waiting list but with inconsistent version constraints. You can use `conflictlist show` to show all items in it.
*Note*: you only need to follow the prompts to complete operations on these lists during the running process and can only manipulate them using the provided commands.
*Note*: Before operating waiting list, conflict list, or download commands, you can use waitinglist show or conflictlist show to observe their structure each time.


IN GOOD FORMAT: 
All your answer must contain Thought and Action. 
Calling CLI tools Action using bash block like ```bash  ```. 
Editing and Writing code Action using diff block like ```diff ```.
The command line you generate will be run in the bash sandbox environment, and the running results will be returned to you through the system messages.

IMPORTANT TIPS: 
        * Each round of reply can only contain one ```bash ``` block, which means Each round of your answers contain only *ONE* action!
        * Please submit the first command first, then after receiving the response, you can issue the second command. You are free to use any other bash communication.

You are now in the Docker environment of python:3.10. Please perform all operations within this environment.
CLI TOOLS: You can call CLI tools in  ```bash ... ``` block as Action with a Thought. like:
### Thought: I need to understand the structure of the root directory.
### Action:
```bash
ls /repo
```

For another example:
### Thought: I need to read the README.md file.
### Action:
```bash
cat README.md
```


CODE EDITING AND WRITING: All changes to files must use the ```diff  ```  block format, with symbols <<<<<<< SEARCH, ======= and >>>>>>> REPLACE 

You need to provide code patch. The patch should according to the original code, indent correctly, and do not include line numbers. The format is as follows: 
### Thought: Modify explanation...
### Action: 
```diff 
/absolute/path/of/target.py
<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE

<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE
``` 
Every *SEARCH/REPLACE block must use this format:
1. The opening fence ```diff 
2. The file path alone on a line, verbatim. No bold asterisks, no quotes around it, no escaping of characters, etc.
3. The start of search block: <<<<<<< SEARCH
4. A contiguous chunk of lines to search for in the existing source code
5. The dividing line: =======
6. The lines to replace into the source code
7. The end of the replace block: >>>>>>> REPLACE
8. The closing fence: ``` 
Once you want to modify the code you MUST: 
        * Include *ALL* the code being searched and replaced!
        * Every *SEARCH* section must *EXACTLY MATCH* the existing source code, character for character, including all comments, docstrings, etc.
        * '<<<<<<< SEARCH', '=======' and  '>>>>>>> REPLACE' symbols must be on a line by themselves and cannot be indented.
        * All code modifications must be expressed in the REPLACE format above (including delete an insert). We will find the source code with the highest matching degree in the original file and replace it. Please provide sufficient and unique old line(s) from snippet to facilitate matching.
        * If the code patch you provide is successfully applied, the differences before and after the code modification will be returned.
        * The paths of modified files must be completely absolute paths.
        * Make sure the patch you provide is indented correctly especially in python programs: The indentation of old lines is exactly the same as the original code, and the indentation of new lines is correct.
        * All patches must be based on the original code viewed by the tools, and fabricated code patch(es) is prohibited.
        * Previously successfully applied patches will modify the code, and new patches must be applied based on the current code. Please review the relevant code again then provide new patches.
        * If the old line(s) is empty, it is considered to be inserted at the beginning of the file. If the file does not exist, a new file will be created and the new line will be written. like:
### Thought: Create a.py
### Action:
```diff
/project_path/.../a.py
<<<<<<< SEARCH
=======
    [new line(s) to add]
>>>>>>> REPLACE
```

*Note*: Do not make extensive changes to the existing files in the /repo folder. You may only make appropriate and necessary changes to the original repository files (e.g., when there are actual errors or tests that cannot be run).
*Very Important Note*: Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
In addition to typical bash commands, we also provide the following commands that can be used, you can use them flexibly if needed:
waitinglist add -p package_name [-v version_constraints] -t tool # Add item into waiting list. If no 'version_constraints' are specified, the latest version will be downloaded by default.
waitinglist addfile file_path # Add all entries from a file similar to requirements.txt format to the waiting list.
waitinglist clear # Used to clear all the items in the waiting list.
conflictlist solve -v "[version_cosntraints]" # Resolve the conflict for the first element in the conflict list, and update the version constraints for the corresponding package_name and tool to version_constraints. If no 'version_constraints' are specified, the latest version will be downloaded by default.
conflictlist solve -u # Keep the original version constraint that exists in the waiting list, and discard the other version constraints with the same name and tool in the conflict list.
conflictlist clear # Used to clear all the items in the conflict list.
conflictlist show # Used to show all the items in the conflict list.
waitinglist show # Used to show all the items in the waiting list.
download # Download all pending elements in the waiting list at once.
runtest # Check if the configured environment is correct.
poetryruntest # Check if the configured environment is correct in poetry environment! If you want to run tests in poetry environment, run it.
runpipreqs # Generate 'requirements_pipreqs.txt' and 'pipreqs_output.txt' and 'pipreqs_error.txt'.
change_python_version python_version # Switching the Python version in the Docker container will forgo any installations made prior to the switch. The Python version number should be represented directly with numbers and dots, without any quotation marks.
change_base_image base_image # Switching the base image in the Docker container will forgo any installations made prior to the switch. The base image does not necessarily have to follow the format 'python:<Python version>'. Preferably, specify it in the form of 'base_image_name:tag', such as 'pytorch/pytorch:1.10.0-cuda11.1-cudnn8-runtime'. If no tag is provided, it defaults to 'latest'. No any quotation marks are needed.
clear_configuration # Reset all the configuration to the initial setting of python:3.10.


VERY IMPORTANT TIPS: 
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!

---------------------------
### Thought: I need to understand the structure of the root directory.
### Action:
```bash
ls /repo
```
### Observation:
Running `ls /repo`...
CHANGELOG.md	     SECURITY.md	 mkdocs.yaml
CODEOWNERS	     SUPPORT.md		 poetry.lock
CODE_OF_CONDUCT.md   cspell.config.yaml  pyproject.toml
CONTRIBUTING.md      dictionary.txt	 scripts
DEVELOPING.md	     docs		 tests
LICENSE		     examples		 v1-breaking-changes.md
RAI_TRANSPARENCY.md  examples_notebooks
README.md	     graphrag
`ls /repo` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 199 turns left to complete the task.
---------------------------
### Thought: I need to read the `README.md` file to understand how to configure the environment as per the project's instructions.
### Action:
```bash
cat /repo/README.md
```
### Observation:
Running `cat /repo/README.md`...
# GraphRAG
👉 [Use the GraphRAG Accelerator solution](https://github.com/Azure-Samples/graphrag-accelerator) <br/>
👉 [Microsoft Research Blog Post](https://www.microsoft.com/en-us/research/blog/graphrag-unlocking-llm-discovery-on-narrative-private-data/)<br/>
👉 [Read the docs](https://microsoft.github.io/graphrag)<br/>
👉 [GraphRAG Arxiv](https://arxiv.org/pdf/2404.16130)
<div align="left">
  <a href="https://pypi.org/project/graphrag/">
    <img alt="PyPI - Version" src="https://img.shields.io/pypi/v/graphrag">
  </a>
  <a href="https://pypi.org/project/graphrag/">
    <img alt="PyPI - Downloads" src="https://img.shields.io/pypi/dm/graphrag">
  </a>
  <a href="https://github.com/microsoft/graphrag/issues">
    <img alt="GitHub Issues" src="https://img.shields.io/github/issues/microsoft/graphrag">
  </a>
  <a href="https://github.com/microsoft/graphrag/discussions">
    <img alt="GitHub Discussions" src="https://img.shields.io/github/discussions/microsoft/graphrag">
  </a>
</div>
## Overview
The GraphRAG project is a data pipeline and transformation suite that is designed to extract meaningful, structured data from unstructured text using the power of LLMs.
To learn more about GraphRAG and how it can be used to enhance your LLM's ability to reason about your private data, please visit the <a href="https://www.microsoft.com/en-us/research/blog/graphrag-unlocking-llm-discovery-on-narrative-private-data/" target="_blank">Microsoft Research Blog Post.</a>
## Quickstart
To get started with the GraphRAG system we recommend trying the [Solution Accelerator](https://github.com/Azure-Samples/graphrag-accelerator) package. This provides a user-friendly end-to-end experience with Azure resources.
## Repository Guidance
This repository presents a methodology for using knowledge graph memory structures to enhance LLM outputs. Please note that the provided code serves as a demonstration and is not an officially supported Microsoft offering.
⚠️ *Warning: GraphRAG indexing can be an expensive operation, please read all of the documentation to understand the process and costs involved, and start small.*
## Diving Deeper
- To learn about our contribution guidelines, see [CONTRIBUTING.md](./CONTRIBUTING.md)
- To start developing _GraphRAG_, see [DEVELOPING.md](./DEVELOPING.md)
- Join the conversation and provide feedback in the [GitHub Discussions tab!](https://github.com/microsoft/graphrag/discussions)
## Prompt Tuning
Using _GraphRAG_ with your data out of the box may not yield the best possible results.
We strongly recommend to fine-tune your prompts following the [Prompt Tuning Guide](https://microsoft.github.io/graphrag/prompt_tuning/overview/) in our documentation.
## Responsible AI FAQ
See [RAI_TRANSPARENCY.md](./RAI_TRANSPARENCY.md)
- [What is GraphRAG?](./RAI_TRANSPARENCY.md#what-is-graphrag)
- [What can GraphRAG do?](./RAI_TRANSPARENCY.md#what-can-graphrag-do)
- [What are GraphRAG’s intended use(s)?](./RAI_TRANSPARENCY.md#what-are-graphrags-intended-uses)
- [How was GraphRAG evaluated? What metrics are used to measure performance?](./RAI_TRANSPARENCY.md#how-was-graphrag-evaluated-what-metrics-are-used-to-measure-performance)
- [What are the limitations of GraphRAG? How can users minimize the impact of GraphRAG’s limitations when using the system?](./RAI_TRANSPARENCY.md#what-are-the-limitations-of-graphrag-how-can-users-minimize-the-impact-of-graphrags-limitations-when-using-the-system)
- [What operational factors and settings allow for effective and responsible use of GraphRAG?](./RAI_TRANSPARENCY.md#what-operational-factors-and-settings-allow-for-effective-and-responsible-use-of-graphrag)
## Trademarks
This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft
trademarks or logos is subject to and must follow
[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.
## Privacy
[Microsoft Privacy Statement](https://privacy.microsoft.com/en-us/privacystatement)
`cat /repo/README.md` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 198 turns left to complete the task.
---------------------------
### Thought: The README file provides an overview of GraphRAG but does not mention specific details for setting up the testing environment. The `DEVELOPING.md` file may contain relevant instructions for setting up the development environment. I will read the `DEVELOPING.md` file to understand the setup process better.
### Action:
```bash
cat /repo/DEVELOPING.md
```
### Observation:
Running `cat /repo/DEVELOPING.md`...
# GraphRAG Development
# Requirements
| Name                | Installation                                                 | Purpose                                                                             |
| ------------------- | ------------------------------------------------------------ | ----------------------------------------------------------------------------------- |
| Python 3.10 or 3.11 | [Download](https://www.python.org/downloads/)                | The library is Python-based.                                                        |
| Poetry              | [Instructions](https://python-poetry.org/docs/#installation) | Poetry is used for package management and virtualenv management in Python codebases |
# Getting Started
## Install Dependencies
```sh
# Install Python dependencies.
poetry install
```
## Executing the Indexing Engine
```sh
poetry run poe index <...args>
```
## Executing Queries
```sh
poetry run poe query <...args>
```
## Versioning
We use [semversioner](https://github.com/raulgomis/semversioner) to automate and enforce semantic versioning in the release process. Our CI/CD pipeline checks that all PR's include a json file generated by semversioner. When submitting a PR, please run:
```shell
poetry run semversioner add-change -t patch -d "<a small sentence describing changes made>."
```
# Azurite
Some unit and smoke tests use Azurite to emulate Azure resources. This can be started by running:
```sh
./scripts/start-azurite.sh
```
or by simply running `azurite` in the terminal if already installed globally. See the [Azurite documentation](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite) for more information about how to install and use Azurite.
# Lifecycle Scripts
Our Python package utilizes Poetry to manage dependencies and [poethepoet](https://pypi.org/project/poethepoet/) to manage custom build scripts.
Available scripts are:
- `poetry run poe index` - Run the Indexing CLI
- `poetry run poe query` - Run the Query CLI
- `poetry build` - This invokes `poetry build`, which will build a wheel file and other distributable artifacts.
- `poetry run poe test` - This will execute all tests.
- `poetry run poe test_unit` - This will execute unit tests.
- `poetry run poe test_integration` - This will execute integration tests.
- `poetry run poe test_smoke` - This will execute smoke tests.
- `poetry run poe check` - This will perform a suite of static checks across the package, including:
  - formatting
  - documentation formatting
  - linting
  - security patterns
  - type-checking
- `poetry run poe fix` - This will apply any available auto-fixes to the package. Usually this is just formatting fixes.
- `poetry run poe fix_unsafe` - This will apply any available auto-fixes to the package, including those that may be unsafe.
- `poetry run poe format` - Explicitly run the formatter across the package.
## Troubleshooting
### "RuntimeError: llvm-config failed executing, please point LLVM_CONFIG to the path for llvm-config" when running poetry install
Make sure llvm-9 and llvm-9-dev are installed:
`sudo apt-get install llvm-9 llvm-9-dev`
and then in your bashrc, add
`export LLVM_CONFIG=/usr/bin/llvm-config-9`
### "numba/\_pymodule.h:6:10: fatal error: Python.h: No such file or directory" when running poetry install
Make sure you have python3.10-dev installed or more generally `python<version>-dev`
`sudo apt-get install python3.10-dev`
### LLM call constantly exceeds TPM, RPM or time limits
`GRAPHRAG_LLM_THREAD_COUNT` and `GRAPHRAG_EMBEDDING_THREAD_COUNT` are both set to 50 by default. You can modify this values
to reduce concurrency. Please refer to the [Configuration Documents](https://microsoft.github.io/graphrag/config/overview/)
`cat /repo/DEVELOPING.md` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 197 turns left to complete the task.
---------------------------
### Thought: The `DEVELOPING.md` file provides clear instructions on how to install dependencies and run tests using Poetry. The next logical step is to install the dependencies using Poetry.
### Action:
```bash
cd /repo && poetry install
```
### Observation:
Running `cd /repo`...
`cd /repo` executes with returncode: 0
Running `poetry install`...
  [32;1m-[39;22m [39mInstalling [39m[36msemversioner[39m[39m ([39m[32m2.0.5[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtiktoken[39m[39m ([39m[32m0.7.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mupdate-toml[39m[39m ([39m[32m0.2.1[39m[39m)[39m
[15A[0J  [32;1m-[39;22m [39mInstalling [39m[36mlancedb[39m[39m ([39m[32m0.13.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mmkdocs-exclude-search[39m[39m ([39m[32m0.6.6[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mmkdocs-jupyter[39m[39m ([39m[32m0.25.1[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mmkdocs-typer[39m[39m ([39m[32m0.0.3[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mnltk[39m[39m ([39m[32m3.9.1[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mopenai[39m[39m ([39m[32m1.54.1[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpoethepoet[39m[39m ([39m[32m0.28.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpyaml-env[39m[39m ([39m[32m1.2.1[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpyright[39m[39m ([39m[32m1.1.388[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpytest-asyncio[39m[39m ([39m[32m0.24.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpytest-dotenv[39m[39m ([39m[32m0.5.2[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpytest-timeout[39m[39m ([39m[32m2.3.1[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mruff[39m[39m ([39m[32m0.6.9[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36msemversioner[39m[39m ([39m[32m2.0.5[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtiktoken[39m[39m ([39m[32m0.7.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mupdate-toml[39m[39m ([39m[32m0.2.1[39m[39m)[39m
[39;1mInstalling[39;22m the current project: [36mgraphrag[39m ([39;1m0.5.0[39;22m)[1G[2K[39;1mInstalling[39;22m the current project: [36mgraphrag[39m ([32m0.5.0[39m)
`poetry install` executes with returncode: 0

[Current directory]:
/repo
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 196 turns left to complete the task.
---------------------------
### Thought: The Poetry dependencies have been successfully installed. Now, let's try running the tests to see if the configuration is correct and if any additional adjustments are needed.
### Action:
```bash
poetry run poe test
```
### Observation:
Running `poetry run poe test`...
The output is too long, so we've truncated it to show you the first and last 5000 characters.
Running `poetry run poe test`...
/root/.cache/pypoetry/virtualenvs/graphrag-gW_DSdP6-py3.10/lib/python3.10/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"
  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
platform linux -- Python 3.10.15, pytest-8.3.3, pluggy-1.5.0
rootdir: /repo
configfile: pyproject.toml
plugins: timeout-2.3.1, asyncio-0.24.0, devtools-0.12.2, dotenv-0.5.2, anyio-4.6.2.post1
timeout: 1000.0s
timeout method: signal
timeout func_only: False
asyncio: mode=auto, default_loop_scope=None
collected 99 items                                                             [0m
=================================== FAILURES ===================================
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
------------------------------ Captured log call -------------------------------
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
------------------------------ Captured log call -------------------------------
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
------------------------------ Captured log call -------------------------------
args = (<tests.smoke.test_fixtures.TestIndexer object at 0x7f068a7b5540>,)
kwargs = {'input_file_type': 'text', 'input_path': './tests/fixtures/min-csv', 'query_config': [{'method': 'local', 'query': 'W..., 'summary', 'full_content', 'full_content_json', 'rank', 'rank_explanation', ...], 'row_range': [1, 2500], ...}, ...}}
root = PosixPath('tests/fixtures/min-csv')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
value = None
args = (<tests.smoke.test_fixtures.TestIndexer object at 0x7f068a7b7eb0>,)
kwargs = {'input_file_type': 'text', 'input_path': './tests/fixtures/text', 'query_config': [{'method': 'local', 'query': 'Who ..., 'summary', 'full_content', 'full_content_json', 'rank', 'rank_explanation', ...], 'row_range': [1, 2500], ...}, ...}}
root = PosixPath('tests/fixtures/text')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
value = None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
values = {}, root_dir = '/repo'
../root/.cache/pypoetry/virtualenvs/graphrag-gW_DSdP6-py3.10/lib/python3.10/site-packages/azure/search/documents/indexes/_generated/models/_models_py3.py:5644
  /root/.cache/pypoetry/virtualenvs/graphrag-gW_DSdP6-py3.10/lib/python3.10/site-packages/azure/search/documents/indexes/_generated/models/_mo
...[Truncation]...
         18      9    50%   36-60
graphrag/index/workflows/v1/subflows/create_final_covariates.py                         11      3    73%   36-49
graphrag/index/workflows/v1/subflows/create_final_documents.py                          12      0   100%
graphrag/index/workflows/v1/subflows/create_final_entities.py                           10      0   100%
graphrag/index/workflows/v1/subflows/create_final_nodes.py                              12      0   100%
graphrag/index/workflows/v1/subflows/create_final_relationships.py                      11      0   100%
graphrag/index/workflows/v1/subflows/create_final_text_units.py                         16      1    94%   41
graphrag/index/workflows/v1/subflows/generate_text_embeddings.py                        18      7    61%   41-70
graphrag/logging/__init__.py                                                             0      0   100%
graphrag/logging/base.py                                                                29      0   100%
graphrag/logging/null_progress.py                                                       12      0   100%
graphrag/logging/print_progress.py                                                      21      8    62%   16-17, 21, 28, 38, 42, 46, 50
graphrag/model/__init__.py                                                               0      0   100%
graphrag/model/community_report.py                                                      26      1    96%   61
graphrag/model/entity.py                                                                24      1    96%   57
graphrag/model/identified.py                                                             7      0   100%
graphrag/model/named.py                                                                  6      0   100%
graphrag/model/relationship.py                                                          24      1    96%   55
graphrag/model/types.py                                                                  2      0   100%
graphrag/prompts/__init__.py                                                             0      0   100%
graphrag/prompts/index/__init__.py                                                       0      0   100%
graphrag/prompts/index/claim_extraction.py                                               3      0   100%
graphrag/prompts/index/community_report.py                                               1      0   100%
graphrag/prompts/index/entity_extraction.py                                              3      0   100%
graphrag/prompts/index/summarize_descriptions.py                                         1      0   100%
graphrag/query/__init__.py                                                               0      0   100%
graphrag/query/context_builder/__init__.py                                               0      0   100%
graphrag/query/context_builder/community_context.py                                    117    103    12%   50-183, 195-224, 233-242, 252-259
graphrag/query/context_builder/entity_extraction.py                                     52     19    63%   28-34, 82, 91, 103-121
graphrag/query/input/__init__.py                                                         0      0   100%
graphrag/query/input/retrieval/__init__.py                                               0      0   100%
graphrag/query/input/retrieval/entities.py                                              50     20    60%   42, 49, 63-92
graphrag/query/llm/__init__.py                                                           0      0   100%
graphrag/query/llm/base.py                                                              19      1    95%   53
graphrag/query/llm/text_utils.py                                                        55     40    27%   32-37, 44-48, 55-106
graphrag/storage/__init__.py                                                             0      0   100%
graphrag/storage/blob_pipeline_storage.py                                              159    110    31%   45-49, 73-79, 83-84, 92, 114-168, 174-188, 192-204, 208-220, 230-239, 246-251, 255-260, 267-270, 280-281, 285, 289-290, 300-307, 336-365, 371
graphrag/storage/factory.py                                                             20      9    55%   26-39
graphrag/storage/file_pipeline_storage.py                                               89      8    91%   51, 70-72, 89, 142, 147, 157-158
graphrag/storage/memory_pipeline_storage.py                                             23      4    83%   11, 66, 70, 74
graphrag/storage/pipeline_storage.py                                                    22      0   100%
graphrag/utils/__init__.py                                                               0      0   100%
graphrag/utils/embeddings.py                                                             6      0   100%
graphrag/utils/storage.py                                                               15      3    80%   23-25
graphrag/vector_stores/__init__.py                                                       0      0   100%
graphrag/vector_stores/azure_ai_search.py                                               55     36    35%   42, 46-74, 80-141, 145-157, 163-171, 190-195, 199-200
graphrag/vector_stores/base.py                                                          38      0   100%
graphrag/vector_stores/factory.py                                                       24     11    54%   28, 35-44
graphrag/vector_stores/lancedb.py                                                       48     34    29%   25, 29-34, 42-80, 84-94, 100-117, 134-137, 141-153
------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                 5698   1519    73%
[91;1mError: Subtasks _test_all returned non-zero exit status[0m
The command execution failed, so I have reverted it back to the previous state, which is the environment before running this command.
`poetry run poe test` executes with returncode: 1

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 195 turns left to complete the task.
---------------------------
### Thought: The tests have failed. I need to review the error messages to identify the issues and determine what adjustments are needed. Let's start by displaying the list of captured log calls which might provide insights into the cause of the failures.
### Action:
```bash
cat /repo/tests/pytest-debug.log
```
### Observation:
Please do not use `pytest` directly, but use `runtest` or `poetryruntest`(When you configured in poetry environment) instead. If there are something wrong when running `runtest` or `poetryruntest`, please solve it and run it again!
`cat /repo/tests/pytest-debug.log` executes with returncode: 1

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 194 turns left to complete the task.
---------------------------
### Thought: I need to re-run the tests using `poetryruntest` and carefully observe the output to identify the issues and determine the necessary adjustments.
### Action:
```bash
poetryruntest
```
Congratulations, you have successfully configured the environment!
/root/.cache/pypoetry/virtualenvs/graphrag-gW_DSdP6-py3.10/lib/python3.10/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
tests/integration/_pipeline/test_run.py::TestRun::test_megapipeline
tests/integration/storage/test_blob_pipeline_storage.py::test_find
tests/integration/storage/test_blob_pipeline_storage.py::test_dotprefix
tests/integration/storage/test_blob_pipeline_storage.py::test_child
tests/integration/storage/test_file_pipeline_storage.py::test_find
tests/integration/storage/test_file_pipeline_storage.py::test_child
tests/notebook/test_notebooks.py::test_notebook[notebook_path0]
tests/smoke/test_fixtures.py::TestIndexer::test_fixture[min-csv]
tests/smoke/test_fixtures.py::TestIndexer::test_fixture[text]
tests/unit/config/test_default_config.py::TestDefaultConfig::test_all_env_vars_is_accurate
tests/unit/config/test_default_config.py::TestDefaultConfig::test_can_set_gleanings_to_zero
tests/unit/config/test_default_config.py::TestDefaultConfig::test_can_set_no_chunk_by_columns
tests/unit/config/test_default_config.py::TestDefaultConfig::test_clear_warnings
tests/unit/config/test_default_config.py::TestDefaultConfig::test_create_parameters
tests/unit/config/test_default_config.py::TestDefaultConfig::test_create_parameters_from_env_vars
tests/unit/config/test_default_config.py::TestDefaultConfig::test_csv_input_returns_correct_config
tests/unit/config/test_default_config.py::TestDefaultConfig::test_default_config_with_api_key_passes
tests/unit/config/test_default_config.py::TestDefaultConfig::test_default_config_with_no_env_vars_throws
tests/unit/config/test_default_config.py::TestDefaultConfig::test_default_config_with_oai_key_passes_envvar
tests/unit/config/test_default_config.py::TestDefaultConfig::test_default_config_with_oai_key_passes_obj
tests/unit/config/test_default_config.py::TestDefaultConfig::test_default_values
tests/unit/config/test_default_config.py::TestDefaultConfig::test_malformed_input_dict_throws
tests/unit/config/test_default_config.py::TestDefaultConfig::test_minimim_azure_config_object
tests/unit/config/test_default_config.py::TestDefaultConfig::test_prompt_file_reading
tests/unit/config/test_default_config.py::TestDefaultConfig::test_string_repr
tests/unit/config/test_default_config.py::TestDefaultConfig::test_text_input_returns_correct_config
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_api_base
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_api_base_envvar
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_api_base_obj
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_embedding_api_base_envvar
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_embedding_api_base_obj
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_embedding_deployment_name
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_embedding_deployment_name_envvar
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_embedding_deployment_name_obj
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_llm_deployment_name
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_llm_deployment_name_envvar
tests/unit/config/test_default_config.py::TestDefaultConfig::test_throws_if_azure_is_used_without_llm_deployment_name_obj
tests/unit/config/test_default_config.py::test_yaml_load_e2e
tests/unit/config/test_resolve_path.py::test_resolve_path_no_timestamp_with_run_id
tests/unit/config/test_resolve_path.py::test_resolve_path_no_timestamp_without_run_id
tests/unit/config/test_resolve_path.py::test_resolve_path_with_timestamp_and_run_id
tests/unit/config/test_resolve_path.py::test_resolve_path_with_timestamp_and_inferred_directory
tests/unit/config/test_resolve_path.py::test_resolve_path_absolute
tests/unit/indexing/cache/test_file_pipeline_cache.py::TestFilePipelineCache::test_cache_clear
tests/unit/indexing/cache/test_file_pipeline_cache.py::TestFilePipelineCache::test_cache_has
tests/unit/indexing/cache/test_file_pipeline_cache.py::TestFilePipelineCache::test_child_cache
tests/unit/indexing/cache/test_file_pipeline_cache.py::TestFilePipelineCache::test_get_set
tests/unit/indexing/config/test_load.py::TestLoadPipelineConfig::test_config_passed_in_returns_config
tests/unit/indexing/config/test_load.py::TestLoadPipelineConfig::test_loading_default_config_returns_config
tests/unit/indexing/config/test_load.py::TestLoadPipelineConfig::test_loading_default_config_with_input_overridden
tests/unit/indexing/config/test_load.py::TestLoadPipelineConfig::test_loading_default_config_with_workflows_overridden
tests/unit/indexing/graph/extractors/community_reports/test_sort_context.py::test_sort_context
tests/unit/indexing/graph/extractors/community_reports/test_sort_context.py::test_sort_context_max_tokens
tests/unit/indexing/graph/utils/test_stable_lcc.py::TestStableLCC::test_directed_graph_keeps_source_target_intact
tests/unit/indexing/graph/utils/test_stable_lcc.py::TestStableLCC::test_directed_graph_run_twice_produces_same_graph
tests/unit/indexing/graph/utils/test_stable_lcc.py::TestStableLCC::test_undirected_graph_run_twice_produces_same_graph
tests/unit/indexing/test_exports.py::test_exported_functions
tests/unit/indexing/test_init_content.py::test_init_yaml
tests/unit/indexing/test_init_content.py::test_init_yaml_uncommented
tests/unit/indexing/verbs/entities/extraction/strategies/graph_intelligence/test_gi_entity_extraction.py::TestRunChain::test_run_extract_entities_multiple_documents_correct_edge_source_ids_mapped
tests/unit/indexing/verbs/entities/extraction/strategies/graph_intelligence/test_gi_entity_extraction.py::TestRunChain::test_run_extract_entities_multiple_documents_correct_edges_returned
tests/unit/indexing/verbs/entities/extraction/strategies/graph_intelligence/test_gi_entity_extraction.py::TestRunChain::test_run_extract_entities_multiple_documents_correct_entities_returned
tests/unit/indexing/verbs/entities/extraction/strategies/graph_intelligence/test_gi_entity_extraction.py::TestRunChain::test_run_extract_entities_multiple_documents_correct_entity_source_ids_mapped
tests/unit/indexing/verbs/entities/extraction/strategies/graph_intelligence/test_gi_entity_extraction.py::TestRunChain::test_run_extract_entities_single_document_correct_entities_returned
tests/unit/indexing/workflows/test_export.py::test_normal_result_exports_parquet
tests/unit/indexing/workflows/test_export.py::test_empty_result_does_not_export_parquet
tests/unit/indexing/workflows/test_load.py::TestCreateWorkflow::test_existing_workflow_should_not_crash
tests/unit/indexing/workflows/test_load.py::TestCreateWorkflow::test_non_existent_workflow_without_steps_should_crash
tests/unit/indexing/workflows/test_load.py::TestCreateWorkflow::test_workflow_with_steps_should_not_fail
tests/unit/indexing/workflows/test_load.py::TestLoadWorkflows::test_multiple_workflows_should_not_crash
tests/unit/indexing/workflows/test_load.py::TestLoadWorkflows::test_non_existent_workflow_should_crash
tests/unit/indexing/workflows/test_load.py::TestLoadWorkflows::test_single_workflow_should_not_crash
tests/unit/indexing/workflows/test_load.py::TestLoadWorkflows::test_three_interdependent_workflows_should_provide_correct_order
tests/unit/indexing/workflows/test_load.py::TestLoadWorkflows::test_two_interdependent_workflows_should_provide_correct_order
tests/unit/indexing/workflows/test_load.py::TestLoadWorkflows::test_two_workflows_dependent_on_another_single_workflow_should_provide_correct_order
tests/unit/query/context_builder/test_entity_extraction.py::test_map_query_to_entities
tests/unit/query/input/retrieval/test_entities.py::test_get_entity_by_id
tests/unit/query/input/retrieval/test_entities.py::test_get_entity_by_key
tests/unit/utils/test_embeddings.py::test_create_collection_name
tests/unit/utils/test_embeddings.py::test_create_collection_name_invalid_embedding_throws
tests/unit/utils/test_embeddings.py::test_create_collection_name_invalid_embedding_does_not_throw
tests/verbs/test_create_base_entity_graph.py::test_create_base_entity_graph
tests/verbs/test_create_base_entity_graph.py::test_create_base_entity_graph_with_snapshots
tests/verbs/test_create_base_entity_graph.py::test_create_base_entity_graph_missing_llm_throws
tests/verbs/test_create_base_text_units.py::test_create_base_text_units
tests/verbs/test_create_base_text_units.py::test_create_base_text_units_with_snapshot
tests/verbs/test_create_final_communities.py::test_create_final_communities
tests/verbs/test_create_final_community_reports.py::test_create_final_community_reports
tests/verbs/test_create_final_community_reports.py::test_create_final_community_reports_missing_llm_throws
tests/verbs/test_create_final_covariates.py::test_create_final_covariates
tests/verbs/test_create_final_covariates.py::test_create_final_covariates_missing_llm_throws
tests/verbs/test_create_final_documents.py::test_create_final_documents
tests/verbs/test_create_final_documents.py::test_create_final_documents_with_attribute_columns
tests/verbs/test_create_final_entities.py::test_create_final_entities
tests/verbs/test_create_final_nodes.py::test_create_final_nodes
tests/verbs/test_create_final_relationships.py::test_create_final_relationships
tests/verbs/test_create_final_text_units.py::test_create_final_text_units
tests/verbs/test_create_final_text_units.py::test_create_final_text_units_no_covariates
tests/verbs/test_generate_text_embeddings.py::test_generate_text_embeddings

99 tests collected in 6.21s
Container aece7e4f3451 stopped and removed
Spend totally 420.69005131721497.
