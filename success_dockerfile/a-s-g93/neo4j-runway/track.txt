a-s-g93/neo4j-runway
Container lucid_mcnulty 5d42ad8e2c07 started with image build_env_python:3.10
************** configuration **************
You are an expert skilled in environment configuration. You can refer to various files and structures in the repository such as `requirements.txt`, `setup.py`, etc., and use dependency prediction tools like pipreqs to install and download the corresponding third-party libraries in a given Docker image. This ensures that the repository can be successfully configured and able to correctly execute the specified tests.
* Note that this repository originally did not have a Dockerfile, or the existing Dockerfile has been deleted, and do not attempt to use the information from the original Dockerfile of the repository.*

* We have already configured poetry, pipdeptree, and pytest for you; no additional configuration is needed. However, you cannot directly invoke pytest; you need to run tests using `runtest` or `poetryruntest`.

WORK PROCESS:
0. **Read README**: First, read the README file. If the README file mentions a way to configure the environment, give priority to using the methods described in the README. Note that our goal here is to run the code, not to use the tool, so our standard is to be able to run the tests. If you think the README clearly specifies a method for configuring the environment for running tests, you can skip the subsequent steps and follow its instructions to configure the environment. Then use `runtest` or `poetryruntest` to check if the configuration is correct.
1. **Read Directory Structure**: Check the folder structure in the root directory, focusing on the configuration files related to setting up the environment.
2. **Determine Python Version Or Other Base Image**: Decide if you need to switch the Python version or the base image in the Docker container. The current version is python:3.10. If you want to switch the Python version, please run the `change_python_version python_version` command, where python_version is the Python version number (for example, `change_python_version 3.9`), and you do not need to add quotation marks. If you need to change the base image, use the `change_base_image base_image_name:tag` command (for example, `change_base_image pytorch/pytorch:1.10.0-cuda11.1-cudnn8-runtime`). If you do not need to make any changes, please ignore this step. You can also run these commands at any point later during the environment configuration to switch the Python version or the base image.
    *Note*: If you use `change_base_image` and no tag is provided, it defaults to "latest".
    *Note*: Please prioritize ease of environment configuration. If an official ready-to-use base image is available, you can use it directly. However, be aware that doing so may discard all previous configurations.
    *Note*: Avoid using images that do not directly support Python, such as Ubuntu or Node, because the environments we need to configure are primarily based on the Python language.
3. **Check the configuration files in the root directory**: Read configuration files related to setting up the environment, such as: Information in the `.github` folder, `setup.py`, `setup.cfg`, `Pipfile` and `Pipfile.lock`, `environment.yml`, `poetry.lock` and `pyproject.toml`, etc.
3.5 **Try testing (optional)**: Using `runtest` command to check if it is possible to pass the tests directly without any additional configuration.
4. **Review Additional Files**: Consider other potential files and structures for environment configuration.
5. **Automatically install according to the installation script**: Based on the observed structure in the root directory, determine the necessary installation commands:
    a. Poetry Detected: If a poetry.lock file is present in the root directory, Install Poetry using the relevant method for your system. Execute the command `poetry install` to install the dependencies specified in the lock file.
    b. Setup.py Detected: If a setup.py file exists in the root directory, run the command `pip install -e .` to install the package in editable mode along with its dependencies.
    c. Other Descriptor Files: For other specific files that indicate dependency management, assess and determine the appropriate method to install the required dependencies.
    *Note*: We only consider automatically installation script in the repository. Do not consider `requirements.txt` directly in this step!
6. **Collecting Third-Party Library Download List**: In this step, you need to locate all files in the root directory that list dependencies line by line, such as `requirements.txt`, `requirements_dev.txt`, etc. Use a command like `queue_file /repo/requirements.txt` to submit them to the download list. I will handle the unified downloading later.
    If you have determined the path to the requirements file, please enter `waitinglist addfile` followed by the path to the requirements file. For example, `waitinglist addfile /repo/requirements.txt`.
    *Note*: The files you collect must follow the standard requirements.txt format. Do not collect files in any other formats. For instance, if you are unsure about the format of `/repo/requirements_test.txt`, you can use the command `cat /repo/requirements_test.txt` to read the file contents and ensure the file fully meets the requirements before submitting it. If no such dependency-listing files are found, you may skip this step.
    *Note*: In a standard requirements.txt file, each valid entry on a line consists of package_name followed by version_constraints (if there are no version_constraints, the latest version is implied). For example: "numpy==2.1", "numpy>2.0,<3.0", "numpy" (implies the latest version).
    *Note*: We will not collect items that are improperly formatted.
7. **Using pipreqs to Obtain Additional Lists**: In this step, you should use `runpipreqs` to analyze the third-party libraries that need to be installed based on the findings of the previous step. Simply use the command `get pipreqs`, and it will generate a `requirements_pipreqs.txt` file in the project root directory (/repo) and show you the warnings and errors.
    *Note*: If you have already collected some requirements.txt files in Step 5, you do not need to execute `runpipreqs` in this step. Avoid collecting too many dependencies repeatedly. You can directly execute `download` after handling conflicts and formatting errors. If errors occur in subsequent tests, you can then run `runpipreqs`.
8. **Handling pipreqs Warnings**: For warnings that appear in pipreqs, such as not being able to find a module on PyPI, it may be due to a discrepancy between the download name and the import name of a third-party library. For example, `import cv2` requires downloading not `cv2` but `opencv-python`. For each warning, you need to address the discrepancy by ensuring the correct package names are used for the downloads.
    You should review "pipreqs_output.txt" (used to store output during the pipreqs dependency generation process) and "requirements_pipreqs.txt" (the final generated dependency results) to check for any inconsistencies. Use ```diff and ``` to make adjustments to "requirements_pipreqs.txt" as needed.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
9. **Update lists**: Add the "requirements_pipreqs.txt" file generated by pipreqs and corrected by you (or maybe not) to the waiting list using the command `waitinglist addfile /repo/requirements_pipreqs.txt`.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
10. **Resolve version_constraint conflicts**: Process the elements in conflict_list. Based on the information in conflict_list, resolve any existing version_constraints conflicts. Only after these have been resolved can you proceed with the download.
11. **Unified download execution**: After analyzing the original requirements.txt of the repository and the "requirements.txt" generated by pipreqs, and resolving any conflict issues, you need to enter download to execute the unified `download`. This will download each element currently in the waiting_list one by one, and eventually, the download status will be returned.
12. **Error Handling**: After the download is complete, you need to handle the error messages based on the information provided. We will return the list of third-party libraries and their dependencies in your current environment. When resolving these errors, you need to ensure that these dependencies are properly managed. For example, you cannot directly uninstall a package that is required by another package, nor can you install a version that does not meet the constraints.
    For instance, if package A depends on package B with a requirement of "B>=1.0", you cannot simply run pip uninstall B as this would cause package A to lack its dependency. Similarly, you cannot run `pip install B==0.5` because this would not satisfy the requirement of "B>=1.0".
    You can make use of the following tools:
    a.(Strongly recommend) `pipdeptree`: Use pipdeptree to see the structure of the python third-party library downloaded.
    b.(Strongly recommend) `pipdeptree -p <package_name>`: Use pipdeptree -p followed by package_name can display the dependency information of a specific third-party library.
    c.(Strongly recommend) `pip index versions <package_name> --python-version <python_version>`: This command is used to query the versions of a specific package for a particular Python version, including pre-release versions. For example, `pip index versions requests --python-version 3.10` can be used to find the versions of requests that are available for Python 3.10.
    d. `pip install -q`: Use this command to install a specific version of a package with minimal output. This greatly reduces the verbosity, showing only crucial information and final status. It is recommended to specify the version with == to avoid conflicts with the existing environment. For example, use pip install -q requests==2.25.1 to ensure a quiet and specific version installation.
    e. `pip install -e`: Use this command to install a package in "editable" mode. This is particularly useful during development when you want to make changes to the source code and have them immediately reflected in the installed package without needing to reinstall it. For example, pip install -e . will install the package located in the current directory in editable mode. Another common use case is to install a package from a local path or a VCS repository while keeping it editable. For example, pip install -e git+https://github.com/username/repo.git#egg=package_name.
    f. `pip uninstall`: Use this command to uninstall a third-party library. This should be used cautiously as it may cause dependency issues. If you need to change the version of a package, it is better to use `pip install [package_name]==[version]` instead.
    g. `apt-get update -qq && apt-get install [package]=[version] -y -qq`: Use this command to install system packages if needed, remember to use `-y`. Use `-qq` to minimize the output if there is nothing wrong.
    h. `export <variable>=<value>`: Use this command to set system environment variables.
    i. You can use the `--help` parameter to view detailed usage instructions for various tools, such as `pipdeptree --help` and `pip install --help`, etc.
    j. You may also use other commands that are not listed here, including built-in Bash commands and other system commands.
    *Note*: Always consider the potential impact of each command on the system. Aim to achieve the best results with minimal changes.
    *Note*: For modules not found in the error message, first check if the corresponding module is available in the project folder before proceeding with external downloads. For example, if you encounter an error stating ModuleNotFoundError: No module named 'my_module', check if there is a file named my_module.py in your project directory. If it is not present, then you can look for the module externally and download it if necessary.
    *Note*: Do not use external download tools like `git clone` or `wget` to download a large number of files directly in the /repo folder (or its subdirectories) to avoid causing significant changes to the original repository.
    *Note*: Flexibility: You do not need to complete all configurations in one go. If you are unsure whether the configuration is approximately complete, you can use the `runtest` or `poetryruntest`(When you configured in poetry environment) command. I will check the configured environment and return any error messages. Based on the error messages, you can make further adjustments.
    *Note*: In special cases, if you feel that the Docker environment has become too messy to achieve your goal, you can use `clear_configuration` command to restore it to the initial Python 3.10 environment or `change_python_version` or `change_base_image` and start over.
**Most Important!** You can execute `runtest` or `poetryruntest` anywhere when you decide to test the environment. You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
Please note that when manually using pip, apt-get, poetry, or other tools to download third-party libraries, try to use the `-q` (quiet) mode if available to reduce intermediate progress bar outputs. Additionally, we will help remove more obvious progress bar information to minimize interference with the analysis.
If you need to install packages using pip, please consider adding them to the waiting list first, and then use the `download` command to proceed with the installation.
In each round of the conversation, we will inform you of the commands that have been correctly executed and have changed the state of the current Docker container. Please reflect on each round's Observation in relation to the current state of the Docker container and decide the subsequent Action.
If you need to run two or more commands, please strictly follow the order by enclosing each command in ONE ```bash and ``` blocks connected by "&&" with ONE line! It is not recommended to use backslashes (\) for line continuation. If you need to execute commands that span multiple lines, it is advisable to write them into a .sh file and then run the executable file. For example, if you want to enter the /repo directory and execute `poetry install`, you should input:
```bash
cd /repo && poetry install
```

It is not recommended to directly input:
```bash
cd /repo
```
```bash
poetry install
```

Nor is it recommended to input:
```bash
cd /repo \
poetry install
```

We also strongly request that you try to write the instructions on the same line as much as possible, and do not break them into multiple lines, as this may cause parsing errors. Even if the line of instructions contains a lot of && connections, do not arbitrarily break it into multiple lines.

We will automatically maintain two lists in the background to facilitate the installation and download of third-party libraries. These are:
1. waiting list: Used to store third-party libraries waiting to be downloaded, including both pip and apt libraries. You can use `waitinglist show` to show all items in it.
2. conflict list: Used to store elements with the same name as those in the waiting list but with inconsistent version constraints. You can use `conflictlist show` to show all items in it.
*Note*: you only need to follow the prompts to complete operations on these lists during the running process and can only manipulate them using the provided commands.
*Note*: Before operating waiting list, conflict list, or download commands, you can use waitinglist show or conflictlist show to observe their structure each time.


IN GOOD FORMAT: 
All your answer must contain Thought and Action. 
Calling CLI tools Action using bash block like ```bash  ```. 
Editing and Writing code Action using diff block like ```diff ```.
The command line you generate will be run in the bash sandbox environment, and the running results will be returned to you through the system messages.

IMPORTANT TIPS: 
        * Each round of reply can only contain one ```bash ``` block, which means Each round of your answers contain only *ONE* action!
        * Please submit the first command first, then after receiving the response, you can issue the second command. You are free to use any other bash communication.

You are now in the Docker environment of python:3.10. Please perform all operations within this environment.
CLI TOOLS: You can call CLI tools in  ```bash ... ``` block as Action with a Thought. like:
### Thought: I need to understand the structure of the root directory.
### Action:
```bash
ls /repo
```

For another example:
### Thought: I need to read the README.md file.
### Action:
```bash
cat README.md
```


CODE EDITING AND WRITING: All changes to files must use the ```diff  ```  block format, with symbols <<<<<<< SEARCH, ======= and >>>>>>> REPLACE 

You need to provide code patch. The patch should according to the original code, indent correctly, and do not include line numbers. The format is as follows: 
### Thought: Modify explanation...
### Action: 
```diff 
/absolute/path/of/target.py
<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE

<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE
``` 
Every *SEARCH/REPLACE block must use this format:
1. The opening fence ```diff 
2. The file path alone on a line, verbatim. No bold asterisks, no quotes around it, no escaping of characters, etc.
3. The start of search block: <<<<<<< SEARCH
4. A contiguous chunk of lines to search for in the existing source code
5. The dividing line: =======
6. The lines to replace into the source code
7. The end of the replace block: >>>>>>> REPLACE
8. The closing fence: ``` 
Once you want to modify the code you MUST: 
        * Include *ALL* the code being searched and replaced!
        * Every *SEARCH* section must *EXACTLY MATCH* the existing source code, character for character, including all comments, docstrings, etc.
        * '<<<<<<< SEARCH', '=======' and  '>>>>>>> REPLACE' symbols must be on a line by themselves and cannot be indented.
        * All code modifications must be expressed in the REPLACE format above (including delete an insert). We will find the source code with the highest matching degree in the original file and replace it. Please provide sufficient and unique old line(s) from snippet to facilitate matching.
        * If the code patch you provide is successfully applied, the differences before and after the code modification will be returned.
        * The paths of modified files must be completely absolute paths.
        * Make sure the patch you provide is indented correctly especially in python programs: The indentation of old lines is exactly the same as the original code, and the indentation of new lines is correct.
        * All patches must be based on the original code viewed by the tools, and fabricated code patch(es) is prohibited.
        * Previously successfully applied patches will modify the code, and new patches must be applied based on the current code. Please review the relevant code again then provide new patches.
        * If the old line(s) is empty, it is considered to be inserted at the beginning of the file. If the file does not exist, a new file will be created and the new line will be written. like:
### Thought: Create a.py
### Action:
```diff
/project_path/.../a.py
<<<<<<< SEARCH
=======
    [new line(s) to add]
>>>>>>> REPLACE
```

*Note*: Do not make extensive changes to the existing files in the /repo folder. You may only make appropriate and necessary changes to the original repository files (e.g., when there are actual errors or tests that cannot be run).
*Very Important Note*: Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
In addition to typical bash commands, we also provide the following commands that can be used, you can use them flexibly if needed:
waitinglist add -p package_name [-v version_constraints] -t tool # Add item into waiting list. If no 'version_constraints' are specified, the latest version will be downloaded by default.
waitinglist addfile file_path # Add all entries from a file similar to requirements.txt format to the waiting list.
waitinglist clear # Used to clear all the items in the waiting list.
conflictlist solve -v "[version_cosntraints]" # Resolve the conflict for the first element in the conflict list, and update the version constraints for the corresponding package_name and tool to version_constraints. If no 'version_constraints' are specified, the latest version will be downloaded by default.
conflictlist solve -u # Keep the original version constraint that exists in the waiting list, and discard the other version constraints with the same name and tool in the conflict list.
conflictlist clear # Used to clear all the items in the conflict list.
conflictlist show # Used to show all the items in the conflict list.
waitinglist show # Used to show all the items in the waiting list.
download # Download all pending elements in the waiting list at once.
runtest # Check if the configured environment is correct.
poetryruntest # Check if the configured environment is correct in poetry environment! If you want to run tests in poetry environment, run it.
runpipreqs # Generate 'requirements_pipreqs.txt' and 'pipreqs_output.txt' and 'pipreqs_error.txt'.
change_python_version python_version # Switching the Python version in the Docker container will forgo any installations made prior to the switch. The Python version number should be represented directly with numbers and dots, without any quotation marks.
change_base_image base_image # Switching the base image in the Docker container will forgo any installations made prior to the switch. The base image does not necessarily have to follow the format 'python:<Python version>'. Preferably, specify it in the form of 'base_image_name:tag', such as 'pytorch/pytorch:1.10.0-cuda11.1-cudnn8-runtime'. If no tag is provided, it defaults to 'latest'. No any quotation marks are needed.
clear_configuration # Reset all the configuration to the initial setting of python:3.10.


VERY IMPORTANT TIPS: 
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!

---------------------------
### Thought:
I need to understand the structure of the root directory.

### Action:
```bash
ls /repo
```
### Observation:
Running `ls /repo`...
CHANGELOG.md  Makefile	 docs	      examples	    poetry.lock     scripts
LICENSE       README.md  example.env  neo4j_runway  pyproject.toml  tests
`ls /repo` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 69 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought:
The root directory contains a README.md file which might contain instructions on how to set up the environment. I need to read the README.md file to gather any instructions for environment configuration.

### Action:
```bash
cat /repo/README.md
```
### Observation:
Running `cat /repo/README.md`...
The output is too long, so we've truncated it to show you the first and last 5000 characters.
Running `cat /repo/README.md`...
# Neo4j Runway
Neo4j Runway is a Python library that simplifies the process of migrating your relational data into a graph. It provides tools that abstract communication with OpenAI to run discovery on your data and generate a data model, as well as tools to generate ingestion code and load your data into a Neo4j instance.
<img src="./docs/assets/images/neo4j-runway-logo.webp" width=300 height=400>
## Key Features
- **Data Discovery**: Harness OpenAI LLMs to provide valuable insights from your data
- **Graph Data Modeling**: Utilize OpenAI and the [Instructor](https://github.com/jxnl/instructor) Python library to create valid graph data models
- **Code Generation**: Generate ingestion code to easily load your data
- **Data Ingestion**: Load your data using Runway's built in implementation of [PyIngest](https://github.com/neo4j-field/pyingest) - Neo4j's popular ingestion tool
- **Exploratory Data Analysis**: Run analytics over your graph to discover potential data quality issues
## Requirements
Runway uses Graphviz to visualize data models. To enjoy this feature please download [graphviz](https://www.graphviz.org/download/).
You'll need a Neo4j instance to fully utilize Runway. Start up a free cloud hosted [Aura](https://console.neo4j.io) instance or download the [Neo4j Desktop app](https://neo4j.com/download/).
## Get Running in Minutes
Follow the steps below or check out any of the Neo4j Runway [end-to-end examples](https://github.com/a-s-g93/neo4j-runway/tree/main/examples/end_to_end)
```
pip install neo4j-runway
```
Now let's walk through a basic example.
Here we import the modules we'll be using.
```Python
from neo4j_runway import Discovery, GraphDataModeler, PyIngest, UserInput
from neo4j_runway.code_generation import PyIngestConfigGenerator
from neo4j_runway.llm.openai import OpenAIDiscoveryLLM, OpenAIDataModelingLLM
```
### Discovery
Now we...
- Define a general description of our data
- Provide brief descriptions of the columns of interest
- Provide any use cases we'd like our data model to address
- Load our csv via Runway's `load_local_files` function
```Python
data_directory = "../../../data/countries/"
data_dictionary = {
                'id': 'unique id for a country.',
                'name': 'the country name.',
                'phone_code': 'country area code.',
                'capital': 'the capital of the country.',
                'currency_name': "name of the country's currency.",
                'region': 'primary region of the country.',
                'subregion': 'subregion location of the country.',
                'timezones': 'timezones contained within the country borders.',
                'latitude': 'the latitude coordinate of the country center.',
                'longitude': 'the longitude coordinate of the country center.'
                }
use_cases = [
        "Which region contains the most subregions?",
        "What currencies are most popular?",
        "Which countries share timezones?"
    ]
data = load_local_files(data_directory=data_directory,
                        data_dictionary=data_dictionary,
                        general_description="This is data on countries and their attributes.",
                        use_cases=use_cases,
                        include_files=["countries.csv"])
```
We may also preview our csv data before running any processes
```python
data.tables[0].dataframe.head()
```
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>phone_code</th>
      <th>capital</th>
      <th>currency_name</th>
      <th>region</th>
      <th>subregion</th>
      <th>timezones</th>
      <th>latitude</th>
      <th>longitude</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Afghanistan</td>
      <td>93</td>
      <td>Kabul</td>
      <td>Afghan afghani</td>
      <td>Asia</td>
      <td>Southern Asia</td>
      <td>[{zoneName:'Asia\/Kabul',gmtOffset:16200,gmtOf...</td>
      <td>33.000000</td>
      <td>65.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Aland Islands</td>
      <td>+358-18</td>
      <td>Mariehamn</td>
      <td>Euro</td>
      <td>Europe</td>
      <td>Northern Europe</td>
      <td>[{zoneName:'Europe\/Mariehamn',gmtOffset:7200,...</td>
      <td>60.116667</td>
      <td>19.9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Albania</td>
      <td>355</td>
      <td>Tirana</td>
      <td>Albanian lek</td>
      <td>Europe</td>
      <td>Southern Europe</td>
      <td>[{zoneName:'Europe\/Tirane',gmtOffset:3600,gmt...</td>
      <td>41.000000</td>
      <td>20.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Algeria</td>
      <td>213</td>
      <td>Algiers</td>
      <td>Algerian dinar</td>
      <td>Africa</td>
      <td>Northern Africa</td>
      <td>[{zoneName:'Africa\/Algiers',gmtOffset:3600,gm...</td>
      <td>28.000000</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>American Samoa</td>
      <td>+1-684</td>
      <td>Pago Pago</td>
      <td>US Dollar</td>
      <td>Oceania</td>
      <td>Polynesia</td>
      <td>[{zoneName:'Pacific\/Pago_Pago',gmtOffset:-396...</td>
      <td>-14.333333</td>
      <td>-170.0</td>
    </tr>
  </tbody>
</table>
</div>
We may then initialize our discovery and data modeling LLMs. By default we use GPT-4o and define our OpenAI API key in an environment variable.
```Python
llm_disc = OpenAIDiscoveryLLM(model_name='gpt-4o-mini-2024-07-18', model_params={"temperature": 0})
llm_dm = OpenAIDataModelingLLM(model_name='gpt-4o-2024-05-13', model_params={"temperature": 0.5})
```
And we run discovery on our data.
```Python
disc = Discovery(llm=llm_disc, data=data)disc.run()
disc.run(show_result=True, notebook=True)
```
### Preliminary Analysis of Country Data
#### Overall Data Characteristics:
1. **Data Size**: The datase
...[Truncation]...
taModelingLLM(model_name='gpt-4o-2024-05-13', model_params={"temperature": 0.5})
```
And we run discovery on our data.
```Python
disc = Discovery(llm=llm_disc, data=data)disc.run()
disc.run(show_result=True, notebook=True)
```
### Preliminary Analysis of Country Data
#### Overall Data Characteristics:
1. **Data Size**: The dataset contains 250 entries (countries) and 10 attributes.
2. **Data Types**: The attributes include integers, floats, and objects (strings). The presence of both numerical and categorical data allows for diverse analyses.
3. **Missing Values**:
   - `capital`: 5 missing values (2% of the data)
   - `region`: 2 missing values (0.8% of the data)
   - `subregion`: 3 missing values (1.2% of the data)
   - Other columns have no missing values.
#### Important Features:
1. **id**: Unique identifier for each country. It is uniformly distributed from 1 to 250.
2. **name**: Each country has a unique name, which is crucial for identification.
3. **phone_code**: There are 235 unique phone codes, indicating that some countries share the same code. This could be relevant for understanding regional telecommunications.
4. **capital**: The capital city is a significant attribute, but with 5 missing values, it may require attention during analysis.
5. **currency_name**: There are 161 unique currencies, with the Euro being the most common (35 occurrences). This suggests a potential clustering of countries using the same currency, which could be relevant for economic analyses.
6. **region**: There are 6 unique regions, with Africa having the highest frequency (60 countries). This could indicate a need to explore regional characteristics further.
7. **subregion**: 22 unique subregions exist, with the Caribbean being the most frequent (28 occurrences). This suggests that some regions have more subdivisions than others.
8. **timezones**: The dataset contains 245 unique timezones, indicating that many countries share timezones. This could be useful for understanding global time coordination.
#### Use Case Insights:
1. **Regions and Subregions**: To determine which region contains the most subregions, we can analyze the `region` and `subregion` columns. The region with the highest number of unique subregions will be identified.
2. **Popular Currencies**: The `currency_name` column can be analyzed to find the most frequently occurring currencies, highlighting economic ties between countries.
3. **Shared Timezones**: The `timezones` column can be examined to identify countries that share the same timezone, which may have implications for trade, communication, and travel.
### Conclusion:
The dataset provides a rich source of information about countries, their geographical locations, and economic attributes. The most important features for analysis include `region`, `subregion`, `currency_name`, and `timezones`, as they directly relate to the use cases outlined. Addressing the missing values in `capital`, `region`, and `subregion` will also be essential for a comprehensive analysis.
### Data Modeling
We can now use our Discovery object to provide context to the LLM for data model generation. Notice that we don't need to pass our actual data to the modeler, just insights we've gathered so far.
```Python
gdm = GraphDataModeler(llm=llm_dm, discovery=disc)
```
We may now generate our first graph data model.
```Python
gdm.create_initial_model()
```
If we have graphviz installed, we can take a look at our model.
```Python
gdm.current_model.visualize()
```
![countries-first-model.png](./examples/end_to_end/single_file/countries/images/countries-single-first-model-0.12.0.svg)
Our data model seems to address the three use cases we'd like answered:
* Which region contains the most subregions?
* What currencies are most popular?
* Which countries share timezones?
If we would like the data model modified, we may request the LLM to make changes.
```Python
gdm.iterate_model(corrections="Create a Capital node from the capital property.")
gdm.current_model.visualize()
```
![countries-second-model.png](./examples/end_to_end/single_file/countries/images/countries-single-second-model-0.12.0.svg)
### Code Generation
We can now use our data model to generate some ingestion code.
```Python
gen = PyIngestConfigGenerator(data_model=gdm.current_model,
                         username=os.environ.get("NEO4J_USERNAME"),
                         password=os.environ.get("NEO4J_PASSWORD"),
                         uri=os.environ.get("NEO4J_URI"),
                         database=os.environ.get("NEO4J_DATABASE"),
                         file_directory=data_directory, source_name="countries.csv")
pyingest_yaml = gen.generate_config_string()
```
### Ingestion
We will use the generated PyIngest yaml config to ingest our data into our Neo4j instance.
```Python
PyIngest(config=pyingest_yaml, verbose=False)
```
We can also save this as a .yaml file and use with the original [PyIngest](https://github.com/neo4j-field/pyingest).
```Python
gen.generate_config_yaml(file_name="countries.yaml")
```
Here's a snapshot of our new graph!
![countries-graph.png](./examples/end_to_end/single_file/countries/images/countries-single-0.12.0.png)
## Graph Exploratory Data Analysis
Runway offers a module for easily running analyics over an existing graph to gain insights such as finding isolated nodes and ranking top node degrees.
Check [here](./examples/exploratory_data_analysis/stackoverflow/stackoverflow_graph_eda.ipynb) for an example of Runway's `GraphEDA` module.
## Limitations
Runway is currently in beta and under rapid development. Please raise GitHub issues and provide feedback on any features you'd like. The following are some of the current limitations:
- More complex data modeling is under development
- Nodes may only have a single label
- Only uniqueness and key constraints are supported
- Only OpenAI models may be used at this time
- Runway only supports ingesting local files, though it supports code generation for other ingest methods
`cat /repo/README.md` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 68 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought:
The README file indicates that the primary dependency for this project is the `neo4j-runway` package, which can be installed using pip. Additionally, the project might require dependencies listed in `pyproject.toml` and `poetry.lock`.

Given the files present, I should first check the contents of the `pyproject.toml` and `poetry.lock` files to understand the dependencies managed by poetry.

### Action:
```bash
cat /repo/pyproject.toml
```
### Observation:
Running `cat /repo/pyproject.toml`...
[tool.poetry]
name = "neo4j-runway"
version = "0.14.0"
description = "A Python library that contains tools for data discovery, data model generation and ingestion for the Neo4j graph database."
authors = ["Alex Gilmore", "Jason Booth", "Dan Bukowski"]
license = "Apache License, Version 2.0"
readme = "README.md"
keywords = ["graph", "neo4j", "data model"]
classifiers = [
    "Development Status :: 4 - Beta",
    'Intended Audience :: Developers',
    'Operating System :: OS Independent',
    'License :: OSI Approved :: Apache Software License',
    'Programming Language :: Python',
    'Topic :: Software Development :: Libraries :: Python Modules',
    "Programming Language :: Python :: 3",
    "Topic :: Database",
]
exclude = ["tests/*", "images/*", "test.ipynb", "data/", "Makefile", "scripts/*", "notebooks/*"]
[[tool.poetry.packages]]
include = "neo4j_runway"
[tool.poetry.dependencies]
graphviz = "^0.20.1"
instructor = "1.5.2"
ipython = "^8.24.0"
neo4j = "^5.19.0"
nest_asyncio = "^1.6.0"
numpy = "^1.26.3"
openai = "^1.12.0"
pandas = "^2.0.3"
pydantic = "^2.6.1"
python = "^3.10"
pyyaml = "^6.0.1"
regex = "~2024"
tabulate = "^0.9.0"
[tool.poetry.group.dev.dependencies]
coverage = "^7.4.3"
ipykernel = "^6.29.5"
mypy = "^1.10.0"
nbconvert= "^7.16.4"
pre-commit = { version = "^3.6.2", python = "^3.10" }
pytest = "^8.3.2"
pytest-mock = "^3.12.0"
python-dotenv = "^1.0.1"
ruff = "^0.3.0"
toml = "^0.10.2"
types-PyYAML = "^6.0.12.20240724"
[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
disallow_untyped_calls = false
exclude = ["docs", "tests", "scripts", "neo4j_runway/code_generation/generate_ingest.py", "neo4j_runway/llm/base.py"]
[tool.ruff]
target-version = "py310"
show-fixes = true
[tool.coverage.paths]
source = ["neo4j_runway"]
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
`cat /repo/pyproject.toml` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 67 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought:
The `pyproject.toml` file provides a comprehensive list of dependencies for this project, managed by poetry. To efficiently configure the environment, I need to install poetry and then use `poetry install` to install all necessary dependencies specified in the `pyproject.toml` file.

### Action:
```bash
cd /repo && poetry install
```
### Observation:
Running `cd /repo`...
`cd /repo` executes with returncode: 0
Running `poetry install`...
  [32;1m-[39;22m [39mInstalling [39m[36mtoml[39m[39m ([39m[32m0.10.2[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtypes-pyyaml[39m[39m ([39m[32m6.0.12.20240917[39m[39m)[39m
[9A[0J  [32;1m-[39;22m [39mInstalling [39m[36mpre-commit[39m[39m ([39m[32m3.8.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpytest-mock[39m[39m ([39m[32m3.14.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpython-dotenv[39m[39m ([39m[32m1.0.1[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mregex[39m[39m ([39m[32m2024.9.11[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mruff[39m[39m ([39m[32m0.3.7[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtabulate[39m[39m ([39m[32m0.9.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtoml[39m[39m ([39m[32m0.10.2[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtypes-pyyaml[39m[39m ([39m[32m6.0.12.20240917[39m[39m)[39m
[8A[0J  [32;1m-[39;22m [39mInstalling [39m[36mpandas[39m[39m ([39m[32m2.2.3[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpre-commit[39m[39m ([39m[32m3.8.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpytest-mock[39m[39m ([39m[32m3.14.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mpython-dotenv[39m[39m ([39m[32m1.0.1[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mregex[39m[39m ([39m[32m2024.9.11[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mruff[39m[39m ([39m[32m0.3.7[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtabulate[39m[39m ([39m[32m0.9.0[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtoml[39m[39m ([39m[32m0.10.2[39m[39m)[39m
  [32;1m-[39;22m [39mInstalling [39m[36mtypes-pyyaml[39m[39m ([39m[32m6.0.12.20240917[39m[39m)[39m
[39;1mInstalling[39;22m the current project: [36mneo4j-runway[39m ([39;1m0.14.0[39;22m)[1G[2K[39;1mInstalling[39;22m the current project: [36mneo4j-runway[39m ([32m0.14.0[39m)
`poetry install` executes with returncode: 0

[Current directory]:
/repo
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 66 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
cd /repo && poetry install
---------------------------
### Thought:
The dependencies have been successfully installed using poetry. Now, I will proceed to run the tests to check if the configuration is correct and everything is set up properly.

### Action:
```bash
poetryruntest
```
Congratulations, you have successfully configured the environment!
neo4j_runway/utils/test_connection.py::test_database_connection
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_address_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_constraints_present
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_person_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_person_to_address_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_person_to_pet_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_pet_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_pet_to_toy_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_IT.py::TestLoadCSVViaAPI::test_toy_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_address_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_constraints_present
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_person_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_person_to_address_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_person_to_pet_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_pet_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_pet_to_shelter_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_pet_to_toy_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_shelter_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_IT.py::TestLoadCSVViaAPIWithMultiCSV::test_toy_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_address_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_constraints_present
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_person_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_person_to_address_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_person_to_person_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_person_to_pet_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_pet_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_pet_to_shelter_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_pet_to_toy_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_shelter_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_shelter_to_address_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_multi_csv_and_same_node_rel_IT.py::TestLoadCSVViaAPIWithMultiCSVAndSameNodeRelationship::test_toy_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_address_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_constraints_present
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_person_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_person_to_address_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_person_to_person_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_person_to_pet_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_pet_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_pet_to_shelter_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_pet_to_toy_relationship_counts
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_shelter_node_count
tests/integration/code_generation/load_csv/test_load_csv_via_api_node_keys_IT.py::TestLoadCSVViaAPIWithNodeKeys::test_toy_node_count
tests/integration/database/test_neo4j_graph_IT.py::TestNeo4jGraph::test_apoc_version
tests/integration/database/test_neo4j_graph_IT.py::TestNeo4jGraph::test_database_version_and_edition
tests/integration/database/test_neo4j_graph_IT.py::TestNeo4jGraph::test_init_with_provided_creds
tests/integration/database/test_neo4j_graph_IT.py::TestNeo4jGraph::test_init_without_creds
tests/integration/database/test_neo4j_graph_IT.py::TestNeo4jGraph::test_schema
tests/integration/database/test_neo4j_graph_IT.py::TestNeo4jGraph::test_verify
tests/integration/discovery/test_discovery_IT.py::test_single_table_run
tests/integration/discovery/test_discovery_IT.py::test_multi_file_run
tests/integration/discovery/test_discovery_async_IT.py::test_single_table_run
tests/integration/discovery/test_discovery_async_IT.py::test_multi_file_run
tests/integration/discovery/test_discovery_content_IT.py::test_write_markdown
tests/integration/discovery/test_discovery_content_IT.py::test_write_txt
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_txt_all
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_markdown_all
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_txt_final
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_markdown_final
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_txt_file
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_markdown_file
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_txt_raise_error_no_file
tests/integration/discovery/test_discovery_file_writes_IT.py::test_write_markdown_raise_error_no_file
tests/integration/discovery/test_discovery_pandas_only_IT.py::test_single_dataframe_run_pandas_only
tests/integration/discovery/test_discovery_pandas_only_IT.py::test_single_table_run_pandas_only
tests/integration/discovery/test_discovery_pandas_only_IT.py::test_multi_file_run_pandas_only
tests/integration/graph_eda/test_queries.py::test_get_database_indexes
tests/integration/graph_eda/test_queries.py::test_get_database_contraints
tests/integration/graph_eda/test_queries.py::test_get_disconnected_node_count
tests/integration/graph_eda/test_queries.py::test_get_disconnected_node_count_by_label
tests/integration/graph_eda/test_queries.py::test_get_disconnected_node_ids
tests/integration/graph_eda/test_queries.py::test_get_multi_label_node_counts
tests/integration/graph_eda/test_queries.py::test_get_node_count
tests/integration/graph_eda/test_queries.py::test_get_node_degrees
tests/integration/graph_eda/test_queries.py::test_get_node_label_counts
tests/integration/graph_eda/test_queries.py::test_get_node_properties
tests/integration/graph_eda/test_queries.py::test_get_relationship_count
tests/integration/graph_eda/test_queries.py::test_get_relationship_properties
tests/integration/graph_eda/test_queries.py::test_get_relationship_type_counts
tests/integration/graph_eda/test_queries.py::test_get_unlabeled_node_count
tests/integration/graph_eda/test_queries.py::test_get_unlabeled_node_ids
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_address_node_count
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_constraints_present
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_person_node_count
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_person_to_address_relationship_counts
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_person_to_person_relationship_counts
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_person_to_pet_relationship_counts
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_pet_node_count
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_pet_to_toy_relationship_counts
tests/integration/ingestion/test_pyingest_dataframe_IT.py::TestPyIngestLoadDataFrame::test_toy_node_count
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_address_node_count
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_constraints_present
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_person_node_count
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_person_to_address_relationship_counts
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_person_to_person_relationship_counts
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_person_to_pet_relationship_counts
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_pet_node_count
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_pet_to_shelter_relationship_counts
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_pet_to_toy_relationship_counts
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_shelter_node_count
tests/integration/ingestion/test_pyingest_multi_csv_IT.py::TestPyIngestLoadMultiCSV::test_toy_node_count
tests/integration/ingestion/test_pyingest_post_ingestion_IT.py::TestPyIngestPostIngestion::test_test_node2_present
tests/integration/ingestion/test_pyingest_post_ingestion_IT.py::TestPyIngestPostIngestion::test_test_node_present
tests/integration/modeler/test_data_modeler_with_yaml_IT.py::test_generate_model_with_yaml_input
tests/integration/utils/data/test_table_collection_IT.py::test_write_markdown
tests/integration/utils/data/test_table_collection_IT.py::test_write_txt
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_bool
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_date
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_datetime
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_float
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_integer
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_no_type
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_point
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_time
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_cast_value_multi_column_mapping
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_constraint
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_constraints_key
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_match_node_clause
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_match_same_labels_different_csv_mapping
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_merge_node_clause_standard
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_merge_node_load_csv_clause
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_merge_relationship_clause_standard
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_merge_relationship_clause_standard_with_same_node
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_merge_relationship_load_csv_clause
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_node_key_constraint
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_relationship_key_constraint
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_relationship_with_nodes_different_source_files
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_set_property
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_generate_set_unique_property
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_odd_characters_in_column_name
tests/unit/code_generation/cypher/test_cypher_generation.py::TestIngestCodeGeneration::test_space_in_column_name
tests/unit/code_generation/cypher/test_cypher_generation_class.py::test_cypher_generation
tests/unit/code_generation/cypher/test_cypher_generation_class.py::test_constraints_generation
tests/unit/code_generation/load_csv/test_load_csv_generation.py::test_generation
tests/unit/code_generation/pyingest/test_pyingest_generation_multi_csv.py::TestPyIngestGenerationMultiCSV::test_code_generation_for_multi_csv
tests/unit/code_generation/pyingest/test_pyingest_generation_wht_params.py::TestPyIngestGenerationWithParams::test_code_generation_for_multi_csv
tests/unit/code_generation/pyingest/test_pyingest_generation_with_params.py::TestPyIngestGenerationWithParams::test_code_generation_for_multi_csv
tests/unit/code_generation/pyingest/test_pyingest_post_ingest_input.py::TestIngestPostIngestInput::test_post_ingest_generation_from_cql_file
tests/unit/code_generation/pyingest/test_pyingest_post_ingest_input.py::TestIngestPostIngestInput::test_post_ingest_generation_from_cypher_file
tests/unit/code_generation/pyingest/test_pyingest_post_ingest_input.py::TestIngestPostIngestInput::test_post_ingest_generation_from_list
tests/unit/code_generation/pyingest/test_pyingest_post_ingest_input.py::TestIngestPostIngestInput::test_post_ingest_generation_from_string_a
tests/unit/code_generation/pyingest/test_pyingest_post_ingest_input.py::TestIngestPostIngestInput::test_post_ingest_generation_from_string_b
tests/unit/code_generation/pyingest/test_pyingest_pre_ingest_input.py::TestIngestPreIngestInput::test_pre_ingest_generation_from_cql_file
tests/unit/code_generation/pyingest/test_pyingest_pre_ingest_input.py::TestIngestPreIngestInput::test_pre_ingest_generation_from_cypher_file
tests/unit/code_generation/pyingest/test_pyingest_pre_ingest_input.py::TestIngestPreIngestInput::test_pre_ingest_generation_from_list
tests/unit/code_generation/pyingest/test_pyingest_pre_ingest_input.py::TestIngestPreIngestInput::test_pre_ingest_generation_from_string_a
tests/unit/code_generation/pyingest/test_pyingest_pre_ingest_input.py::TestIngestPreIngestInput::test_pre_ingest_generation_from_string_b
tests/unit/code_generation/standard/test_standard_code_generator.py::TestStandardCypherCodeGeneration::test_constraints_string_generation
tests/unit/code_generation/standard/test_standard_code_generator.py::TestStandardCypherCodeGeneration::test_cypher_string_generation
tests/unit/code_generation/standard/test_standard_code_generator.py::TestStandardCypherCodeGeneration::test_write_constraints_file
tests/unit/code_generation/standard/test_standard_code_generator.py::TestStandardCypherCodeGeneration::test_write_cypher_file
tests/unit/discovery/test_discovery_content.py::test_init
tests/unit/discovery/test_discovery_content.py::test_str_dunder
tests/unit/discovery/test_discovery_multi_files.py::test_multi_file_init_table_collection
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_batch
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_bulk
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_bulk_ignore_files
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_custom
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_num_calls_same_as_file_count
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_num_calls_more_than_file_count
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_num_calls_less_than_file_count
tests/unit/discovery/test_discovery_multi_files.py::test_create_discovery_prompts_for_multi_file_num_calls_less_than_zero
tests/unit/discovery/test_discovery_multi_files.py::test_generate_data_summaries
tests/unit/discovery/test_discovery_multi_files.py::test_run_pandas_only
tests/unit/discovery/test_discovery_multi_files.py::test_run_llm_call_custom
tests/unit/discovery/test_discovery_multi_files.py::test_run_llm_call_bulk
tests/unit/discovery/test_discovery_multi_files.py::test_run_llm_call_num_calls
tests/unit/discovery/test_discovery_multi_files.py::test_run_llm_call_batch
tests/unit/discovery/test_discovery_multi_files.py::test_run_async_llm_call_custom
tests/unit/discovery/test_discovery_multi_files.py::test_run_async_llm_call_bulk
tests/unit/discovery/test_discovery_multi_files.py::test_run_async_llm_call_num_calls
tests/unit/discovery/test_discovery_multi_files.py::test_run_async_llm_call_batch
tests/unit/discovery/test_discovery_multi_files.py::test_raise_error_with_non_async_llm_and_async_run
tests/unit/discovery/test_discovery_multi_files.py::test_raise_error_with_async_llm_and_run
tests/unit/discovery/test_discovery_single_files.py::TestDiscovery::test_init_with_no_desired_columns_dataframe
tests/unit/discovery/test_discovery_single_files.py::TestDiscovery::test_init_with_no_desired_columns_table
tests/unit/discovery/test_discovery_single_files.py::TestDiscovery::test_init_with_table
tests/unit/discovery/test_discovery_single_files.py::TestDiscovery::test_initialized_variables
tests/unit/discovery/test_discovery_single_files.py::TestDiscovery::test_pandas_only_single_file_dataframe
tests/unit/discovery/test_discovery_single_files.py::TestDiscovery::test_view_discovery_no_notebook
tests/unit/discovery/test_discovery_single_files.py::TestDiscovery::test_view_discovery_with_notebook
tests/unit/graph_eda/test_graph_eda.py::test_database_constraints
tests/unit/graph_eda/test_graph_eda.py::test_run_include
tests/unit/graph_eda/test_graph_eda.py::test_run_exclude
tests/unit/graph_eda/test_graph_eda.py::test_run_include_and_exclude
tests/unit/graph_eda/test_graph_eda.py::test_run_with_method_params
tests/unit/inputs/test_user_input.py::TestUserInput::test_bad_col_description
tests/unit/inputs/test_user_input.py::TestUserInput::test_empty_col_description
tests/unit/inputs/test_user_input.py::TestUserInput::test_is_multifile_false
tests/unit/inputs/test_user_input.py::TestUserInput::test_is_multifile_true
tests/unit/inputs/test_user_input.py::TestUserInput::test_no_general_description
tests/unit/inputs/test_user_input.py::TestUserInput::test_unsafe_construction_columns_not_found_in_allowed_list
tests/unit/inputs/test_user_input.py::TestUserInput::test_unsafe_construction_no_general_description
tests/unit/llm/test_context.py::test_create_context_full_input
tests/unit/llm/test_context.py::test_create_context_no_allowed_columns
tests/unit/llm/test_context.py::test_create_context_data_dictionary_only
tests/unit/llm/test_context.py::test_init_context_with_dictionary_instead_of_data_dictionary_object
tests/unit/modeler/test_data_modeler_init.py::test_init_data_dictionary_only
tests/unit/modeler/test_data_modeler_init.py::test_init_user_input_dd_only
tests/unit/modeler/test_data_modeler_init.py::test_init_user_input_full_only
tests/unit/modeler/test_data_modeler_init.py::test_init_user_input_dict_only
tests/unit/modeler/test_data_modeler_init.py::test_init_dd_and_allowed_columns
tests/unit/modeler/test_data_modeler_init.py::test_init_dd_and_user_input_dd
tests/unit/modeler/test_data_modeler_init.py::test_init_dd_and_user_input_dict
tests/unit/modeler/test_data_modeler_init.py::test_init_allowed_columns_and_user_input_dd
tests/unit/modeler/test_data_modeler_init.py::test_init_allowed_columns_and_user_input_full
tests/unit/modeler/test_data_modeler_init.py::test_init_allowed_columns_and_user_input_dict
tests/unit/modeler/test_data_modeler_llm_calls.py::test_create_initial_model
tests/unit/modeler/test_data_modeler_llm_calls.py::test_iterate_model
tests/unit/modeler/test_data_modeler_multi_files.py::test_multifile_data_dictionary_init_allowed_columns
tests/unit/modeler/test_data_modeler_multi_files.py::test_is_multifile_true
tests/unit/modeler/test_data_modeler_multi_files.py::test_is_multifile_false_no_named_file
tests/unit/modeler/test_data_modeler_multi_files.py::test_is_multifile_false_with_named_file
tests/unit/modeler/test_data_modeler_multi_files.py::test_allowed_columns
tests/unit/modeler/test_data_modeler_single_files.py::TestGraphDataModeler::test_current_model_viz
tests/unit/modeler/test_data_modeler_single_files.py::TestGraphDataModeler::test_discovery_warning
tests/unit/modeler/test_data_modeler_single_files.py::TestGraphDataModeler::test_get_model
tests/unit/modeler/test_data_modeler_single_files.py::TestGraphDataModeler::test_iterate_model
tests/unit/modeler/test_data_modeler_single_files.py::TestGraphDataModeler::test_load_model
tests/unit/modeler/test_data_modeler_single_files.py::TestGraphDataModeler::test_no_discovery_no_data_dictionary
tests/unit/models/arrows/test_arrows_data_model.py::TestDataModel::test_arrows_init
tests/unit/models/arrows/test_arrows_data_model.py::TestDataModel::test_json_generation
tests/unit/models/core/test_data_model.py::test_bad_init
tests/unit/models/core/test_data_model.py::test_good_init
tests/unit/models/core/test_data_model.py::test_to_dict
tests/unit/models/core/test_data_model.py::test_neo4j_naming_conventions_used
tests/unit/models/core/test_data_model.py::test_neo4j_naming_conventions_ignored
tests/unit/models/core/test_data_model.py::test_from_arrows_init
tests/unit/models/core/test_data_model.py::test_to_yaml_string
tests/unit/models/core/test_data_model.py::test_data_model_with_multi_csv_from_arrows
tests/unit/models/core/test_data_model.py::test_data_model_with_multi_csv_from_solutions_workbench
tests/unit/models/core/test_data_model_validation.py::test_multi_file_different_source_relationship_valid_source_node
tests/unit/models/core/test_data_model_validation.py::test_multi_file_different_source_relationship_valid_target_node
tests/unit/models/core/test_data_model_validation.py::test_multi_file_different_source_relationship_invalid
tests/unit/models/core/test_data_model_validation.py::test_allow_duplicate_properties_true
tests/unit/models/core/test_data_model_validation.py::test_allow_duplicate_properties_false
tests/unit/models/core/test_data_model_validation.py::test_node_field_validator_error
tests/unit/models/core/test_data_model_validation.py::test_node_model_validator_error
tests/unit/models/core/test_data_model_validation.py::test_relationship_field_validator_error
tests/unit/models/core/test_data_model_validation.py::test_relationship_model_validator_error
tests/unit/models/core/test_data_model_validation.py::test_node_property_field_validator_error
tests/unit/models/core/test_data_model_validation.py::test_allow_parallel_relationships_same_direction
tests/unit/models/core/test_data_model_validation.py::test_allow_parallel_relationships_opposite_direction
tests/unit/models/core/test_data_model_validation.py::test_ignore_parallel_relationships
tests/unit/models/core/test_node.py::TestNode::test_from_arrows
tests/unit/models/core/test_node.py::TestNode::test_from_arrows_with_ignored_property
tests/unit/models/core/test_node.py::TestNode::test_init
tests/unit/models/core/test_node.py::TestNode::test_properties
tests/unit/models/core/test_node.py::TestNode::test_property_column_mapping
tests/unit/models/core/test_node.py::TestNode::test_unique_properties
tests/unit/models/core/test_node.py::TestNode::test_unique_properties_column_mapping
tests/unit/models/core/test_node_validation.py::test_validate_wrong_source_file_name_multifile
tests/unit/models/core/test_node_validation.py::test_validate_wrong_source_file_name_singlefile
tests/unit/models/core/test_node_validation.py::test_enforce_uniqueness_pass
tests/unit/models/core/test_node_validation.py::test_enforce_uniqueness_fail
tests/unit/models/core/test_node_validation.py::test_validate_property_mappings_one_prop
tests/unit/models/core/test_node_validation.py::test_validate_property_mappings_two_props
tests/unit/models/core/test_node_validation.py::test_wrong_source_file_and_wrong_attr_type
tests/unit/models/core/test_node_validation.py::test_missing_enforce_uniqueness_context
tests/unit/models/core/test_node_validation.py::test_missing_valid_columns_context
tests/unit/models/core/test_node_validation.py::test_no_context
tests/unit/models/core/test_node_validation.py::test_no_context_standard_init
tests/unit/models/core/test_property.py::TestProperty::test_bad_type
tests/unit/models/core/test_property.py::TestProperty::test_float_type
tests/unit/models/core/test_property.py::TestProperty::test_init
tests/unit/models/core/test_property.py::TestProperty::test_init_with_neo4j_type
tests/unit/models/core/test_property.py::TestProperty::test_neo4j_properties
tests/unit/models/core/test_property.py::TestProperty::test_parse_arrows_property
tests/unit/models/core/test_property.py::TestProperty::test_to_dict
tests/unit/models/core/test_property_validation.py::test_unique_and_node_key
tests/unit/models/core/test_relationship.py::TestRelationship::test_from_arrows
tests/unit/models/core/test_relationship.py::TestRelationship::test_init
tests/unit/models/core/test_relationship.py::TestRelationship::test_properties
tests/unit/models/core/test_relationship.py::TestRelationship::test_property_column_mapping
tests/unit/models/core/test_relationship.py::TestRelationship::test_unique_properties
tests/unit/models/core/test_relationship.py::TestRelationship::test_unique_properties_column_mapping
tests/unit/models/core/test_relationship_validation.py::test_validate_wrong_source_file_name_multifile
tests/unit/models/core/test_relationship_validation.py::test_validate_wrong_source_file_name_singlefile
tests/unit/models/core/test_relationship_validation.py::test_enforce_uniqueness_pass
tests/unit/models/core/test_relationship_validation.py::test_validate_property_mappings_one_prop
tests/unit/models/core/test_relationship_validation.py::test_validate_property_mappings_two_props
tests/unit/models/core/test_relationship_validation.py::test_missing_valid_columns_context
tests/unit/models/core/test_relationship_validation.py::test_no_context
tests/unit/models/core/test_relationship_validation.py::test_no_context_standard_init
tests/unit/models/solutions_workbench/test_solutions_workbench_data_model.py::TestSolutionsWorkbenchDataModel::test_core_to_solutions_workbench_data_model
tests/unit/models/solutions_workbench/test_solutions_workbench_data_model.py::TestSolutionsWorkbenchDataModel::test_json_output
tests/unit/models/solutions_workbench/test_solutions_workbench_data_model.py::TestSolutionsWorkbenchDataModel::test_solutions_workbench_to_core_data_model
tests/unit/models/solutions_workbench/test_solutions_workbench_node.py::TestSolutionsWorkbenchNode::test_init_from_core_node
tests/unit/models/solutions_workbench/test_solutions_workbench_node.py::TestSolutionsWorkbenchNode::test_init_from_json
tests/unit/models/solutions_workbench/test_solutions_workbench_node.py::TestSolutionsWorkbenchNode::test_init_to_core_node
tests/unit/models/solutions_workbench/test_solutions_workbench_property.py::TestSolutionsWorkbenchProperty::test_init_from_core_property
tests/unit/models/solutions_workbench/test_solutions_workbench_property.py::TestSolutionsWorkbenchProperty::test_init_from_core_property_of_type_list
tests/unit/models/solutions_workbench/test_solutions_workbench_property.py::TestSolutionsWorkbenchProperty::test_init_from_core_property_with_multi_mapping
tests/unit/models/solutions_workbench/test_solutions_workbench_property.py::TestSolutionsWorkbenchProperty::test_init_from_json
tests/unit/models/solutions_workbench/test_solutions_workbench_property.py::TestSolutionsWorkbenchProperty::test_init_to_core_property
tests/unit/models/solutions_workbench/test_solutions_workbench_property.py::TestSolutionsWorkbenchProperty::test_init_to_core_property_with_multi_mapping
tests/unit/models/solutions_workbench/test_solutions_workbench_relationship.py::TestSolutionsWorkbenchRelationship::test_init_from_core_relationship
tests/unit/models/solutions_workbench/test_solutions_workbench_relationship.py::TestSolutionsWorkbenchRelationship::test_init_from_json
tests/unit/models/solutions_workbench/test_solutions_workbench_relationship.py::TestSolutionsWorkbenchRelationship::test_init_to_core_relationship
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_data_dictionary_formatter_multifile
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_data_dictionary_formatter_singlefile
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_data_model_formatter_with_yaml
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_data_formatter_without_yaml
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_discovery_formatter
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_entity_pool_formatter
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_error_formatter
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_use_cases_formatter
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_user_corrections_formatter
tests/unit/resources/prompts/data_modeling/test_formatter.py::test_valid_columns_formatter
tests/unit/utils/_utils/test_dictionary.py::test_get_dictionary_depth_equals_1
tests/unit/utils/_utils/test_dictionary.py::test_get_dictionary_depth_equals_2
tests/unit/utils/_utils/test_dictionary.py::test_get_dictionary_depth_equals_3
tests/unit/utils/data/data_dictionary/test_column.py::test_init_name_only
tests/unit/utils/data/data_dictionary/test_column.py::test_init_primary_and_foreign_key
tests/unit/utils/data/data_dictionary/test_column.py::test_init_invalid_python_type
tests/unit/utils/data/data_dictionary/test_column.py::test_init_nullable_and_primary_key
tests/unit/utils/data/data_dictionary/test_column.py::test_init_nullable_and_foreign_key
tests/unit/utils/data/data_dictionary/test_column.py::test_init_valid_aliases
tests/unit/utils/data/data_dictionary/test_column.py::test_init_invalid_aliases
tests/unit/utils/data/data_dictionary/test_column.py::test_init_aliases_no_context
tests/unit/utils/data/data_dictionary/test_column.py::test_compact_dict_with_ignore
tests/unit/utils/data/data_dictionary/test_column.py::test_compact_dict_with_aliases
tests/unit/utils/data/data_dictionary/test_data_dictionary.py::test_init_with_context
tests/unit/utils/data/data_dictionary/test_data_dictionary.py::test_compact_dict
tests/unit/utils/data/data_dictionary/test_data_dictionary.py::test_is_multifile_true
tests/unit/utils/data/data_dictionary/test_data_dictionary.py::test_is_multifile_false
tests/unit/utils/data/data_dictionary/test_data_dictionary_utils.py::test_multi_file_yaml_compact_dict
tests/unit/utils/data/data_dictionary/test_data_dictionary_utils.py::test_single_file_yaml_compact_dict
tests/unit/utils/data/data_dictionary/test_data_dictionary_utils.py::test_single_file_with_file_name_python_dict
tests/unit/utils/data/data_dictionary/test_data_dictionary_utils.py::test_single_file_without_file_name_python_dict
tests/unit/utils/data/data_dictionary/test_data_dictionary_utils.py::test_multi_file_python_dict
tests/unit/utils/data/data_dictionary/test_data_dictionary_utils.py::test_table_schema_with_file_name_python_dict
tests/unit/utils/data/data_dictionary/test_data_dictionary_utils.py::test_table_schema_without_file_name_python_dict
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_init_good_no_validation_context
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_init_good_with_validation_context
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_init_many_primary_key_columns
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_column_names
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_primary_key
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_primary_key_not_present
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_foreign_keys
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_foreign_keys_empty
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_compact_dict
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_get_column_exists
tests/unit/utils/data/data_dictionary/test_table_schema.py::test_get_column_not_exists
tests/unit/utils/data/test_data_loader.py::test_load_csv_local
tests/unit/utils/data/test_data_loader.py::test_load_json_local
tests/unit/utils/data/test_data_loader.py::test_load_jsonl_local
tests/unit/utils/data/test_data_loader.py::test_load_csv_with_config
tests/unit/utils/data/test_data_loader.py::test_load_csv_bad_table_schema
tests/unit/utils/data/test_data_loader.py::test_load_json_bad_table_schema
tests/unit/utils/data/test_data_loader.py::test_check_files_good_input
tests/unit/utils/data/test_data_loader.py::test_check_files_bad_input
tests/unit/utils/data/test_data_loader.py::test_load_local_files_with_ignored
tests/unit/utils/data/test_data_loader.py::test_load_local_files_with_included
tests/unit/utils/data/test_data_loader.py::test_load_local_files_with_included_and_ignored
tests/unit/utils/data/test_table.py::test_init
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_empty_input_is_case
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_fix_node_label
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_fix_property
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_fix_relationship_type
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_is_camel_case
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_is_mixed_case
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_is_pascal_case
tests/unit/utils/test_naming_conventions.py::TestNamingConventions::test_is_snake_case

363 tests collected in 18.56s
Container 5d42ad8e2c07 stopped and removed
Spend totally 446.0880084037781.
