groq/groq-python
fa2e13b5747d18aeb478700f1e5426af2fd087a1
Container priceless_engelbart b7cf2f5e3c68 started with image build_env_python:3.10
************** configuration **************
You are an expert skilled in environment configuration. You can refer to various files and structures in the repository such as `requirements.txt`, `setup.py`, etc., and use dependency prediction tools like pipreqs to install and download the corresponding third-party libraries in a given Docker image. This ensures that the repository can be successfully configured and able to correctly execute the specified tests.
* Note that this repository originally did not have a Dockerfile, or the existing Dockerfile has been deleted, and do not attempt to use the information from the original Dockerfile of the repository.*

* We have already configured poetry, pipdeptree, and pytest for you; no additional configuration is needed. However, you cannot directly invoke pytest; you need to run tests using `runtest` or `poetryruntest`.

WORK PROCESS:
1. **Read Directory Structure**: Check the folder structure in the root directory, focusing on the configuration files related to setting up the environment.
2. **Determine Python Version**: Decide if you need to switch the Python version in the Docker container. The current version is python:3.10. If you want to switch the Python version, please run the `change_python_version python_version` command, where python_version is the Python version number (for example, `change_python_version 3.9`), and you do not need to add quotation marks. If you do not need to make any changes, please ignore this step. You can also run these commands at any point later during the environment configuration to switch the Python version.
    *Note*: You can only switch the Python version within the container; switching to other images is not allowed.
3. **Check the configuration files in the root directory**: Read configuration files related to setting up the environment, such as: Information in the `.github` folder, `setup.py`, `setup.cfg`, `Pipfile` and `Pipfile.lock`, `environment.yml`, `poetry.lock` and `pyproject.toml`, etc.
3.5 **Try testing (optional)**: Using `runtest` command to check if it is possible to pass the tests directly without any additional configuration.
4. **Review Additional Files**: Consider other potential files and structures for environment configuration.
5. **Automatically install according to the installation script**: Based on the observed structure in the root directory, determine the necessary installation commands:
    a. Poetry Detected: If a poetry.lock file is present in the root directory, Install Poetry using the relevant method for your system. Execute the command `poetry install` to install the dependencies specified in the lock file.
    b. Setup.py Detected: If a setup.py file exists in the root directory, run the command `pip install -e .` to install the package in editable mode along with its dependencies.
    c. Other Descriptor Files: For other specific files that indicate dependency management, assess and determine the appropriate method to install the required dependencies.
    *Note*: We only consider automatically installation script in the repository. Do not consider `requirements.txt` directly in this step!
6. **Collecting Third-Party Library Download List**: In this step, you need to locate all files in the root directory that list dependencies line by line, such as `requirements.txt`, `requirements_dev.txt`, etc. Use a command like `queue_file /repo/requirements.txt` to submit them to the download list. I will handle the unified downloading later.
    If you have determined the path to the requirements file, please enter `waitinglist addfile` followed by the path to the requirements file. For example, `waitinglist addfile /repo/requirements.txt`.
    *Note*: The files you collect must follow the standard requirements.txt format. Do not collect files in any other formats. For instance, if you are unsure about the format of `/repo/requirements_test.txt`, you can use the command `cat /repo/requirements_test.txt` to read the file contents and ensure the file fully meets the requirements before submitting it. If no such dependency-listing files are found, you may skip this step.
    *Note*: In a standard requirements.txt file, each valid entry on a line consists of package_name followed by version_constraints (if there are no version_constraints, the latest version is implied). For example: "numpy==2.1", "numpy>2.0,<3.0", "numpy" (implies the latest version).
    *Note*: We will not collect items that are improperly formatted.
7. **Using pipreqs to Obtain Additional Lists**: In this step, you should use `runpipreqs` to analyze the third-party libraries that need to be installed based on the findings of the previous step. Simply use the command `get pipreqs`, and it will generate a `requirements_pipreqs.txt` file in the project root directory (/repo) and show you the warnings and errors.
    *Note*: If you have already collected some requirements.txt files in Step 5, you do not need to execute `runpipreqs` in this step. Avoid collecting too many dependencies repeatedly. You can directly execute `download` after handling conflicts and formatting errors. If errors occur in subsequent tests, you can then run `runpipreqs`.
8. **Handling pipreqs Warnings**: For warnings that appear in pipreqs, such as not being able to find a module on PyPI, it may be due to a discrepancy between the download name and the import name of a third-party library. For example, `import cv2` requires downloading not `cv2` but `opencv-python`. For each warning, you need to address the discrepancy by ensuring the correct package names are used for the downloads.
    You should review "pipreqs_output.txt" (used to store output during the pipreqs dependency generation process) and "requirements_pipreqs.txt" (the final generated dependency results) to check for any inconsistencies. Use ```diff and ``` to make adjustments to "requirements_pipreqs.txt" as needed.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
9. **Update lists**: Add the "requirements_pipreqs.txt" file generated by pipreqs and corrected by you (or maybe not) to the waiting list using the command `waitinglist addfile /repo/requirements_pipreqs.txt`.
    *Note*: If you did not execute runpipreqs, then you do not need to perform this step.
10. **Resolve version_constraint conflicts**: Process the elements in conflict_list. Based on the information in conflict_list, resolve any existing version_constraints conflicts. Only after these have been resolved can you proceed with the download.
11. **Unified download execution**: After analyzing the original requirements.txt of the repository and the "requirements.txt" generated by pipreqs, and resolving any conflict issues, you need to enter download to execute the unified `download`. This will download each element currently in the waiting_list one by one, and eventually, the download status will be returned.
12. **Error Handling**: After the download is complete, you need to handle the error messages based on the information provided. We will return the list of third-party libraries and their dependencies in your current environment. When resolving these errors, you need to ensure that these dependencies are properly managed. For example, you cannot directly uninstall a package that is required by another package, nor can you install a version that does not meet the constraints.
    For instance, if package A depends on package B with a requirement of "B>=1.0", you cannot simply run pip uninstall B as this would cause package A to lack its dependency. Similarly, you cannot run `pip install B==0.5` because this would not satisfy the requirement of "B>=1.0".
    You can make use of the following tools:
    a.(Strongly recommend) `pipdeptree`: Use pipdeptree to see the structure of the python third-party library downloaded.
    b.(Strongly recommend) `pipdeptree -p <package_name>`: Use pipdeptree -p followed by package_name can display the dependency information of a specific third-party library.
    c.(Strongly recommend) `pip index versions <package_name> --python-version <python_version>`: This command is used to query the versions of a specific package for a particular Python version, including pre-release versions. For example, `pip index versions requests --python-version 3.10` can be used to find the versions of requests that are available for Python 3.10.
    d. `pip install -q`: Use this command to install a specific version of a package with minimal output. This greatly reduces the verbosity, showing only crucial information and final status. It is recommended to specify the version with == to avoid conflicts with the existing environment. For example, use pip install -q requests==2.25.1 to ensure a quiet and specific version installation.
    e. `pip install -e`: Use this command to install a package in "editable" mode. This is particularly useful during development when you want to make changes to the source code and have them immediately reflected in the installed package without needing to reinstall it. For example, pip install -e . will install the package located in the current directory in editable mode. Another common use case is to install a package from a local path or a VCS repository while keeping it editable. For example, pip install -e git+https://github.com/username/repo.git#egg=package_name.
    f. `pip uninstall`: Use this command to uninstall a third-party library. This should be used cautiously as it may cause dependency issues. If you need to change the version of a package, it is better to use `pip install [package_name]==[version]` instead.
    g. `apt-get update -qq && apt-get install [package]=[version] -y -qq`: Use this command to install system packages if needed, remember to use `-y`. Use `-qq` to minimize the output if there is nothing wrong.
    h. `export <variable>=<value>`: Use this command to set system environment variables.
    i. You can use the `--help` parameter to view detailed usage instructions for various tools, such as `pipdeptree --help` and `pip install --help`, etc.
    j. You may also use other commands that are not listed here, including built-in Bash commands and other system commands.
    *Note*: Always consider the potential impact of each command on the system. Aim to achieve the best results with minimal changes.
    *Note*: For modules not found in the error message, first check if the corresponding module is available in the project folder before proceeding with external downloads. For example, if you encounter an error stating ModuleNotFoundError: No module named 'my_module', check if there is a file named my_module.py in your project directory. If it is not present, then you can look for the module externally and download it if necessary.
    *Note*: Do not use external download tools like `git clone` or `wget` to download a large number of files directly in the /repo folder (or its subdirectories) to avoid causing significant changes to the original repository.
    *Note*: Flexibility: You do not need to complete all configurations in one go. If you are unsure whether the configuration is approximately complete, you can use the `runtest` or `poetryruntest`(When you configured in poetry environment) command. I will check the configured environment and return any error messages. Based on the error messages, you can make further adjustments.
    *Note*: In special cases, if you feel that the Docker environment has become too messy to achieve your goal, you can use `clear_configuration` command to restore it to the initial Python 3.10 environment or `change_python_version` and start over.
**Most Important!** You can execute `runtest` or `poetryruntest` anywhere when you decide to test the environment. You do not need to complete all the previous steps; you can directly run `runtest` or `poetryruntest` to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
If you encounter import errors such as ModuleNotFoundError or ImportError, you can consider two solutions. One solution is to use external tools like pip or apt-get to download these dependencies. The other solution is to check for local dependencies in the repository; if local dependencies are available, you can use `export PYTHONPATH=` statements to set environment variables (preferably), or modify the __init__.py file to resolve the issue.
Please note that when manually using pip, apt-get, poetry, or other tools to download third-party libraries, try to use the `-q` (quiet) mode if available to reduce intermediate progress bar outputs. Additionally, we will help remove more obvious progress bar information to minimize interference with the analysis.
If you need to install packages using pip, please consider adding them to the waiting list first, and then use the `download` command to proceed with the installation.
In each round of the conversation, we will inform you of the commands that have been correctly executed and have changed the state of the current Docker container. Please reflect on each round's Observation in relation to the current state of the Docker container and decide the subsequent Action.
If you need to run two or more commands, please strictly follow the order by enclosing each command in ONE ```bash and ``` blocks connected by "&&" with ONE line! It is not recommended to use backslashes (\) for line continuation. If you need to execute commands that span multiple lines, it is advisable to write them into a .sh file and then run the executable file. For example, if you want to enter the /repo directory and execute `poetry install`, you should input:
```bash
cd /repo && poetry install
```

It is not recommended to directly input:
```bash
cd /repo
```
```bash
poetry install
```

Nor is it recommended to input:
```bash
cd /repo \
poetry install
```

We also strongly request that you try to write the instructions on the same line as much as possible, and do not break them into multiple lines, as this may cause parsing errors. Even if the line of instructions contains a lot of && connections, do not arbitrarily break it into multiple lines.

We will automatically maintain two lists in the background to facilitate the installation and download of third-party libraries. These are:
1. waiting list: Used to store third-party libraries waiting to be downloaded, including both pip and apt libraries. You can use `waitinglist show` to show all items in it.
2. conflict list: Used to store elements with the same name as those in the waiting list but with inconsistent version constraints. You can use `conflictlist show` to show all items in it.
*Note*: you only need to follow the prompts to complete operations on these lists during the running process and can only manipulate them using the provided commands.
*Note*: Before operating waiting list, conflict list, or download commands, you can use waitinglist show or conflictlist show to observe their structure each time.


IN GOOD FORMAT: 
All your answer must contain Thought and Action. 
Calling CLI tools Action using bash block like ```bash  ```. 
Editing and Writing code Action using diff block like ```diff ```.
The command line you generate will be run in the bash sandbox environment, and the running results will be returned to you through the system messages.

IMPORTANT TIPS: 
        * Each round of reply can only contain one ```bash ``` block, which means Each round of your answers contain only *ONE* action!
        * Please submit the first command first, then after receiving the response, you can issue the second command. You are free to use any other bash communication.

You are now in the Docker environment of python:3.10. Please perform all operations within this environment.
CLI TOOLS: You can call CLI tools in  ```bash ... ``` block as Action with a Thought. like:
### Thought: I need to understand the structure of the root directory.
### Action:
```bash
ls /repo
```

For another example:
### Thought: I need to read the README.md file.
### Action:
```bash
cat README.md
```


CODE EDITING AND WRITING: All changes to files must use the ```diff  ```  block format, with symbols <<<<<<< SEARCH, ======= and >>>>>>> REPLACE 

You need to provide code patch. The patch should according to the original code, indent correctly, and do not include line numbers. The format is as follows: 
### Thought: Modify explanation...
### Action: 
```diff 
/absolute/path/of/target.py
<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE

<<<<<<< SEARCH
    exact copy of old line(s) you would like to change
=======
    new line(s) to replace
>>>>>>> REPLACE
``` 
Every *SEARCH/REPLACE block must use this format:
1. The opening fence ```diff 
2. The file path alone on a line, verbatim. No bold asterisks, no quotes around it, no escaping of characters, etc.
3. The start of search block: <<<<<<< SEARCH
4. A contiguous chunk of lines to search for in the existing source code
5. The dividing line: =======
6. The lines to replace into the source code
7. The end of the replace block: >>>>>>> REPLACE
8. The closing fence: ``` 
Once you want to modify the code you MUST: 
        * Include *ALL* the code being searched and replaced!
        * Every *SEARCH* section must *EXACTLY MATCH* the existing source code, character for character, including all comments, docstrings, etc.
        * '<<<<<<< SEARCH', '=======' and  '>>>>>>> REPLACE' symbols must be on a line by themselves and cannot be indented.
        * All code modifications must be expressed in the REPLACE format above (including delete an insert). We will find the source code with the highest matching degree in the original file and replace it. Please provide sufficient and unique old line(s) from snippet to facilitate matching.
        * If the code patch you provide is successfully applied, the differences before and after the code modification will be returned.
        * The paths of modified files must be completely absolute paths.
        * Make sure the patch you provide is indented correctly especially in python programs: The indentation of old lines is exactly the same as the original code, and the indentation of new lines is correct.
        * All patches must be based on the original code viewed by the tools, and fabricated code patch(es) is prohibited.
        * Previously successfully applied patches will modify the code, and new patches must be applied based on the current code. Please review the relevant code again then provide new patches.
        * If the old line(s) is empty, it is considered to be inserted at the beginning of the file. If the file does not exist, a new file will be created and the new line will be written. like:
### Thought: Create a.py
### Action:
```diff
/project_path/.../a.py
<<<<<<< SEARCH
=======
    [new line(s) to add]
>>>>>>> REPLACE
```

*Note*: Do not make extensive changes to the existing files in the /repo folder. You may only make appropriate and necessary changes to the original repository files (e.g., when there are actual errors or tests that cannot be run).
*Very Important Note*: Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
In addition to typical bash commands, we also provide the following commands that can be used, you can use them flexibly if needed:
waitinglist add -p package_name [-v version_constraints] -t tool # Add item into waiting list. If no 'version_constraints' are specified, the latest version will be downloaded by default.
waitinglist addfile file_path # Add all entries from a file similar to requirements.txt format to the waiting list.
waitinglist clear # Used to clear all the items in the waiting list.
conflictlist solve -v "[version_cosntraints]" # Resolve the conflict for the first element in the conflict list, and update the version constraints for the corresponding package_name and tool to version_constraints. If no 'version_constraints' are specified, the latest version will be downloaded by default.
conflictlist solve -u # Keep the original version constraint that exists in the waiting list, and discard the other version constraints with the same name and tool in the conflict list.
conflictlist clear # Used to clear all the items in the conflict list.
conflictlist show # Used to show all the items in the conflict list.
waitinglist show # Used to show all the items in the waiting list.
download # Download all pending elements in the waiting list at once.
runtest # Check if the configured environment is correct.
poetryruntest # Check if the configured environment is correct in poetry environment! If you want to run tests in poetry environment, run it.
runpipreqs # Generate 'requirements_pipreqs.txt' and 'pipreqs_output.txt' and 'pipreqs_error.txt'.
change_python_version python_version # Switching the Python version in the Docker container will forgo any installations made prior to the switch. The Python version number should be represented directly with numbers and dots, without any quotation marks.
clear_configuration # Reset all the configuration to the initial setting of python:3.10.


VERY IMPORTANT TIPS: 
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You should not answer the user's question, your task is to configure the environment within the given setup. You need to follow the steps mentioned above and flexibly use various commands. After entering test, ensure that the environment passes the test.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * You do not need to complete all the previous steps; you can directly run runtest or poetryruntest to check if the configuration is complete and get feedback from the error messages. Be flexible. Our goal is to pass the runtest or poetryruntest checks.
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Passing tests by modifying testing functions is not allowed, and you should figure out how to make the current test functions run successfully!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * Try to write all commands on a single line as much as possible, regardless of the number of "&&" connections or the length of the instructions; do not arbitrarily break them into multiple lines!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * When other configuration methods can be used, try to avoid modifying or deleting the original files, especially do not delete the testing files!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!
    * You are not allowed to use commands like `hatch shell` that would open a new shell!!!

---------------------------
### Thought: I need to understand the structure of the root directory to identify the configuration files.
### Action:
```bash
ls /repo
```
### Observation:
Running `ls /repo`...
Brewfile	 LICENSE      bin	  pyproject.toml	      scripts
CHANGELOG.md	 README.md    examples	  release-please-config.json  src
CODEOWNERS	 SECURITY.md  mypy.ini	  requirements-dev.lock       tests
CONTRIBUTING.md  api.md       noxfile.py  requirements.lock
`ls /repo` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 199 turns left to complete the task.
The container remains in its original state.
response.status_code:  400
---------------------------
### Thought: The project contains several configuration files such as `pyproject.toml`, `requirements.lock`, `requirements-dev.lock`, and `noxfile.py`. Let's check the contents of the `pyproject.toml` file first since it is frequently used for managing dependencies.

### Action:
```bash
cat /repo/pyproject.toml
```
### Observation:
Running `cat /repo/pyproject.toml`...
[project]
name = "groq"
version = "0.13.0"
description = "The official Python library for the groq API"
dynamic = ["readme"]
license = "Apache-2.0"
authors = [
{ name = "Groq", email = "support@groq.com" },
]
dependencies = [
    "httpx>=0.23.0, <1",
    "pydantic>=1.9.0, <3",
    "typing-extensions>=4.7, <5",
    "anyio>=3.5.0, <5",
    "distro>=1.7.0, <2",
    "sniffio",
]
requires-python = ">= 3.8"
classifiers = [
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
  "Operating System :: POSIX",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: Apache Software License"
]
[project.urls]
Homepage = "https://github.com/groq/groq-python"
Repository = "https://github.com/groq/groq-python"
[tool.rye]
managed = true
# version pins are in requirements-dev.lock
dev-dependencies = [
    "pyright>=1.1.359",
    "mypy",
    "respx",
    "pytest",
    "pytest-asyncio",
    "ruff",
    "time-machine",
    "nox",
    "dirty-equals>=0.6.0",
    "importlib-metadata>=6.7.0",
    "rich>=13.7.1",
    "nest_asyncio==1.6.0"
]
[tool.rye.scripts]
format = { chain = [
  "format:ruff",
  "format:docs",
  "fix:ruff",
  # run formatting again to fix any inconsistencies when imports are stripped
  "format:ruff",
]}
"format:docs" = "python scripts/utils/ruffen-docs.py README.md api.md"
"format:ruff" = "ruff format"
"lint" = { chain = [
  "check:ruff",
  "typecheck",
  "check:importable",
]}
"check:ruff" = "ruff check ."
"fix:ruff" = "ruff check --fix ."
"check:importable" = "python -c 'import groq'"
typecheck = { chain = [
  "typecheck:pyright",
  "typecheck:mypy"
]}
"typecheck:pyright" = "pyright"
"typecheck:verify-types" = "pyright --verifytypes groq --ignoreexternal"
"typecheck:mypy" = "mypy ."
[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"
[tool.hatch.build]
include = [
  "src/*"
]
[tool.hatch.build.targets.wheel]
packages = ["src/groq"]
[tool.hatch.build.targets.sdist]
# Basically everything except hidden files/directories (such as .github, .devcontainers, .python-version, etc)
include = [
  "/*.toml",
  "/*.json",
  "/*.lock",
  "/*.md",
  "/mypy.ini",
  "/noxfile.py",
  "bin/*",
  "examples/*",
  "src/*",
  "tests/*",
]
[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
# replace relative links with absolute links
pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)'
replacement = '[\1](https://github.com/groq/groq-python/tree/main/\g<2>)'
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--tb=short"
xfail_strict = true
asyncio_mode = "auto"
filterwarnings = [
  "error"
]
[tool.pyright]
# this enables practically every flag given by pyright.
# there are a couple of flags that are still disabled by
# default in strict mode as they are experimental and niche.
typeCheckingMode = "strict"
pythonVersion = "3.8"
exclude = [
    "_dev",
    ".venv",
    ".nox",
]
reportImplicitOverride = true
reportImportCycles = false
reportPrivateUsage = false
[tool.ruff]
line-length = 120
output-format = "grouped"
target-version = "py37"
[tool.ruff.format]
docstring-code-format = true
[tool.ruff.lint]
select = [
  # isort
  "I",
  # bugbear rules
  "B",
  # remove unused imports
  "F401",
  # bare except statements
  "E722",
  # unused arguments
  "ARG",
  # print statements
  "T201",
  "T203",
  # misuse of typing.TYPE_CHECKING
  "TCH004",
  # import rules
  "TID251",
]
ignore = [
  # mutable defaults
  "B006",
]
unfixable = [
  # disable auto fix for print statements
  "T201",
  "T203",
]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"functools.lru_cache".msg = "This function does not retain type information for the wrapped function's arguments; The `lru_cache` function from `_utils` should be used instead"
[tool.ruff.lint.isort]
length-sort = true
length-sort-straight = true
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
known-first-party = ["groq", "tests"]
[tool.ruff.lint.per-file-ignores]
"bin/**.py" = ["T201", "T203"]
"scripts/**.py" = ["T201", "T203"]
"tests/**.py" = ["T201", "T203"]
"examples/**.py" = ["T201", "T203"]
`cat /repo/pyproject.toml` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 198 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: The `pyproject.toml` file indicates that the project uses Poetry and lists dependencies and dev-dependencies. I'll use `poetry install` to install the dependencies.

### Action:
```bash
cd /repo && poetry install
```
### Observation:
Running `cd /repo`...
`cd /repo` executes with returncode: 0
Running `poetry install`...
[31;1m[tool.poetry] section not found in /repo/pyproject.toml[39;22m
The command execution failed, so I have reverted it back to the previous state, which is the environment before running this command.
`poetry install` executes with returncode: 1

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 197 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: The `pyproject.toml` does not have a `[tool.poetry]` section, indicating it is not using Poetry for this project. Instead, it might be using `requirements.lock` and `requirements-dev.lock` for managing dependencies. Let's check the contents of `requirements.lock` to understand the structure and dependencies.

### Action:
```bash
cat /repo/requirements.lock
```
### Observation:
Running `cat /repo/requirements.lock`...
# generated by rye
# use `rye lock` or `rye sync` to update this lockfile
#
# last locked with the following flags:
#   pre: false
#   features: []
#   all-features: true
#   with-sources: false
#   generate-hashes: false
-e file:.
annotated-types==0.6.0
    # via pydantic
anyio==4.4.0
    # via groq
    # via httpx
certifi==2023.7.22
    # via httpcore
    # via httpx
distro==1.8.0
    # via groq
exceptiongroup==1.2.2
    # via anyio
h11==0.14.0
    # via httpcore
httpcore==1.0.2
    # via httpx
httpx==0.25.2
    # via groq
idna==3.4
    # via anyio
    # via httpx
pydantic==2.9.2
    # via groq
pydantic-core==2.23.4
    # via pydantic
sniffio==1.3.0
    # via anyio
    # via groq
    # via httpx
typing-extensions==4.12.2
    # via anyio
    # via groq
    # via pydantic
    # via pydantic-core
`cat /repo/requirements.lock` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 196 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: The `requirements.lock` file lists various dependencies needed for the project. Since it mentions it was generated by Rye, I will need to check the file related to `requirements-dev.lock` to see if any additional dependencies are present.

### Action:
```bash
cat /repo/requirements-dev.lock
```
### Observation:
Running `cat /repo/requirements-dev.lock`...
# generated by rye
# use `rye lock` or `rye sync` to update this lockfile
#
# last locked with the following flags:
#   pre: false
#   features: []
#   all-features: true
#   with-sources: false
#   generate-hashes: false
-e file:.
annotated-types==0.6.0
    # via pydantic
anyio==4.4.0
    # via groq
    # via httpx
argcomplete==3.1.2
    # via nox
certifi==2023.7.22
    # via httpcore
    # via httpx
colorlog==6.7.0
    # via nox
dirty-equals==0.6.0
distlib==0.3.7
    # via virtualenv
distro==1.8.0
    # via groq
exceptiongroup==1.2.2
    # via anyio
    # via pytest
filelock==3.12.4
    # via virtualenv
h11==0.14.0
    # via httpcore
httpcore==1.0.2
    # via httpx
httpx==0.25.2
    # via groq
    # via respx
idna==3.4
    # via anyio
    # via httpx
importlib-metadata==7.0.0
iniconfig==2.0.0
    # via pytest
markdown-it-py==3.0.0
    # via rich
mdurl==0.1.2
    # via markdown-it-py
mypy==1.13.0
mypy-extensions==1.0.0
    # via mypy
nest-asyncio==1.6.0
nodeenv==1.8.0
    # via pyright
nox==2023.4.22
packaging==23.2
    # via nox
    # via pytest
platformdirs==3.11.0
    # via virtualenv
pluggy==1.5.0
    # via pytest
pydantic==2.9.2
    # via groq
pydantic-core==2.23.4
    # via pydantic
pygments==2.18.0
    # via rich
pyright==1.1.380
pytest==8.3.3
    # via pytest-asyncio
pytest-asyncio==0.24.0
python-dateutil==2.8.2
    # via time-machine
pytz==2023.3.post1
    # via dirty-equals
respx==0.20.2
rich==13.7.1
ruff==0.6.9
setuptools==68.2.2
    # via nodeenv
six==1.16.0
    # via python-dateutil
sniffio==1.3.0
    # via anyio
    # via groq
    # via httpx
time-machine==2.9.0
tomli==2.0.2
    # via mypy
    # via pytest
typing-extensions==4.12.2
    # via anyio
    # via groq
    # via mypy
    # via pydantic
    # via pydantic-core
virtualenv==20.24.5
    # via nox
zipp==3.17.0
    # via importlib-metadata
`cat /repo/requirements-dev.lock` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 195 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: Both `requirements.lock` and `requirements-dev.lock` files list the dependencies required for the project. To proceed, I will add both files to the waiting list and then run the unified download.

### Action:
```bash
waitinglist addfile /repo/requirements.lock && waitinglist addfile /repo/requirements-dev.lock
```
### Observation:
Running `waitinglist addfile /repo/requirements.lock`...
'annotated-types==0.6.0' (using pip to download) has been added into the waiting list. 
'anyio==4.4.0' (using pip to download) has been added into the waiting list. 
'certifi==2023.7.22' (using pip to download) has been added into the waiting list. 
'distro==1.8.0' (using pip to download) has been added into the waiting list. 
'exceptiongroup==1.2.2' (using pip to download) has been added into the waiting list. 
'h11==0.14.0' (using pip to download) has been added into the waiting list. 
'httpcore==1.0.2' (using pip to download) has been added into the waiting list. 
'httpx==0.25.2' (using pip to download) has been added into the waiting list. 
'idna==3.4' (using pip to download) has been added into the waiting list. 
'pydantic==2.9.2' (using pip to download) has been added into the waiting list. 
'pydantic-core==2.23.4' (using pip to download) has been added into the waiting list. 
'sniffio==1.3.0' (using pip to download) has been added into the waiting list. 
'typing-extensions==4.12.2' (using pip to download) has been added into the waiting list. If you have multiple elements to add to the waitinglist, you can use && to connect multiple `waitinglist add` statements and surround them with ```bash and ```. Please make sure to write the complete statements; we will only recognize complete statements. Do not use ellipses or other incomplete forms.
The following entries in "/repo/requirements.lock" have been successfully added to the waiting list:
annotated-types==0.6.0
anyio==4.4.0
certifi==2023.7.22
distro==1.8.0
exceptiongroup==1.2.2
h11==0.14.0
httpcore==1.0.2
httpx==0.25.2
idna==3.4
pydantic==2.9.2
pydantic-core==2.23.4
sniffio==1.3.0
typing-extensions==4.12.2
There are no correctly formatted entries in "/repo/requirements.lock" that have been placed in the conflict list.Running `waitinglist addfile /repo/requirements-dev.lock`...
The output is too long, so we've truncated it to show you the first and last 5000 characters.
Running `waitinglist addfile /repo/requirements-dev.lock`...
'annotated-types' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==0.6.0' has been successfully added into conflict list, serving as a potential version constraint for 'annotated-types'(using pip to download).
'anyio' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==4.4.0' has been successfully added into conflict list, serving as a potential version constraint for 'anyio'(using pip to download).
'argcomplete==3.1.2' (using pip to download) has been added into the waiting list. 
'certifi' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==2023.7.22' has been successfully added into conflict list, serving as a potential version constraint for 'certifi'(using pip to download).
'colorlog==6.7.0' (using pip to download) has been added into the waiting list. 
'dirty-equals==0.6.0' (using pip to download) has been added into the waiting list. 
'distlib==0.3.7' (using pip to download) has been added into the waiting list. 
'distro' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==1.8.0' has been successfully added into conflict list, serving as a potential version constraint for 'distro'(using pip to download).
'exceptiongroup' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==1.2.2' has been successfully added into conflict list, serving as a potential version constraint for 'exceptiongroup'(using pip to download).
'filelock==3.12.4' (using pip to download) has been added into the waiting list. 
'h11' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==0.14.0' has been successfully added into conflict list, serving as a potential version constraint for 'h11'(using pip to download).
'httpcore' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==1.0.2' has been successfully added into conflict list, serving as a potential version constraint for 'httpcore'(using pip to download).
'httpx' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==0.25.2' has been successfully added into conflict list, serving as a potential version constraint for 'httpx'(using pip to download).
'idna' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==3.4' has been successfully added into conflict list, serving as a potential version constraint for 'idna'(using pip to download).
'importlib-metadata==7.0.0' (using pip to download) has been added into the waiting list. 
'iniconfig==2.0.0' (using pip to download) has been added into the waiting list. 
'markdown-it-py==3.0.0' (using pip to download) has been added into the waiting list. 
'mdurl==0.1.2' (using pip to download) has been added into the waiting list. If you have multiple elements to add to the waitinglist, you can use && to connect multiple `waitinglist add` statements and surround them with ```bash and ```. Please make sure to write the complete statements; we will only recognize complete statements. Do not use ellipses or other incomplete 
...[Truncation]...
 complete statements; we will only recognize complete statements. Do not use ellipses or other incomplete forms.
'python-dateutil==2.8.2' (using pip to download) has been added into the waiting list. 
'pytz==2023.3.post1' (using pip to download) has been added into the waiting list. 
'respx==0.20.2' (using pip to download) has been added into the waiting list. 
'rich==13.7.1' (using pip to download) has been added into the waiting list. 
'ruff==0.6.9' (using pip to download) has been added into the waiting list. 
'setuptools==68.2.2' (using pip to download) has been added into the waiting list. 
'six==1.16.0' (using pip to download) has been added into the waiting list. 
'sniffio' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==1.3.0' has been successfully added into conflict list, serving as a potential version constraint for 'sniffio'(using pip to download).
'time-machine==2.9.0' (using pip to download) has been added into the waiting list. 
'tomli==2.0.2' (using pip to download) has been added into the waiting list. 
'typing-extensions' (using pip to download) has been in waiting list. Therefore, it is about to add it to conflict list...
The version constraint '==4.12.2' has been successfully added into conflict list, serving as a potential version constraint for 'typing-extensions'(using pip to download).
'virtualenv==20.24.5' (using pip to download) has been added into the waiting list. 
'zipp==3.17.0' (using pip to download) has been added into the waiting list. If you have multiple elements to add to the waitinglist, you can use && to connect multiple `waitinglist add` statements and surround them with ```bash and ```. Please make sure to write the complete statements; we will only recognize complete statements. Do not use ellipses or other incomplete forms.
The following entries in "/repo/requirements-dev.lock" have been successfully added to the waiting list:
argcomplete==3.1.2
colorlog==6.7.0
dirty-equals==0.6.0
distlib==0.3.7
filelock==3.12.4
importlib-metadata==7.0.0
iniconfig==2.0.0
markdown-it-py==3.0.0
mdurl==0.1.2
mypy==1.13.0
mypy-extensions==1.0.0
nest-asyncio==1.6.0
nodeenv==1.8.0
nox==2023.4.22
packaging==23.2
platformdirs==3.11.0
pluggy==1.5.0
pygments==2.18.0
pyright==1.1.380
pytest==8.3.3
pytest-asyncio==0.24.0
python-dateutil==2.8.2
pytz==2023.3.post1
respx==0.20.2
rich==13.7.1
ruff==0.6.9
setuptools==68.2.2
six==1.16.0
time-machine==2.9.0
tomli==2.0.2
virtualenv==20.24.5
zipp==3.17.0
The following entries in "/repo/requirements-dev.lock" are correctly formatted, but they already exist in the original waiting list. Therefore, they have been temporarily placed in the conflict list. Please handle them later.
annotated-types==0.6.0
anyio==4.4.0
certifi==2023.7.22
distro==1.8.0
exceptiongroup==1.2.2
h11==0.14.0
httpcore==1.0.2
httpx==0.25.2
idna==3.4
pydantic==2.9.2
pydantic-core==2.23.4
sniffio==1.3.0
typing-extensions==4.12.2
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 194 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: The dependencies from both `requirements.lock` and `requirements-dev.lock` have been added to the waiting list. However, there are some conflicts with version constraints for several packages. Let's solve the conflicts by keeping the versions specified in the `requirements.lock`.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'annotated-types['==0.6.0']' has been removed from the conflict list, and there are 12 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 193 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: There was an issue with solving the conflict for the first package `annotated-types`. I should address each conflict individually, ensuring I am keeping the version constraints from `requirements.lock`.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'anyio['==4.4.0']' has been removed from the conflict list, and there are 11 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 192 turns left to complete the task.
The container remains in its original state.
response.status_code:  400
---------------------------
### Thought: There was an issue with solving the conflict for the second package `anyio`. I need to continue resolving each conflict.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'certifi['==2023.7.22']' has been removed from the conflict list, and there are 10 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 191 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I need to continue solving the rest of the conflicts.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'distro['==1.8.0']' has been removed from the conflict list, and there are 9 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 190 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I will keep resolving the remaining conflicts one by one.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'exceptiongroup['==1.2.2']' has been removed from the conflict list, and there are 8 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 189 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I will proceed with resolving the next remaining conflict.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'h11['==0.14.0']' has been removed from the conflict list, and there are 7 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 188 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I will proceed to resolve the remaining conflicts one by one.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'httpcore['==1.0.2']' has been removed from the conflict list, and there are 6 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 187 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I will continue to solve the rest of the conflicts.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'httpx['==0.25.2']' has been removed from the conflict list, and there are 5 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 186 turns left to complete the task.
The container remains in its original state.
response.status_code:  400
---------------------------
### Thought: I will proceed with solving the next conflict.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'idna['==3.4']' has been removed from the conflict list, and there are 4 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 185 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I will keep resolving the next conflict on the list.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'pydantic['==2.9.2']' has been removed from the conflict list, and there are 3 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 184 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I need to continue solving the remaining conflicts until all conflicts are resolved.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'pydantic-core['==2.23.4']' has been removed from the conflict list, and there are 2 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 183 turns left to complete the task.
The container remains in its original state.
response.status_code:  400
---------------------------
### Thought: I will proceed with solving the last few conflicts.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'sniffio['==1.3.0']' has been removed from the conflict list, and there are 1 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 182 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: I will resolve the final conflict on the list.

### Action:
```bash
conflictlist solve -u
```
### Observation:
Running `conflictlist solve -u`...
'typing-extensions['==4.12.2']' has been removed from the conflict list, and there are 0 remaining conflicts to be addressed in the conflict list.
The "version_constraints" you entered is neither in the original waiting list nor in the conflict list options. Please re-enter the command.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 181 turns left to complete the task.
The container remains in its original state.
---------------------------
### Thought: Now that all conflicts have been resolved, I will proceed with the unified download to install all dependencies.

### Action:
```bash
download
```
### Observation:
Running `download`...
The output is too long, so we've truncated it to show you the first and last 5000 characters.
Running `download`...
'annotated-types==0.6.0' has been removed from the waiting list.
"annotated-types==0.6.0" installed successfully.
'anyio==4.4.0' has been removed from the waiting list.
"anyio==4.4.0" installed successfully.
'certifi==2023.7.22' has been removed from the waiting list.
"certifi==2023.7.22" installed successfully.
'distro==1.8.0' has been removed from the waiting list.
"distro==1.8.0" installed successfully.
'exceptiongroup==1.2.2' has been removed from the waiting list.
"exceptiongroup==1.2.2" installed successfully.
'h11==0.14.0' has been removed from the waiting list.
"h11==0.14.0" installed successfully.
'httpcore==1.0.2' has been removed from the waiting list.
"httpcore==1.0.2" installed successfully.
'httpx==0.25.2' has been removed from the waiting list.
"httpx==0.25.2" installed successfully.
'idna==3.4' has been removed from the waiting list.
"idna==3.4" installed successfully.
'pydantic==2.9.2' has been removed from the waiting list.
"pydantic==2.9.2" installed successfully.
'pydantic-core==2.23.4' has been removed from the waiting list.
"pydantic-core==2.23.4" installed successfully.
'sniffio==1.3.0' has been removed from the waiting list.
"sniffio==1.3.0" installed successfully.
'typing-extensions==4.12.2' has been removed from the waiting list.
"typing-extensions==4.12.2" installed successfully.
'argcomplete==3.1.2' has been removed from the waiting list.
"argcomplete==3.1.2" installed successfully.
'colorlog==6.7.0' has been removed from the waiting list.
"colorlog==6.7.0" installed successfully.
'dirty-equals==0.6.0' has been removed from the waiting list.
"dirty-equals==0.6.0" installed successfully.
'distlib==0.3.7' has been removed from the waiting list.
"distlib==0.3.7" installed successfully.
'filelock==3.12.4' has been removed from the waiting list.
"filelock==3.12.4" installed successfully.
'importlib-metadata==7.0.0' has been removed from the waiting list.
"importlib-metadata==7.0.0" installed successfully.
'iniconfig==2.0.0' has been removed from the waiting list.
"iniconfig==2.0.0" installed successfully.
'markdown-it-py==3.0.0' has been removed from the waiting list.
"markdown-it-py==3.0.0" installed successfully.
'mdurl==0.1.2' has been removed from the waiting list.
"mdurl==0.1.2" installed successfully.
'mypy==1.13.0' has been removed from the waiting list.
"mypy==1.13.0" installed successfully.
'mypy-extensions==1.0.0' has been removed from the waiting list.
"mypy-extensions==1.0.0" installed successfully.
'nest-asyncio==1.6.0' has been removed from the waiting list.
"nest-asyncio==1.6.0" installed successfully.
'nodeenv==1.8.0' has been removed from the waiting list.
"nodeenv==1.8.0" installed successfully.
'nox==2023.4.22' has been removed from the waiting list.
"nox==2023.4.22" installed successfully.
'packaging==23.2' has been removed from the waiting list.
"packaging==23.2" installed successfully.
'platformdirs==3.11.0' has been removed from the waiting list.
"platformdirs==3.11.0" installed successfully.
'pluggy==1.5.0' has been removed from the waiting list.
"pluggy==1.5.0" installed successfully.
'pygments==2.18.0' has been removed from the waiting list.
"pygments==2.18.0" installed successfully.
'pyright==1.1.380' has been removed from the waiting list.
"pyright==1.1.380" installed successfully.
'pytest==8.3.3' has been removed from the waiting list.
"pytest==8.3.3" installed successfully.
'pytest-asyncio==0.24.0' has been removed from the waiting list.
"pytest-asyncio==0.24.0" installed successfully.
'python-dateutil==2.8.2' has been removed from the waiting list.
"python-dateutil==2.8.2" installed successfully.
'pytz==2023.3.post1' has been removed from the waiting list.
"pytz==2023.3.post1" installed successfully.
'respx==0.20.2' has been removed from the waiting list.
"respx==0.20.2" installed successfully.
'rich==13.7.1' has been removed from the waiting list.
"rich==13.7.1" installed successfully.
'ruff==0.6.9' has been removed from the waiting list.
"ruff==0.6.9" installed successfully.
'setuptools==68.2.2' has been removed from the waiting list.
"setuptools==68.2.2" installed successfully.
'six==1.16.0' has been removed from the waiting list.
"six==1.16.0" installed successfully.
'time-machine==2.9.0' has been removed from the waiting list.
"time-machine==2.9.0" installed successfully.
'tomli==2.0.2' has been removed from the waiting list.
"tomli==2.0.2" installed successfully.
'virtualenv==20.24.5' has been removed from the waiting list.
"virtualenv==20.24.5" installed successfully.
'zipp==3.17.0' has been removed from the waiting list.
"zipp==3.17.0" installed successfully.
In this round, the following third-party libraries were successfully downloaded. They are:
annotated-types==0.6.0 (using tool pip)
anyio==4.4.0 (using tool pip)
certifi==2023.7.22 (using tool pip)
distro==1.8.0 (using tool pip)
exceptiongroup==1.2.2 (using tool pip)
h11==0.14.0 (using tool pip)
httpcore==1.0.2 (using tool pip)
httpx==0.25.2 (using tool pip)
idna==3.4 (using tool pip)
pydantic==2.9.2 (using tool pip)
pydantic-core==2.23.4 (using tool pip)
sniffio==1.3.0 (using tool pip)
typing-extensions==4.12.2 (using tool pip)
argcomplete==3.1.2 (using tool pip)
colorlog==6.7.0 (using tool pip)
dirty-equals==0.6.0 (using tool pip)
distlib==0.3.7 (using tool pip)
filelock==3.12.4 (using tool pip)
importlib-metadata==7.0.0 (using tool pip)
iniconfig==2.0.0 (using tool pip)
markdown-it-py==3.0.0 (using tool pip)
mdurl==0.1.2 (using tool pip)
mypy==1.13.0 (using tool pip)
mypy-extensions==1.0.0 (using tool pip)
nest-asyncio==1.6.0 (using tool pip)
nodeenv==1.8.0 (using tool pip)
nox==2023.4.22 (using tool pip)
packaging==23.2 (using tool pip)
platformdirs==3.11.0 (using tool pip)
pluggy==1.5.0 (using tool pip)
pygments==2.18.0 (using tool pip)
pyright==1.1.380 (using tool pip)
pytest==8.3.3 (using tool pip)
pytest-asyncio==0.24.0 (using tool pip)
python-dateutil==2.8.2 (using tool pip)
pytz==2023.3.post1 (using tool pip)
respx==0.20.2 (using tool pip)
r
...[Truncation]...
talled successfully.
'distro==1.8.0' has been removed from the waiting list.
"distro==1.8.0" installed successfully.
'exceptiongroup==1.2.2' has been removed from the waiting list.
"exceptiongroup==1.2.2" installed successfully.
'h11==0.14.0' has been removed from the waiting list.
"h11==0.14.0" installed successfully.
'httpcore==1.0.2' has been removed from the waiting list.
"httpcore==1.0.2" installed successfully.
'httpx==0.25.2' has been removed from the waiting list.
"httpx==0.25.2" installed successfully.
'idna==3.4' has been removed from the waiting list.
"idna==3.4" installed successfully.
'pydantic==2.9.2' has been removed from the waiting list.
"pydantic==2.9.2" installed successfully.
'pydantic-core==2.23.4' has been removed from the waiting list.
"pydantic-core==2.23.4" installed successfully.
'sniffio==1.3.0' has been removed from the waiting list.
"sniffio==1.3.0" installed successfully.
'typing-extensions==4.12.2' has been removed from the waiting list.
"typing-extensions==4.12.2" installed successfully.
'argcomplete==3.1.2' has been removed from the waiting list.
"argcomplete==3.1.2" installed successfully.
'colorlog==6.7.0' has been removed from the waiting list.
"colorlog==6.7.0" installed successfully.
'dirty-equals==0.6.0' has been removed from the waiting list.
"dirty-equals==0.6.0" installed successfully.
'distlib==0.3.7' has been removed from the waiting list.
"distlib==0.3.7" installed successfully.
'filelock==3.12.4' has been removed from the waiting list.
"filelock==3.12.4" installed successfully.
'importlib-metadata==7.0.0' has been removed from the waiting list.
"importlib-metadata==7.0.0" installed successfully.
'iniconfig==2.0.0' has been removed from the waiting list.
"iniconfig==2.0.0" installed successfully.
'markdown-it-py==3.0.0' has been removed from the waiting list.
"markdown-it-py==3.0.0" installed successfully.
'mdurl==0.1.2' has been removed from the waiting list.
"mdurl==0.1.2" installed successfully.
'mypy==1.13.0' has been removed from the waiting list.
"mypy==1.13.0" installed successfully.
'mypy-extensions==1.0.0' has been removed from the waiting list.
"mypy-extensions==1.0.0" installed successfully.
'nest-asyncio==1.6.0' has been removed from the waiting list.
"nest-asyncio==1.6.0" installed successfully.
'nodeenv==1.8.0' has been removed from the waiting list.
"nodeenv==1.8.0" installed successfully.
'nox==2023.4.22' has been removed from the waiting list.
"nox==2023.4.22" installed successfully.
'packaging==23.2' has been removed from the waiting list.
"packaging==23.2" installed successfully.
'platformdirs==3.11.0' has been removed from the waiting list.
"platformdirs==3.11.0" installed successfully.
'pluggy==1.5.0' has been removed from the waiting list.
"pluggy==1.5.0" installed successfully.
'pygments==2.18.0' has been removed from the waiting list.
"pygments==2.18.0" installed successfully.
'pyright==1.1.380' has been removed from the waiting list.
"pyright==1.1.380" installed successfully.
'pytest==8.3.3' has been removed from the waiting list.
"pytest==8.3.3" installed successfully.
'pytest-asyncio==0.24.0' has been removed from the waiting list.
"pytest-asyncio==0.24.0" installed successfully.
'python-dateutil==2.8.2' has been removed from the waiting list.
"python-dateutil==2.8.2" installed successfully.
'pytz==2023.3.post1' has been removed from the waiting list.
"pytz==2023.3.post1" installed successfully.
'respx==0.20.2' has been removed from the waiting list.
"respx==0.20.2" installed successfully.
'rich==13.7.1' has been removed from the waiting list.
"rich==13.7.1" installed successfully.
'ruff==0.6.9' has been removed from the waiting list.
"ruff==0.6.9" installed successfully.
'setuptools==68.2.2' has been removed from the waiting list.
"setuptools==68.2.2" installed successfully.
'six==1.16.0' has been removed from the waiting list.
"six==1.16.0" installed successfully.
'time-machine==2.9.0' has been removed from the waiting list.
"time-machine==2.9.0" installed successfully.
'tomli==2.0.2' has been removed from the waiting list.
"tomli==2.0.2" installed successfully.
'virtualenv==20.24.5' has been removed from the waiting list.
"virtualenv==20.24.5" installed successfully.
'zipp==3.17.0' has been removed from the waiting list.
"zipp==3.17.0" installed successfully.
In this round, the following third-party libraries were successfully downloaded. They are:
annotated-types==0.6.0 (using tool pip)
anyio==4.4.0 (using tool pip)
certifi==2023.7.22 (using tool pip)
distro==1.8.0 (using tool pip)
exceptiongroup==1.2.2 (using tool pip)
h11==0.14.0 (using tool pip)
httpcore==1.0.2 (using tool pip)
httpx==0.25.2 (using tool pip)
idna==3.4 (using tool pip)
pydantic==2.9.2 (using tool pip)
pydantic-core==2.23.4 (using tool pip)
sniffio==1.3.0 (using tool pip)
typing-extensions==4.12.2 (using tool pip)
argcomplete==3.1.2 (using tool pip)
colorlog==6.7.0 (using tool pip)
dirty-equals==0.6.0 (using tool pip)
distlib==0.3.7 (using tool pip)
filelock==3.12.4 (using tool pip)
importlib-metadata==7.0.0 (using tool pip)
iniconfig==2.0.0 (using tool pip)
markdown-it-py==3.0.0 (using tool pip)
mdurl==0.1.2 (using tool pip)
mypy==1.13.0 (using tool pip)
mypy-extensions==1.0.0 (using tool pip)
nest-asyncio==1.6.0 (using tool pip)
nodeenv==1.8.0 (using tool pip)
nox==2023.4.22 (using tool pip)
packaging==23.2 (using tool pip)
platformdirs==3.11.0 (using tool pip)
pluggy==1.5.0 (using tool pip)
pygments==2.18.0 (using tool pip)
pyright==1.1.380 (using tool pip)
pytest==8.3.3 (using tool pip)
pytest-asyncio==0.24.0 (using tool pip)
python-dateutil==2.8.2 (using tool pip)
pytz==2023.3.post1 (using tool pip)
respx==0.20.2 (using tool pip)
rich==13.7.1 (using tool pip)
ruff==0.6.9 (using tool pip)
setuptools==68.2.2 (using tool pip)
six==1.16.0 (using tool pip)
time-machine==2.9.0 (using tool pip)
tomli==2.0.2 (using tool pip)
virtualenv==20.24.5 (using tool pip)
zipp==3.17.0 (using tool pip)
No third-party libraries failed to download in this round.
[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 180 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
python /home/tools/pip_download.py -p annotated-types -v "==0.6.0"
python /home/tools/pip_download.py -p anyio -v "==4.4.0"
python /home/tools/pip_download.py -p certifi -v "==2023.7.22"
python /home/tools/pip_download.py -p distro -v "==1.8.0"
python /home/tools/pip_download.py -p exceptiongroup -v "==1.2.2"
python /home/tools/pip_download.py -p h11 -v "==0.14.0"
python /home/tools/pip_download.py -p httpcore -v "==1.0.2"
python /home/tools/pip_download.py -p httpx -v "==0.25.2"
python /home/tools/pip_download.py -p idna -v "==3.4"
python /home/tools/pip_download.py -p pydantic -v "==2.9.2"
python /home/tools/pip_download.py -p pydantic-core -v "==2.23.4"
python /home/tools/pip_download.py -p sniffio -v "==1.3.0"
python /home/tools/pip_download.py -p typing-extensions -v "==4.12.2"
python /home/tools/pip_download.py -p argcomplete -v "==3.1.2"
python /home/tools/pip_download.py -p colorlog -v "==6.7.0"
python /home/tools/pip_download.py -p dirty-equals -v "==0.6.0"
python /home/tools/pip_download.py -p distlib -v "==0.3.7"
python /home/tools/pip_download.py -p filelock -v "==3.12.4"
python /home/tools/pip_download.py -p importlib-metadata -v "==7.0.0"
python /home/tools/pip_download.py -p iniconfig -v "==2.0.0"
python /home/tools/pip_download.py -p markdown-it-py -v "==3.0.0"
python /home/tools/pip_download.py -p mdurl -v "==0.1.2"
python /home/tools/pip_download.py -p mypy -v "==1.13.0"
python /home/tools/pip_download.py -p mypy-extensions -v "==1.0.0"
python /home/tools/pip_download.py -p nest-asyncio -v "==1.6.0"
python /home/tools/pip_download.py -p nodeenv -v "==1.8.0"
python /home/tools/pip_download.py -p nox -v "==2023.4.22"
python /home/tools/pip_download.py -p packaging -v "==23.2"
python /home/tools/pip_download.py -p platformdirs -v "==3.11.0"
python /home/tools/pip_download.py -p pluggy -v "==1.5.0"
python /home/tools/pip_download.py -p pygments -v "==2.18.0"
python /home/tools/pip_download.py -p pyright -v "==1.1.380"
python /home/tools/pip_download.py -p pytest -v "==8.3.3"
python /home/tools/pip_download.py -p pytest-asyncio -v "==0.24.0"
python /home/tools/pip_download.py -p python-dateutil -v "==2.8.2"
python /home/tools/pip_download.py -p pytz -v "==2023.3.post1"
python /home/tools/pip_download.py -p respx -v "==0.20.2"
python /home/tools/pip_download.py -p rich -v "==13.7.1"
python /home/tools/pip_download.py -p ruff -v "==0.6.9"
python /home/tools/pip_download.py -p setuptools -v "==68.2.2"
python /home/tools/pip_download.py -p six -v "==1.16.0"
python /home/tools/pip_download.py -p time-machine -v "==2.9.0"
python /home/tools/pip_download.py -p tomli -v "==2.0.2"
python /home/tools/pip_download.py -p virtualenv -v "==20.24.5"
python /home/tools/pip_download.py -p zipp -v "==3.17.0"
---------------------------
### Thought: All dependencies have been successfully installed. The next step is to run the tests to ensure the environment is correctly configured.

### Action:
```bash
runtest
```
### Observation:
Running `python /home/tools/runtest.py`...
Error: Please modify the configuration according to the error messages below. Once all issues are resolved, rerun the tests.
ImportError while loading conftest '/repo/tests/conftest.py'.
tests/conftest.py:10: in <module>
    from groq import Groq, AsyncGroq
E   ModuleNotFoundError: No module named 'groq'
The command execution failed, so I have reverted it back to the previous state, which is the environment before running this command.
`runtest` executes with returncode: 4

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 179 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
python /home/tools/pip_download.py -p annotated-types -v "==0.6.0"
python /home/tools/pip_download.py -p anyio -v "==4.4.0"
python /home/tools/pip_download.py -p certifi -v "==2023.7.22"
python /home/tools/pip_download.py -p distro -v "==1.8.0"
python /home/tools/pip_download.py -p exceptiongroup -v "==1.2.2"
python /home/tools/pip_download.py -p h11 -v "==0.14.0"
python /home/tools/pip_download.py -p httpcore -v "==1.0.2"
python /home/tools/pip_download.py -p httpx -v "==0.25.2"
python /home/tools/pip_download.py -p idna -v "==3.4"
python /home/tools/pip_download.py -p pydantic -v "==2.9.2"
python /home/tools/pip_download.py -p pydantic-core -v "==2.23.4"
python /home/tools/pip_download.py -p sniffio -v "==1.3.0"
python /home/tools/pip_download.py -p typing-extensions -v "==4.12.2"
python /home/tools/pip_download.py -p argcomplete -v "==3.1.2"
python /home/tools/pip_download.py -p colorlog -v "==6.7.0"
python /home/tools/pip_download.py -p dirty-equals -v "==0.6.0"
python /home/tools/pip_download.py -p distlib -v "==0.3.7"
python /home/tools/pip_download.py -p filelock -v "==3.12.4"
python /home/tools/pip_download.py -p importlib-metadata -v "==7.0.0"
python /home/tools/pip_download.py -p iniconfig -v "==2.0.0"
python /home/tools/pip_download.py -p markdown-it-py -v "==3.0.0"
python /home/tools/pip_download.py -p mdurl -v "==0.1.2"
python /home/tools/pip_download.py -p mypy -v "==1.13.0"
python /home/tools/pip_download.py -p mypy-extensions -v "==1.0.0"
python /home/tools/pip_download.py -p nest-asyncio -v "==1.6.0"
python /home/tools/pip_download.py -p nodeenv -v "==1.8.0"
python /home/tools/pip_download.py -p nox -v "==2023.4.22"
python /home/tools/pip_download.py -p packaging -v "==23.2"
python /home/tools/pip_download.py -p platformdirs -v "==3.11.0"
python /home/tools/pip_download.py -p pluggy -v "==1.5.0"
python /home/tools/pip_download.py -p pygments -v "==2.18.0"
python /home/tools/pip_download.py -p pyright -v "==1.1.380"
python /home/tools/pip_download.py -p pytest -v "==8.3.3"
python /home/tools/pip_download.py -p pytest-asyncio -v "==0.24.0"
python /home/tools/pip_download.py -p python-dateutil -v "==2.8.2"
python /home/tools/pip_download.py -p pytz -v "==2023.3.post1"
python /home/tools/pip_download.py -p respx -v "==0.20.2"
python /home/tools/pip_download.py -p rich -v "==13.7.1"
python /home/tools/pip_download.py -p ruff -v "==0.6.9"
python /home/tools/pip_download.py -p setuptools -v "==68.2.2"
python /home/tools/pip_download.py -p six -v "==1.16.0"
python /home/tools/pip_download.py -p time-machine -v "==2.9.0"
python /home/tools/pip_download.py -p tomli -v "==2.0.2"
python /home/tools/pip_download.py -p virtualenv -v "==20.24.5"
python /home/tools/pip_download.py -p zipp -v "==3.17.0"
---------------------------
### Thought: The error indicates that the `groq` module is not found. It appears that the `groq` module is likely a local module within the repository. I will check the `src` directory for the `groq` module and add it to the `PYTHONPATH`.

### Action:
```bash
ls /repo/src
```
### Observation:
Running `ls /repo/src`...
groq
`ls /repo/src` executes with returncode: 0

[Current directory]:
/
You are currently in a [python:3.10] container.

ENVIRONMENT REMINDER: You have 178 turns left to complete the task.
The container has successfully executed the following commands in order. Please refer to the execution history, reflect, and decide the subsequent actions. Remember, your ultimate goal is to pass the tests by executing `runtest` or `poetryruntest`.
python /home/tools/pip_download.py -p annotated-types -v "==0.6.0"
python /home/tools/pip_download.py -p anyio -v "==4.4.0"
python /home/tools/pip_download.py -p certifi -v "==2023.7.22"
python /home/tools/pip_download.py -p distro -v "==1.8.0"
python /home/tools/pip_download.py -p exceptiongroup -v "==1.2.2"
python /home/tools/pip_download.py -p h11 -v "==0.14.0"
python /home/tools/pip_download.py -p httpcore -v "==1.0.2"
python /home/tools/pip_download.py -p httpx -v "==0.25.2"
python /home/tools/pip_download.py -p idna -v "==3.4"
python /home/tools/pip_download.py -p pydantic -v "==2.9.2"
python /home/tools/pip_download.py -p pydantic-core -v "==2.23.4"
python /home/tools/pip_download.py -p sniffio -v "==1.3.0"
python /home/tools/pip_download.py -p typing-extensions -v "==4.12.2"
python /home/tools/pip_download.py -p argcomplete -v "==3.1.2"
python /home/tools/pip_download.py -p colorlog -v "==6.7.0"
python /home/tools/pip_download.py -p dirty-equals -v "==0.6.0"
python /home/tools/pip_download.py -p distlib -v "==0.3.7"
python /home/tools/pip_download.py -p filelock -v "==3.12.4"
python /home/tools/pip_download.py -p importlib-metadata -v "==7.0.0"
python /home/tools/pip_download.py -p iniconfig -v "==2.0.0"
python /home/tools/pip_download.py -p markdown-it-py -v "==3.0.0"
python /home/tools/pip_download.py -p mdurl -v "==0.1.2"
python /home/tools/pip_download.py -p mypy -v "==1.13.0"
python /home/tools/pip_download.py -p mypy-extensions -v "==1.0.0"
python /home/tools/pip_download.py -p nest-asyncio -v "==1.6.0"
python /home/tools/pip_download.py -p nodeenv -v "==1.8.0"
python /home/tools/pip_download.py -p nox -v "==2023.4.22"
python /home/tools/pip_download.py -p packaging -v "==23.2"
python /home/tools/pip_download.py -p platformdirs -v "==3.11.0"
python /home/tools/pip_download.py -p pluggy -v "==1.5.0"
python /home/tools/pip_download.py -p pygments -v "==2.18.0"
python /home/tools/pip_download.py -p pyright -v "==1.1.380"
python /home/tools/pip_download.py -p pytest -v "==8.3.3"
python /home/tools/pip_download.py -p pytest-asyncio -v "==0.24.0"
python /home/tools/pip_download.py -p python-dateutil -v "==2.8.2"
python /home/tools/pip_download.py -p pytz -v "==2023.3.post1"
python /home/tools/pip_download.py -p respx -v "==0.20.2"
python /home/tools/pip_download.py -p rich -v "==13.7.1"
python /home/tools/pip_download.py -p ruff -v "==0.6.9"
python /home/tools/pip_download.py -p setuptools -v "==68.2.2"
python /home/tools/pip_download.py -p six -v "==1.16.0"
python /home/tools/pip_download.py -p time-machine -v "==2.9.0"
python /home/tools/pip_download.py -p tomli -v "==2.0.2"
python /home/tools/pip_download.py -p virtualenv -v "==20.24.5"
python /home/tools/pip_download.py -p zipp -v "==3.17.0"
---------------------------
### Thought: The `groq` module is located within the `/repo/src` directory. I will set the `PYTHONPATH` to include this directory and then run the tests again.

### Action:
```bash
export PYTHONPATH=/repo/src && runtest
```
Congratulations, you have successfully configured the environment!
/usr/local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_method_create[loose]
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_method_create_with_all_params[loose]
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_raw_response_create[loose]
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_streaming_response_create[loose]
tests/api_resources/audio/test_translations.py::TestTranslations::test_method_create[loose]
tests/api_resources/audio/test_translations.py::TestTranslations::test_method_create_with_all_params[loose]
tests/api_resources/audio/test_translations.py::TestTranslations::test_raw_response_create[loose]
tests/api_resources/audio/test_translations.py::TestTranslations::test_streaming_response_create[loose]
tests/api_resources/chat/test_completions.py::TestCompletions::test_method_create[loose]
tests/api_resources/chat/test_completions.py::TestCompletions::test_method_create_with_all_params[loose]
tests/api_resources/chat/test_completions.py::TestCompletions::test_raw_response_create[loose]
tests/api_resources/chat/test_completions.py::TestCompletions::test_streaming_response_create[loose]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_method_create[loose]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_method_create_with_all_params[loose]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_raw_response_create[loose]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_streaming_response_create[loose]
tests/api_resources/test_models.py::TestModels::test_method_retrieve[loose]
tests/api_resources/test_models.py::TestModels::test_raw_response_retrieve[loose]
tests/api_resources/test_models.py::TestModels::test_streaming_response_retrieve[loose]
tests/api_resources/test_models.py::TestModels::test_path_params_retrieve[loose]
tests/api_resources/test_models.py::TestModels::test_method_list[loose]
tests/api_resources/test_models.py::TestModels::test_raw_response_list[loose]
tests/api_resources/test_models.py::TestModels::test_streaming_response_list[loose]
tests/api_resources/test_models.py::TestModels::test_method_delete[loose]
tests/api_resources/test_models.py::TestModels::test_raw_response_delete[loose]
tests/api_resources/test_models.py::TestModels::test_streaming_response_delete[loose]
tests/api_resources/test_models.py::TestModels::test_path_params_delete[loose]
tests/test_response.py::test_response_parse_expect_model_union_non_json_content[False]
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_method_create[strict]
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_method_create_with_all_params[strict]
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_raw_response_create[strict]
tests/api_resources/audio/test_transcriptions.py::TestTranscriptions::test_streaming_response_create[strict]
tests/api_resources/audio/test_translations.py::TestTranslations::test_method_create[strict]
tests/api_resources/audio/test_translations.py::TestTranslations::test_method_create_with_all_params[strict]
tests/api_resources/audio/test_translations.py::TestTranslations::test_raw_response_create[strict]
tests/api_resources/audio/test_translations.py::TestTranslations::test_streaming_response_create[strict]
tests/api_resources/chat/test_completions.py::TestCompletions::test_method_create[strict]
tests/api_resources/chat/test_completions.py::TestCompletions::test_method_create_with_all_params[strict]
tests/api_resources/chat/test_completions.py::TestCompletions::test_raw_response_create[strict]
tests/api_resources/chat/test_completions.py::TestCompletions::test_streaming_response_create[strict]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_method_create[strict]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_method_create_with_all_params[strict]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_raw_response_create[strict]
tests/api_resources/test_embeddings.py::TestEmbeddings::test_streaming_response_create[strict]
tests/api_resources/test_models.py::TestModels::test_method_retrieve[strict]
tests/api_resources/test_models.py::TestModels::test_raw_response_retrieve[strict]
tests/api_resources/test_models.py::TestModels::test_streaming_response_retrieve[strict]
tests/api_resources/test_models.py::TestModels::test_path_params_retrieve[strict]
tests/api_resources/test_models.py::TestModels::test_method_list[strict]
tests/api_resources/test_models.py::TestModels::test_raw_response_list[strict]
tests/api_resources/test_models.py::TestModels::test_streaming_response_list[strict]
tests/api_resources/test_models.py::TestModels::test_method_delete[strict]
tests/api_resources/test_models.py::TestModels::test_raw_response_delete[strict]
tests/api_resources/test_models.py::TestModels::test_streaming_response_delete[strict]
tests/api_resources/test_models.py::TestModels::test_path_params_delete[strict]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_method_create[loose]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_method_create_with_all_params[loose]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_raw_response_create[loose]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_streaming_response_create[loose]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_method_create[loose]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_method_create_with_all_params[loose]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_raw_response_create[loose]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_streaming_response_create[loose]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_method_create[loose]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_method_create_with_all_params[loose]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_raw_response_create[loose]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_streaming_response_create[loose]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_method_create[loose]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_method_create_with_all_params[loose]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_raw_response_create[loose]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_streaming_response_create[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_method_retrieve[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_raw_response_retrieve[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_streaming_response_retrieve[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_path_params_retrieve[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_method_list[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_raw_response_list[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_streaming_response_list[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_method_delete[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_raw_response_delete[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_streaming_response_delete[loose]
tests/api_resources/test_models.py::TestAsyncModels::test_path_params_delete[loose]
tests/test_response.py::test_async_response_parse_expect_model_union_non_json_content[False]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_method_create[strict]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_method_create_with_all_params[strict]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_raw_response_create[strict]
tests/api_resources/audio/test_transcriptions.py::TestAsyncTranscriptions::test_streaming_response_create[strict]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_method_create[strict]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_method_create_with_all_params[strict]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_raw_response_create[strict]
tests/api_resources/audio/test_translations.py::TestAsyncTranslations::test_streaming_response_create[strict]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_method_create[strict]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_method_create_with_all_params[strict]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_raw_response_create[strict]
tests/api_resources/chat/test_completions.py::TestAsyncCompletions::test_streaming_response_create[strict]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_method_create[strict]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_method_create_with_all_params[strict]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_raw_response_create[strict]
tests/api_resources/test_embeddings.py::TestAsyncEmbeddings::test_streaming_response_create[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_method_retrieve[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_raw_response_retrieve[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_streaming_response_retrieve[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_path_params_retrieve[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_method_list[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_raw_response_list[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_streaming_response_list[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_method_delete[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_raw_response_delete[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_streaming_response_delete[strict]
tests/api_resources/test_models.py::TestAsyncModels::test_path_params_delete[strict]
tests/test_client.py::TestGroq::test_raw_response
tests/test_client.py::TestGroq::test_raw_response_for_binary
tests/test_client.py::TestGroq::test_copy
tests/test_client.py::TestGroq::test_copy_default_options
tests/test_client.py::TestGroq::test_copy_default_headers
tests/test_client.py::TestGroq::test_copy_default_query
tests/test_client.py::TestGroq::test_copy_signature
tests/test_client.py::TestGroq::test_copy_build_request
tests/test_client.py::TestGroq::test_request_timeout
tests/test_client.py::TestGroq::test_client_timeout_option
tests/test_client.py::TestGroq::test_http_client_timeout_option
tests/test_client.py::TestGroq::test_invalid_http_client
tests/test_client.py::TestGroq::test_default_headers_option
tests/test_client.py::TestGroq::test_validate_headers
tests/test_client.py::TestGroq::test_default_query_option
tests/test_client.py::TestGroq::test_request_extra_json
tests/test_client.py::TestGroq::test_request_extra_headers
tests/test_client.py::TestGroq::test_request_extra_query
tests/test_client.py::TestGroq::test_multipart_repeating_array
tests/test_client.py::TestGroq::test_basic_union_response
tests/test_client.py::TestGroq::test_union_response_different_types
tests/test_client.py::TestGroq::test_non_application_json_content_type_for_json_data
tests/test_client.py::TestGroq::test_base_url_setter
tests/test_client.py::TestGroq::test_base_url_env
tests/test_client.py::TestGroq::test_base_url_trailing_slash[standard]
tests/test_client.py::TestGroq::test_base_url_trailing_slash[custom http client]
tests/test_client.py::TestGroq::test_base_url_no_trailing_slash[standard]
tests/test_client.py::TestGroq::test_base_url_no_trailing_slash[custom http client]
tests/test_client.py::TestGroq::test_absolute_request_url[standard]
tests/test_client.py::TestGroq::test_absolute_request_url[custom http client]
tests/test_client.py::TestGroq::test_copied_client_does_not_close_http
tests/test_client.py::TestGroq::test_client_context_manager
tests/test_client.py::TestGroq::test_client_response_validation_error
tests/test_client.py::TestGroq::test_client_max_retries_validation
tests/test_client.py::TestGroq::test_received_text_for_expected_json
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-20-20]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-0-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3--10-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-60-60]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-61-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:26:57 GMT-20]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:26:37 GMT-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:26:27 GMT-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:27:37 GMT-60]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:27:38 GMT-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-99999999999999999999999999999999999-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3-Zun, 29 Sep 2023 16:26:27 GMT-0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[3--0.5]
tests/test_client.py::TestGroq::test_parse_retry_after_header[2--1.0]
tests/test_client.py::TestGroq::test_parse_retry_after_header[1--2.0]
tests/test_client.py::TestGroq::test_parse_retry_after_header[-1100--8]
tests/test_client.py::TestGroq::test_retrying_timeout_errors_doesnt_leak
tests/test_client.py::TestGroq::test_retrying_status_errors_doesnt_leak
tests/test_client.py::TestGroq::test_retries_taken[status-0]
tests/test_client.py::TestGroq::test_retries_taken[status-2]
tests/test_client.py::TestGroq::test_retries_taken[status-4]
tests/test_client.py::TestGroq::test_retries_taken[exception-0]
tests/test_client.py::TestGroq::test_retries_taken[exception-2]
tests/test_client.py::TestGroq::test_retries_taken[exception-4]
tests/test_client.py::TestGroq::test_omit_retry_count_header[0]
tests/test_client.py::TestGroq::test_omit_retry_count_header[2]
tests/test_client.py::TestGroq::test_omit_retry_count_header[4]
tests/test_client.py::TestGroq::test_overwrite_retry_count_header[0]
tests/test_client.py::TestGroq::test_overwrite_retry_count_header[2]
tests/test_client.py::TestGroq::test_overwrite_retry_count_header[4]
tests/test_client.py::TestAsyncGroq::test_raw_response
tests/test_client.py::TestAsyncGroq::test_raw_response_for_binary
tests/test_client.py::TestAsyncGroq::test_copy
tests/test_client.py::TestAsyncGroq::test_copy_default_options
tests/test_client.py::TestAsyncGroq::test_copy_default_headers
tests/test_client.py::TestAsyncGroq::test_copy_default_query
tests/test_client.py::TestAsyncGroq::test_copy_signature
tests/test_client.py::TestAsyncGroq::test_copy_build_request
tests/test_client.py::TestAsyncGroq::test_request_timeout
tests/test_client.py::TestAsyncGroq::test_client_timeout_option
tests/test_client.py::TestAsyncGroq::test_http_client_timeout_option
tests/test_client.py::TestAsyncGroq::test_invalid_http_client
tests/test_client.py::TestAsyncGroq::test_default_headers_option
tests/test_client.py::TestAsyncGroq::test_validate_headers
tests/test_client.py::TestAsyncGroq::test_default_query_option
tests/test_client.py::TestAsyncGroq::test_request_extra_json
tests/test_client.py::TestAsyncGroq::test_request_extra_headers
tests/test_client.py::TestAsyncGroq::test_request_extra_query
tests/test_client.py::TestAsyncGroq::test_multipart_repeating_array
tests/test_client.py::TestAsyncGroq::test_basic_union_response
tests/test_client.py::TestAsyncGroq::test_union_response_different_types
tests/test_client.py::TestAsyncGroq::test_non_application_json_content_type_for_json_data
tests/test_client.py::TestAsyncGroq::test_base_url_setter
tests/test_client.py::TestAsyncGroq::test_base_url_env
tests/test_client.py::TestAsyncGroq::test_base_url_trailing_slash[standard]
tests/test_client.py::TestAsyncGroq::test_base_url_trailing_slash[custom http client]
tests/test_client.py::TestAsyncGroq::test_base_url_no_trailing_slash[standard]
tests/test_client.py::TestAsyncGroq::test_base_url_no_trailing_slash[custom http client]
tests/test_client.py::TestAsyncGroq::test_absolute_request_url[standard]
tests/test_client.py::TestAsyncGroq::test_absolute_request_url[custom http client]
tests/test_client.py::TestAsyncGroq::test_copied_client_does_not_close_http
tests/test_client.py::TestAsyncGroq::test_client_context_manager
tests/test_client.py::TestAsyncGroq::test_client_response_validation_error
tests/test_client.py::TestAsyncGroq::test_client_max_retries_validation
tests/test_client.py::TestAsyncGroq::test_received_text_for_expected_json
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-20-20]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-0-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3--10-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-60-60]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-61-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:26:57 GMT-20]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:26:37 GMT-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:26:27 GMT-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:27:37 GMT-60]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-Fri, 29 Sep 2023 16:27:38 GMT-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-99999999999999999999999999999999999-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3-Zun, 29 Sep 2023 16:26:27 GMT-0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[3--0.5]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[2--1.0]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[1--2.0]
tests/test_client.py::TestAsyncGroq::test_parse_retry_after_header[-1100--8]
tests/test_client.py::TestAsyncGroq::test_retrying_timeout_errors_doesnt_leak
tests/test_client.py::TestAsyncGroq::test_retrying_status_errors_doesnt_leak
tests/test_client.py::TestAsyncGroq::test_retries_taken[status-0]
tests/test_client.py::TestAsyncGroq::test_retries_taken[status-2]
tests/test_client.py::TestAsyncGroq::test_retries_taken[status-4]
tests/test_client.py::TestAsyncGroq::test_retries_taken[exception-0]
tests/test_client.py::TestAsyncGroq::test_retries_taken[exception-2]
tests/test_client.py::TestAsyncGroq::test_retries_taken[exception-4]
tests/test_client.py::TestAsyncGroq::test_omit_retry_count_header[0]
tests/test_client.py::TestAsyncGroq::test_omit_retry_count_header[2]
tests/test_client.py::TestAsyncGroq::test_omit_retry_count_header[4]
tests/test_client.py::TestAsyncGroq::test_overwrite_retry_count_header[0]
tests/test_client.py::TestAsyncGroq::test_overwrite_retry_count_header[2]
tests/test_client.py::TestAsyncGroq::test_overwrite_retry_count_header[4]
tests/test_client.py::TestAsyncGroq::test_get_platform
tests/test_deepcopy.py::test_simple_dict
tests/test_deepcopy.py::test_nested_dict
tests/test_deepcopy.py::test_complex_nested_dict
tests/test_deepcopy.py::test_simple_list
tests/test_deepcopy.py::test_nested_list
tests/test_deepcopy.py::test_ignores_other_types
tests/test_extract_files.py::test_removes_files_from_input
tests/test_extract_files.py::test_multiple_files
tests/test_extract_files.py::test_ignores_incorrect_paths[dict expecting array]
tests/test_extract_files.py::test_ignores_incorrect_paths[array expecting dict]
tests/test_extract_files.py::test_ignores_incorrect_paths[unknown keys]
tests/test_files.py::test_pathlib_includes_file_name
tests/test_files.py::test_tuple_input
tests/test_files.py::test_async_pathlib_includes_file_name
tests/test_files.py::test_async_supports_anyio_path
tests/test_files.py::test_async_tuple_input
tests/test_files.py::test_string_not_allowed
tests/test_models.py::test_basic[correct type]
tests/test_models.py::test_basic[mismatched]
tests/test_models.py::test_directly_nested_model
tests/test_models.py::test_optional_nested_model
tests/test_models.py::test_list_nested_model
tests/test_models.py::test_optional_list_nested_model
tests/test_models.py::test_list_optional_items_nested_model
tests/test_models.py::test_list_mismatched_type
tests/test_models.py::test_raw_dictionary
tests/test_models.py::test_nested_dictionary_model
tests/test_models.py::test_unknown_fields
tests/test_models.py::test_strict_validation_unknown_fields
tests/test_models.py::test_aliases
tests/test_models.py::test_repr
tests/test_models.py::test_repr_nested_model
tests/test_models.py::test_optional_list
tests/test_models.py::test_nested_union_of_models
tests/test_models.py::test_nested_union_of_mixed_types
tests/test_models.py::test_nested_union_multiple_variants
tests/test_models.py::test_nested_union_invalid_data
tests/test_models.py::test_list_of_unions
tests/test_models.py::test_union_of_lists
tests/test_models.py::test_dict_of_union
tests/test_models.py::test_double_nested_union
tests/test_models.py::test_union_of_dict
tests/test_models.py::test_iso8601_datetime
tests/test_models.py::test_does_not_coerce_int
tests/test_models.py::test_int_to_float_safe_conversion
tests/test_models.py::test_deprecated_alias
tests/test_models.py::test_omitted_fields
tests/test_models.py::test_to_dict
tests/test_models.py::test_forwards_compat_model_dump_method
tests/test_models.py::test_compat_method_no_error_for_warnings
tests/test_models.py::test_to_json
tests/test_models.py::test_forwards_compat_model_dump_json_method
tests/test_models.py::test_type_compat
tests/test_models.py::test_annotated_types
tests/test_models.py::test_discriminated_unions_invalid_data
tests/test_models.py::test_discriminated_unions_unknown_variant
tests/test_models.py::test_discriminated_unions_invalid_data_nested_unions
tests/test_models.py::test_discriminated_unions_with_aliases_invalid_data
tests/test_models.py::test_discriminated_unions_overlapping_discriminators_invalid_data
tests/test_models.py::test_discriminated_unions_invalid_data_uses_cache
tests/test_qs.py::test_empty
tests/test_qs.py::test_basic
tests/test_qs.py::test_nested_dotted[class]
tests/test_qs.py::test_nested_dotted[function]
tests/test_qs.py::test_nested_brackets
tests/test_qs.py::test_array_comma[class]
tests/test_qs.py::test_array_comma[function]
tests/test_qs.py::test_array_repeat
tests/test_qs.py::test_array_brackets[class]
tests/test_qs.py::test_array_brackets[function]
tests/test_qs.py::test_unknown_array_format
tests/test_required_args.py::test_too_many_positional_params
tests/test_required_args.py::test_positional_param
tests/test_required_args.py::test_keyword_only_param
tests/test_required_args.py::test_multiple_params
tests/test_required_args.py::test_multiple_variants
tests/test_required_args.py::test_multiple_params_multiple_variants
tests/test_response.py::test_extract_response_type_direct_classes
tests/test_response.py::test_extract_response_type_direct_class_missing_type_arg
tests/test_response.py::test_extract_response_type_concrete_subclasses
tests/test_response.py::test_extract_response_type_binary_response
tests/test_response.py::test_response_parse_mismatched_basemodel
tests/test_response.py::test_async_response_parse_mismatched_basemodel
tests/test_response.py::test_response_parse_custom_stream
tests/test_response.py::test_async_response_parse_custom_stream
tests/test_response.py::test_response_parse_custom_model
tests/test_response.py::test_async_response_parse_custom_model
tests/test_response.py::test_response_parse_annotated_type
tests/test_response.py::test_async_response_parse_annotated_type
tests/test_response.py::test_response_parse_bool[false-False]
tests/test_response.py::test_response_parse_bool[true-True]
tests/test_response.py::test_response_parse_bool[False-False]
tests/test_response.py::test_response_parse_bool[True-True]
tests/test_response.py::test_response_parse_bool[TrUe-True]
tests/test_response.py::test_response_parse_bool[FalSe-False]
tests/test_response.py::test_async_response_parse_bool[false-False]
tests/test_response.py::test_async_response_parse_bool[true-True]
tests/test_response.py::test_async_response_parse_bool[False-False]
tests/test_response.py::test_async_response_parse_bool[True-True]
tests/test_response.py::test_async_response_parse_bool[TrUe-True]
tests/test_response.py::test_async_response_parse_bool[FalSe-False]
tests/test_streaming.py::test_basic[sync]
tests/test_streaming.py::test_basic[async]
tests/test_streaming.py::test_data_missing_event[sync]
tests/test_streaming.py::test_data_missing_event[async]
tests/test_streaming.py::test_event_missing_data[sync]
tests/test_streaming.py::test_event_missing_data[async]
tests/test_streaming.py::test_multiple_events[sync]
tests/test_streaming.py::test_multiple_events[async]
tests/test_streaming.py::test_multiple_events_with_data[sync]
tests/test_streaming.py::test_multiple_events_with_data[async]
tests/test_streaming.py::test_multiple_data_lines_with_empty_line[sync]
tests/test_streaming.py::test_multiple_data_lines_with_empty_line[async]
tests/test_streaming.py::test_data_json_escaped_double_new_line[sync]
tests/test_streaming.py::test_data_json_escaped_double_new_line[async]
tests/test_streaming.py::test_multiple_data_lines[sync]
tests/test_streaming.py::test_multiple_data_lines[async]
tests/test_streaming.py::test_special_new_line_character[sync]
tests/test_streaming.py::test_special_new_line_character[async]
tests/test_streaming.py::test_multi_byte_character_multiple_chunks[sync]
tests/test_streaming.py::test_multi_byte_character_multiple_chunks[async]
tests/test_transform.py::test_top_level_alias[sync]
tests/test_transform.py::test_top_level_alias[async]
tests/test_transform.py::test_recursive_typeddict[sync]
tests/test_transform.py::test_recursive_typeddict[async]
tests/test_transform.py::test_list_of_typeddict[sync]
tests/test_transform.py::test_list_of_typeddict[async]
tests/test_transform.py::test_union_of_typeddict[sync]
tests/test_transform.py::test_union_of_typeddict[async]
tests/test_transform.py::test_union_of_list[sync]
tests/test_transform.py::test_union_of_list[async]
tests/test_transform.py::test_includes_unknown_keys[sync]
tests/test_transform.py::test_includes_unknown_keys[async]
tests/test_transform.py::test_ignores_invalid_input[sync]
tests/test_transform.py::test_ignores_invalid_input[async]
tests/test_transform.py::test_iso8601_format[sync]
tests/test_transform.py::test_iso8601_format[async]
tests/test_transform.py::test_optional_iso8601_format[sync]
tests/test_transform.py::test_optional_iso8601_format[async]
tests/test_transform.py::test_required_iso8601_format[sync]
tests/test_transform.py::test_required_iso8601_format[async]
tests/test_transform.py::test_union_datetime[sync]
tests/test_transform.py::test_union_datetime[async]
tests/test_transform.py::test_nested_list_iso6801_format[sync]
tests/test_transform.py::test_nested_list_iso6801_format[async]
tests/test_transform.py::test_datetime_custom_format[sync]
tests/test_transform.py::test_datetime_custom_format[async]
tests/test_transform.py::test_datetime_with_alias[sync]
tests/test_transform.py::test_datetime_with_alias[async]
tests/test_transform.py::test_pydantic_model_to_dictionary[sync]
tests/test_transform.py::test_pydantic_model_to_dictionary[async]
tests/test_transform.py::test_pydantic_empty_model[sync]
tests/test_transform.py::test_pydantic_empty_model[async]
tests/test_transform.py::test_pydantic_unknown_field[sync]
tests/test_transform.py::test_pydantic_unknown_field[async]
tests/test_transform.py::test_pydantic_mismatched_types[sync]
tests/test_transform.py::test_pydantic_mismatched_types[async]
tests/test_transform.py::test_pydantic_mismatched_object_type[sync]
tests/test_transform.py::test_pydantic_mismatched_object_type[async]
tests/test_transform.py::test_pydantic_nested_objects[sync]
tests/test_transform.py::test_pydantic_nested_objects[async]
tests/test_transform.py::test_pydantic_default_field[sync]
tests/test_transform.py::test_pydantic_default_field[async]
tests/test_transform.py::test_iterable_of_dictionaries[sync]
tests/test_transform.py::test_iterable_of_dictionaries[async]
tests/test_transform.py::test_iterable_union_str[sync]
tests/test_transform.py::test_iterable_union_str[async]
tests/test_transform.py::test_base64_file_input[sync]
tests/test_transform.py::test_base64_file_input[async]
tests/test_utils/test_proxy.py::test_recursive_proxy
tests/test_utils/test_typing.py::test_extract_type_var
tests/test_utils/test_typing.py::test_extract_type_var_generic_subclass
tests/test_utils/test_typing.py::test_extract_type_var_multiple
tests/test_utils/test_typing.py::test_extract_type_var_generic_subclass_multiple
tests/test_utils/test_typing.py::test_extract_type_var_generic_subclass_different_ordering_multiple

416 tests collected in 2.77s
Container 6662329e35f3 stopped and removed
Spend totally 1067.8089725971222.
