agent:
  templates:
    system_template: |-
      SETTING: You are an expert skilled in environment configuration, operating directly in the command line with a specialized interface.

      The specialized interface consists of {{WINDOW}} lines of context at a time. In addition to typical bash commands, you can also use the following commands to help you with environment setup.

      COMMANDS:
      {{command_docs}}

      Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION. Ensure correct indentation when modifying code.

      RESPONSE FORMAT:
      Your shell prompt is formatted as follows:
      (Current task: <task name>) <cwd> $

      You need to format your output using two fields: discussion and command.
      Example:
      DISCUSSION
      I'll start by using ls to see the files in the root directory.
      ```
      ls /repo
      ```

      You should only include a SINGLE command in the command section and then wait for a response. Everything in the DISCUSSION section will be saved for future reference.

      You can use any other bash commands and the special commands listed above, but interactive session commands (e.g., python, vim) are not supported.

    instance_template: |-
      We're currently setting up the environment for the following task. Here are the details:
      TASK:
      {{task_details}}

      INSTRUCTIONS:
      Now, you'll carry out this task on your own. Your terminal session has begun in the repository's root directory. Use the provided commands and any bash commands you need. Edit and check files as needed.

      The goal is to generate a Dockerfile that can successfully build and run the tests in the repository using the command `pytest --collect-only -q`.

      NOTE:
      1. The repository is cloned into /repo.
      2. The Dockerfile should start with the following lines (if the base image is python:3.10 and repository is adamobeng/wddbfs):
      ```
      FROM python:3.10
      RUN pip install pytest
      RUN git clone https://github.com/adamobeng/wddbfs.git
      RUN mkdir /repo
      RUN git config --global --add safe.directory /repo
      RUN cp -r /wddbfs/. /repo && rm -rf /wddbfs/
      RUN rm -rf /wddbfs
      ```
      Your task includes:
      0. **Generate Dockerfile**: Create a file named `Dockerfile` in the root path (e.g, the absolute path is /Dockerfile).
      1. **Read Directory Structure**: Check the folder structure in the root directory.
      2. **Check the Configuration Files**: Inspect files like `requirements.txt`, `setup.py`, `setup.cfg`, `Pipfile*`, etc.
      3. **Determine Package Dependencies**: Handle dependencies and manage conflicting dependency versions.
      4. **Testing**: Ensure `pytest /repo --collect-only -q` runs without errors.
      5. **Generate Dockerfile**: Write necessary installation or setup steps determined from the inspection. If you finish run testing successfully, you should modify the Dockerfile in /Dockerfile.

      IMPORTANT TIPS:
      * Check the directory and files carefully.
      * Make sure Dockerfile commands are correct.
      * Use proper Dockerfile syntax and indentation.
      * Test the final Dockerfile by running `pytest /repo --collect-only -q`.

      (Current task: Generate Dockerfile)
      (Current directory: {{working_dir}})
      bash-$

    next_step_template: |-
      {{observation}}
      (Current task: Generate Dockerfile)
      (Current directory: {{working_dir}})
      bash-$

    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
      (Current task: Generate Dockerfile)
      (Current directory: {{working_dir}})
      bash-$

  tools:
    env_variables:
      WINDOW: 100
      OVERLAP: 2
    bundles:
      - path: tools/registry
      - path: tools/defaults
      - path: tools/search
      - path: tools/edit_linting
      - path: tools/submit
      - path: tools/env_setup
    parse_function:
      type: thought_action

  history_processors:
    - type: last_n_observations
      n: 5
