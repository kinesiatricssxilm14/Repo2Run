2024-12-25T09:09:39.837020011Z [?2004hroot@f7349b543439:/# [7mexport http_proxy= https_proxy= no_proxy=.d.org[27m
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cexport http_proxy= https_proxy= no_proxy=.d.org
2024-12-25T09:09:44.860984460Z [?2004l
[?2004hroot@f7349b543439:/# [7mmkdir -p ~/.pip && touch ~/.pip/pip.conf[27m
2024-12-25T09:09:45.140332107Z 
[7mecho "[global]" >> ~/.pip/pip.conf && echo "index-url=/simple/" >> ~/.pip/pip.conf && echo "[install]" >> ~/.pip/pip.conf && echo "trusted-host=dpypi.d.o[27m[7mr[27m[7mg" >> ~/.pip/pip.conf[27m[A[Amkdir -p ~/.pip && touch ~/.pip/pip.conf
2024-12-25T09:09:45.140357747Z 
echo "[global]" >> ~/.pip/pip.conf && echo "index-url=/simple/" >> ~/.pip/pip.conf && echo "[install]" >> ~/.pip/pip.conf && echo "trusted-host=dpypi.d.org" >> ~/.pip/pip.conf
2024-12-25T09:09:50.509702341Z [?2004l
[?2004hroot@f7349b543439:/# [7mapt-get update && apt-get install -y curl[27m
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Capt-get update && apt-get install -y curl
2024-12-25T09:09:50.702840078Z [?2004l

0% [Working]
            
Get:1 http://deb.debian.org/debian bookworm InRelease [151 kB]
2024-12-25T09:09:51.058938703Z 
0% [1 InRelease 823 B/151 kB 1%]
                                
0% [Working]
0% [Waiting for headers]
                        
Get:2 http://deb.debian.org/debian bookworm-updates InRelease [55.4 kB]
2024-12-25T09:09:51.216837170Z 
0% [2 InRelease 1444 B/55.4 kB 3%]
                                  
0% [Working]
0% [Waiting for headers]
                        
Get:3 http://deb.debian.org/debian-security bookworm-security InRelease [48.0 kB]
2024-12-25T09:09:51.374912289Z 
0% [3 InRelease 1444 B/48.0 kB 3%]
                                  
0% [Working]
16% [Waiting for headers]
                         
Get:4 http://deb.debian.org/debian bookworm/main amd64 Packages [8789 kB]
2024-12-25T09:09:51.886079299Z 
16% [4 Packages 2049 B/8789 kB 0%]
                                  
91% [Waiting for headers]
91% [4 Packages store 0 B] [Waiting for headers]
                                                
Get:5 http://deb.debian.org/debian bookworm-updates/main amd64 Packages [8856 B]
2024-12-25T09:09:52.040346371Z 
91% [4 Packages store 0 B] [5 Packages 8134 B/8856 B 92%]
                                                         
91% [4 Packages store 0 B] [Waiting for headers]
                                                
Get:6 http://deb.debian.org/debian-security bookworm-security/main amd64 Packages [236 kB]
2024-12-25T09:09:52.864934568Z 
92% [4 Packages store 0 B] [6 Packages 83.1 kB/236 kB 35%]
                                                          
93% [4 Packages store 0 B]
93% [4 Packages store 0 B]
                          
96% [Working]
96% [5 Packages store 0 B]
                          
98% [Working]
98% [6 Packages store 0 B]
                          
100% [Working]
              
Fetched 9288 kB in 2s (3965 kB/s)
2024-12-25T09:09:53.387340009Z 
Reading package lists... 0%

Reading package lists... 0%

Reading package lists... 0%

Reading package lists... 96%

Reading package lists... 96%

Reading package lists... 96%

Reading package lists... 96%

Reading package lists... 99%

Reading package lists... 99%

Reading package lists... Done

2024-12-25T09:09:53.901142615Z 
Reading package lists... 0%

Reading package lists... 0%

Reading package lists... 0%

Reading package lists... 96%

Reading package lists... 96%

Reading package lists... 96%

Reading package lists... 96%

Reading package lists... 99%

Reading package lists... 99%

Reading package lists... Done

2024-12-25T09:09:54.022362292Z 
Building dependency tree... 0%

Building dependency tree... 0%

Building dependency tree... 50%

Building dependency tree... 50%

Building dependency tree... Done

2024-12-25T09:09:54.022637247Z 
Reading state information... 0% 

Reading state information... 0%

Reading state information... Done

2024-12-25T09:09:54.144045787Z The following additional packages will be installed:
2024-12-25T09:09:54.144559199Z   libcurl3-gnutls libcurl4 libcurl4-openssl-dev
2024-12-25T09:09:54.145307320Z Suggested packages:
2024-12-25T09:09:54.145333466Z   libcurl4-doc libidn-dev libldap2-dev librtmp-dev libssh2-1-dev
2024-12-25T09:09:54.166917800Z The following packages will be upgraded:
2024-12-25T09:09:54.167466945Z   curl libcurl3-gnutls libcurl4 libcurl4-openssl-dev
2024-12-25T09:09:54.171314233Z 4 upgraded, 0 newly installed, 0 to remove and 39 not upgraded.
2024-12-25T09:09:54.171325529Z Need to get 1581 kB of archives.
2024-12-25T09:09:54.171327871Z After this operation, 0 B of additional disk space will be used.
2024-12-25T09:09:54.362351224Z 
0% [Working]
            
Get:1 http://deb.debian.org/debian bookworm/main amd64 libcurl4-openssl-dev amd64 7.88.1-10+deb12u8 [491 kB]
2024-12-25T09:09:54.874763491Z 
0% [1 libcurl4-openssl-dev 1444 B/491 kB 0%]
                                            
30% [Working]
             
Get:2 http://deb.debian.org/debian bookworm/main amd64 curl amd64 7.88.1-10+deb12u8 [315 kB]
2024-12-25T09:09:55.040764556Z 
30% [2 curl 8028 B/315 kB 3%]
                             
51% [Waiting for headers]
                         
Get:3 http://deb.debian.org/debian bookworm/main amd64 libcurl4 amd64 7.88.1-10+deb12u8 [390 kB]
2024-12-25T09:09:55.206622394Z 
51% [3 libcurl4 7220 B/390 kB 2%]
                                 
76% [Waiting for headers]
                         
Get:4 http://deb.debian.org/debian bookworm/main amd64 libcurl3-gnutls amd64 7.88.1-10+deb12u8 [385 kB]
2024-12-25T09:09:55.284581282Z 
76% [4 libcurl3-gnutls 12.3 kB/385 kB 3%]
                                         
100% [Working]
              
Fetched 1581 kB in 1s (1421 kB/s)
2024-12-25T09:09:55.411755528Z debconf: delaying package configuration, since apt-utils is not installed
2024-12-25T09:09:55.462332615Z (Reading database ... 
(Reading database ... 5%
(Reading database ... 10%
(Reading database ... 15%
(Reading database ... 20%
(Reading database ... 25%
(Reading database ... 30%
(Reading database ... 35%
(Reading database ... 40%
(Reading database ... 45%
(Reading database ... 50%
(Reading database ... 55%
(Reading database ... 60%
(Reading database ... 65%
(Reading database ... 70%
(Reading database ... 75%
(Reading database ... 80%
(Reading database ... 85%
(Reading database ... 90%
(Reading database ... 95%
(Reading database ... 100%
(Reading database ... 23969 files and directories currently installed.)
2024-12-25T09:09:55.463088926Z Preparing to unpack .../libcurl4-openssl-dev_7.88.1-10+deb12u8_amd64.deb ...
2024-12-25T09:09:55.467723727Z Unpacking libcurl4-openssl-dev:amd64 (7.88.1-10+deb12u8) over (7.88.1-10+deb12u7) ...
2024-12-25T09:09:55.534615093Z Preparing to unpack .../curl_7.88.1-10+deb12u8_amd64.deb ...
2024-12-25T09:09:55.539514905Z Unpacking curl (7.88.1-10+deb12u8) over (7.88.1-10+deb12u7) ...
2024-12-25T09:09:55.585644304Z Preparing to unpack .../libcurl4_7.88.1-10+deb12u8_amd64.deb ...
2024-12-25T09:09:55.591996733Z Unpacking libcurl4:amd64 (7.88.1-10+deb12u8) over (7.88.1-10+deb12u7) ...
2024-12-25T09:09:55.644888870Z Preparing to unpack .../libcurl3-gnutls_7.88.1-10+deb12u8_amd64.deb ...
2024-12-25T09:09:55.649385230Z Unpacking libcurl3-gnutls:amd64 (7.88.1-10+deb12u8) over (7.88.1-10+deb12u7) ...
2024-12-25T09:09:55.707870114Z Setting up libcurl3-gnutls:amd64 (7.88.1-10+deb12u8) ...
2024-12-25T09:09:55.712993648Z Setting up libcurl4:amd64 (7.88.1-10+deb12u8) ...
2024-12-25T09:09:55.717345732Z Setting up curl (7.88.1-10+deb12u8) ...
2024-12-25T09:09:55.721805728Z Setting up libcurl4-openssl-dev:amd64 (7.88.1-10+deb12u8) ...
2024-12-25T09:09:55.726744527Z Processing triggers for libc-bin (2.36-9+deb12u8) ...
2024-12-25T09:09:58.297299132Z [?2004hroot@f7349b543439:/# [7mpip install pytest[27mpip install pytest
2024-12-25T09:09:59.819406170Z [?2004l
Looking in indexes: /simple/
2024-12-25T09:09:59.961650400Z Collecting pytest
2024-12-25T09:09:59.977382657Z   Downloading /packages/pytest/pytest-8.3.4-py3-none-any.whl (343 kB)
2024-12-25T09:09:59.999331954Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/343.1 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m343.1/343.1 kB[0m [31m19.3 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:10:00.049398459Z [?25hCollecting iniconfig
2024-12-25T09:10:00.067064622Z   Downloading /packages/iniconfig/iniconfig-2.0.0-py3-none-any.whl (5.9 kB)
2024-12-25T09:10:00.105783332Z Collecting pluggy<2,>=1.5
2024-12-25T09:10:00.127737964Z   Downloading /packages/pluggy/pluggy-1.5.0-py3-none-any.whl (20 kB)
2024-12-25T09:10:00.172375658Z Collecting exceptiongroup>=1.0.0rc8
2024-12-25T09:10:00.190599939Z   Downloading /packages/exceptiongroup/exceptiongroup-1.2.2-py3-none-any.whl (16 kB)
2024-12-25T09:10:00.262856916Z Collecting packaging
2024-12-25T09:10:00.279915648Z   Downloading /packages/packaging/packaging-24.2-py3-none-any.whl (65 kB)
2024-12-25T09:10:00.290658811Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/65.5 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m65.5/65.5 kB[0m [31m8.4 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:10:00.337074279Z [?25hCollecting tomli>=1
2024-12-25T09:10:00.353445871Z   Downloading /packages/tomli/tomli-2.2.1-py3-none-any.whl (14 kB)
2024-12-25T09:10:00.438440457Z Installing collected packages: tomli, pluggy, packaging, iniconfig, exceptiongroup, pytest
2024-12-25T09:10:00.755778474Z Successfully installed exceptiongroup-1.2.2 iniconfig-2.0.0 packaging-24.2 pluggy-1.5.0 pytest-8.3.4 tomli-2.2.1
2024-12-25T09:10:00.756046070Z [33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv[0m[33m
2024-12-25T09:10:00.857987675Z [0m
2024-12-25T09:10:00.858009888Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m A new release of pip is available: [0m[31;49m23.0.1[0m[39;49m -> [0m[32;49m24.3.1[0m
2024-12-25T09:10:00.858013475Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m To update, run: [0m[32;49mpip install --upgrade pip[0m
2024-12-25T09:10:26.997387535Z [?2004hroot@f7349b543439:/# git clone htpp[K[Ktps://github.com/[7mDataformerAI/dataformer[27mDataformerAI/dataformer.git
2024-12-25T09:10:26.998969838Z [?2004l
Cloning into 'dataformer'...
2024-12-25T09:10:28.532060749Z remote: Enumerating objects: 871, done.[K
2024-12-25T09:10:28.540270003Z remote: Counting objects:   0% (1/213)[K
remote: Counting objects:   1% (3/213)[K
remote: Counting objects:   2% (5/213)[K
remote: Counting objects:   3% (7/213)[K
remote: Counting objects:   4% (9/213)[K
remote: Counting objects:   5% (11/213)[K
remote: Counting objects:   6% (13/213)[K
remote: Counting objects:   7% (15/213)[K
remote: Counting objects:   8% (18/213)[K
remote: Counting objects:   9% (20/213)[K
remote: Counting objects:  10% (22/213)[K
remote: Counting objects:  11% (24/213)[K
remote: Counting objects:  12% (26/213)[K
remote: Counting objects:  13% (28/213)[K
remote: Counting objects:  14% (30/213)[K
remote: Counting objects:  15% (32/213)[K
remote: Counting objects:  16% (35/213)[K
remote: Counting objects:  17% (37/213)[K
remote: Counting objects:  18% (39/213)[K
remote: Counting objects:  19% (41/213)[K
remote: Counting objects:  20% (43/213)[K
remote: Counting objects:  21% (45/213)[K
remote: Counting objects:  22% (47/213)[K
remote: Counting objects:  23% (49/213)[K
remote: Counting objects:  24% (52/213)[K
remote: Counting objects:  25% (54/213)[K
remote: Counting objects:  26% (56/213)[K
remote: Counting objects:  27% (58/213)[K
remote: Counting objects:  28% (60/213)[K
remote: Counting objects:  29% (62/213)[K
remote: Counting objects:  30% (64/213)[K
remote: Counting objects:  31% (67/213)[K
remote: Counting objects:  32% (69/213)[K
remote: Counting objects:  33% (71/213)[K
remote: Counting objects:  34% (73/213)[K
remote: Counting objects:  35% (75/213)[K
remote: Counting objects:  36% (77/213)[K
remote: Counting objects:  37% (79/213)[K
remote: Counting objects:  38% (81/213)[K
remote: Counting objects:  39% (84/213)[K
remote: Counting objects:  40% (86/213)[K
remote: Counting objects:  41% (88/213)[K
remote: Counting objects:  42% (90/213)[K
remote: Counting objects:  43% (92/213)[K
remote: Counting objects:  44% (94/213)[K
remote: Counting objects:  45% (96/213)[K
remote: Counting objects:  46% (98/213)[K
remote: Counting objects:  47% (101/213)[K
remote: Counting objects:  48% (103/213)[K
remote: Counting objects:  49% (105/213)[K
remote: Counting objects:  50% (107/213)[K
remote: Counting objects:  51% (109/213)[K
remote: Counting objects:  52% (111/213)[K
remote: Counting objects:  53% (113/213)[K
remote: Counting objects:  54% (116/213)[K
remote: Counting objects:  55% (118/213)[K
remote: Counting objects:  56% (120/213)[K
remote: Counting objects:  57% (122/213)[K
remote: Counting objects:  58% (124/213)[K
remote: Counting objects:  59% (126/213)[K
remote: Counting objects:  60% (128/213)[K
remote: Counting objects:  61% (130/213)[K
remote: Counting objects:  62% (133/213)[K
remote: Counting objects:  63% (135/213)[K
remote: Counting objects:  64% (137/213)[K
remote: Counting objects:  65% (139/213)[K
remote: Counting objects:  66% (141/213)[K
remote: Counting objects:  67% (143/213)[K
remote: Counting objects:  68% (145/213)[K
remote: Counting objects:  69% (147/213)[K
remote: Counting objects:  70% (150/213)[K
remote: Counting objects:  71% (152/213)[K
remote: Counting objects:  72% (154/213)[K
remote: Counting objects:  73% (156/213)[K
remote: Counting objects:  74% (158/213)[K
remote: Counting objects:  75% (160/213)[K
remote: Counting objects:  76% (162/213)[K
remote: Counting objects:  77% (165/213)[K
remote: Counting objects:  78% (167/213)[K
remote: Counting objects:  79% (169/213)[K
remote: Counting objects:  80% (171/213)[K
remote: Counting objects:  81% (173/213)[K
remote: Counting objects:  82% (175/213)[K
remote: Counting objects:  83% (177/213)[K
remote: Counting objects:  84% (179/213)[K
remote: Counting objects:  85% (182/213)[K
remote: Counting objects:  86% (184/213)[K
remote: Counting objects:  87% (186/213)[K
remote: Counting objects:  88% (188/213)[K
remote: Counting objects:  89% (190/213)[K
remote: Counting objects:  90% (192/213)[K
remote: Counting objects:  91% (194/213)[K
remote: Counting objects:  92% (196/213)[K
remote: Counting objects:  93% (199/213)[K
remote: Counting objects:  94% (201/213)[K
remote: Counting objects:  95% (203/213)[K
remote: Counting objects:  96% (205/213)[K
remote: Counting objects:  97% (207/213)[K
remote: Counting objects:  98% (209/213)[K
remote: Counting objects:  99% (211/213)[K
remote: Counting objects: 100% (213/213)[K
remote: Counting objects: 100% (213/213), done.[K
2024-12-25T09:10:28.545080642Z remote: Compressing objects:   0% (1/151)[K
remote: Compressing objects:   1% (2/151)[K
remote: Compressing objects:   2% (4/151)[K
remote: Compressing objects:   3% (5/151)[K
remote: Compressing objects:   4% (7/151)[K
remote: Compressing objects:   5% (8/151)[K
remote: Compressing objects:   6% (10/151)[K
remote: Compressing objects:   7% (11/151)[K
remote: Compressing objects:   8% (13/151)[K
remote: Compressing objects:   9% (14/151)[K
remote: Compressing objects:  10% (16/151)[K
remote: Compressing objects:  11% (17/151)[K
remote: Compressing objects:  12% (19/151)[K
remote: Compressing objects:  13% (20/151)[K
remote: Compressing objects:  14% (22/151)[K
remote: Compressing objects:  15% (23/151)[K
remote: Compressing objects:  16% (25/151)[K
remote: Compressing objects:  17% (26/151)[K
remote: Compressing objects:  18% (28/151)[K
remote: Compressing objects:  19% (29/151)[K
remote: Compressing objects:  20% (31/151)[K
remote: Compressing objects:  21% (32/151)[K
remote: Compressing objects:  22% (34/151)[K
remote: Compressing objects:  23% (35/151)[K
remote: Compressing objects:  24% (37/151)[K
remote: Compressing objects:  25% (38/151)[K
remote: Compressing objects:  26% (40/151)[K
remote: Compressing objects:  27% (41/151)[K
remote: Compressing objects:  28% (43/151)[K
remote: Compressing objects:  29% (44/151)[K
remote: Compressing objects:  30% (46/151)[K
remote: Compressing objects:  31% (47/151)[K
remote: Compressing objects:  32% (49/151)[K
remote: Compressing objects:  33% (50/151)[K
remote: Compressing objects:  34% (52/151)[K
remote: Compressing objects:  35% (53/151)[K
remote: Compressing objects:  36% (55/151)[K
remote: Compressing objects:  37% (56/151)[K
remote: Compressing objects:  38% (58/151)[K
remote: Compressing objects:  39% (59/151)[K
remote: Compressing objects:  40% (61/151)[K
remote: Compressing objects:  41% (62/151)[K
remote: Compressing objects:  42% (64/151)[K
remote: Compressing objects:  43% (65/151)[K
remote: Compressing objects:  44% (67/151)[K
remote: Compressing objects:  45% (68/151)[K
remote: Compressing objects:  46% (70/151)[K
remote: Compressing objects:  47% (71/151)[K
remote: Compressing objects:  48% (73/151)[K
remote: Compressing objects:  49% (74/151)[K
remote: Compressing objects:  50% (76/151)[K
remote: Compressing objects:  51% (78/151)[K
remote: Compressing objects:  52% (79/151)[K
remote: Compressing objects:  53% (81/151)[K
remote: Compressing objects:  54% (82/151)[K
remote: Compressing objects:  55% (84/151)[K
remote: Compressing objects:  56% (85/151)[K
remote: Compressing objects:  57% (87/151)[K
remote: Compressing objects:  58% (88/151)[K
remote: Compressing objects:  59% (90/151)[K
remote: Compressing objects:  60% (91/151)[K
remote: Compressing objects:  61% (93/151)[K
remote: Compressing objects:  62% (94/151)[K
remote: Compressing objects:  63% (96/151)[K
remote: Compressing objects:  64% (97/151)[K
remote: Compressing objects:  65% (99/151)[K
remote: Compressing objects:  66% (100/151)[K
remote: Compressing objects:  67% (102/151)[K
remote: Compressing objects:  68% (103/151)[K
remote: Compressing objects:  69% (105/151)[K
remote: Compressing objects:  70% (106/151)[K
remote: Compressing objects:  71% (108/151)[K
remote: Compressing objects:  72% (109/151)[K
remote: Compressing objects:  73% (111/151)[K
remote: Compressing objects:  74% (112/151)[K
remote: Compressing objects:  75% (114/151)[K
remote: Compressing objects:  76% (115/151)[K
remote: Compressing objects:  77% (117/151)[K
remote: Compressing objects:  78% (118/151)[K
remote: Compressing objects:  79% (120/151)[K
remote: Compressing objects:  80% (121/151)[K
remote: Compressing objects:  81% (123/151)[K
remote: Compressing objects:  82% (124/151)[K
remote: Compressing objects:  83% (126/151)[K
remote: Compressing objects:  84% (127/151)[K
remote: Compressing objects:  85% (129/151)[K
remote: Compressing objects:  86% (130/151)[K
remote: Compressing objects:  87% (132/151)[K
remote: Compressing objects:  88% (133/151)[K
remote: Compressing objects:  89% (135/151)[K
remote: Compressing objects:  90% (136/151)[K
remote: Compressing objects:  91% (138/151)[K
remote: Compressing objects:  92% (139/151)[K
remote: Compressing objects:  93% (141/151)[K
remote: Compressing objects:  94% (142/151)[K
remote: Compressing objects:  95% (144/151)[K
remote: Compressing objects:  96% (145/151)[K
remote: Compressing objects:  97% (147/151)[K
remote: Compressing objects:  98% (148/151)[K
remote: Compressing objects:  99% (150/151)[K
remote: Compressing objects: 100% (151/151)[K
remote: Compressing objects: 100% (151/151), done.[K
2024-12-25T09:10:28.814138113Z Receiving objects:   0% (1/871)
Receiving objects:   1% (9/871)
Receiving objects:   2% (18/871)
Receiving objects:   3% (27/871)
Receiving objects:   4% (35/871)
Receiving objects:   5% (44/871)
Receiving objects:   6% (53/871)
Receiving objects:   7% (61/871)
Receiving objects:   8% (70/871)
Receiving objects:   9% (79/871)
Receiving objects:  10% (88/871)
Receiving objects:  11% (96/871)
Receiving objects:  12% (105/871)
Receiving objects:  13% (114/871)
Receiving objects:  14% (122/871)
Receiving objects:  15% (131/871)
Receiving objects:  16% (140/871)
Receiving objects:  17% (149/871)
Receiving objects:  18% (157/871)
Receiving objects:  19% (166/871)
Receiving objects:  20% (175/871)
Receiving objects:  21% (183/871)
Receiving objects:  22% (192/871)
Receiving objects:  23% (201/871)
Receiving objects:  24% (210/871)
Receiving objects:  25% (218/871)
Receiving objects:  26% (227/871)
Receiving objects:  27% (236/871)
Receiving objects:  28% (244/871)
Receiving objects:  29% (253/871)
Receiving objects:  30% (262/871)
Receiving objects:  31% (271/871)
Receiving objects:  32% (279/871)
Receiving objects:  33% (288/871)
Receiving objects:  34% (297/871)
Receiving objects:  35% (305/871)
Receiving objects:  36% (314/871)
Receiving objects:  37% (323/871)
Receiving objects:  38% (331/871)
Receiving objects:  39% (340/871)
Receiving objects:  40% (349/871)
Receiving objects:  41% (358/871)
Receiving objects:  42% (366/871)
Receiving objects:  43% (375/871)
Receiving objects:  44% (384/871)
Receiving objects:  45% (392/871)
Receiving objects:  46% (401/871)
Receiving objects:  47% (410/871)
Receiving objects:  48% (419/871)
Receiving objects:  49% (427/871)
Receiving objects:  50% (436/871)
Receiving objects:  51% (445/871)
Receiving objects:  52% (453/871)
Receiving objects:  53% (462/871)
Receiving objects:  54% (471/871)
Receiving objects:  55% (480/871)
Receiving objects:  56% (488/871)
Receiving objects:  57% (497/871)
Receiving objects:  58% (506/871)
Receiving objects:  59% (514/871)
Receiving objects:  60% (523/871)
Receiving objects:  61% (532/871)
Receiving objects:  62% (541/871)
Receiving objects:  63% (549/871)
Receiving objects:  64% (558/871)
Receiving objects:  65% (567/871)
Receiving objects:  66% (575/871)
Receiving objects:  67% (584/871)
Receiving objects:  68% (593/871)
Receiving objects:  69% (601/871)
Receiving objects:  70% (610/871)
Receiving objects:  71% (619/871)
Receiving objects:  72% (628/871)
Receiving objects:  73% (636/871)
Receiving objects:  74% (645/871)
Receiving objects:  75% (654/871)
Receiving objects:  76% (662/871)
Receiving objects:  77% (671/871)
Receiving objects:  78% (680/871)
Receiving objects:  79% (689/871)
Receiving objects:  80% (697/871)
Receiving objects:  81% (706/871)
Receiving objects:  82% (715/871)
Receiving objects:  83% (723/871)
Receiving objects:  84% (732/871)
Receiving objects:  85% (741/871)
Receiving objects:  86% (750/871)
Receiving objects:  87% (758/871)
Receiving objects:  88% (767/871)
Receiving objects:  89% (776/871)
Receiving objects:  90% (784/871)
Receiving objects:  91% (793/871)
Receiving objects:  92% (802/871)
Receiving objects:  93% (811/871)
Receiving objects:  94% (819/871)
Receiving objects:  95% (828/871)
remote: Total 871 (delta 101), reused 92 (delta 54), pack-reused 658 (from 1)[K
2024-12-25T09:10:28.814249314Z Receiving objects:  96% (837/871)
Receiving objects:  97% (845/871)
Receiving objects:  98% (854/871)
Receiving objects:  99% (863/871)
Receiving objects: 100% (871/871)
Receiving objects: 100% (871/871), 286.17 KiB | 1.10 MiB/s, done.
2024-12-25T09:10:28.820476890Z Resolving deltas:   0% (0/446)
Resolving deltas:   1% (5/446)
Resolving deltas:   2% (9/446)
Resolving deltas:   3% (14/446)
Resolving deltas:   4% (18/446)
Resolving deltas:   5% (23/446)
Resolving deltas:   6% (27/446)
Resolving deltas:   7% (34/446)
Resolving deltas:   8% (37/446)
Resolving deltas:   9% (42/446)
Resolving deltas:  10% (46/446)
Resolving deltas:  11% (51/446)
Resolving deltas:  12% (54/446)
Resolving deltas:  13% (58/446)
Resolving deltas:  14% (64/446)
Resolving deltas:  15% (67/446)
Resolving deltas:  16% (72/446)
Resolving deltas:  17% (76/446)
Resolving deltas:  18% (81/446)
Resolving deltas:  19% (85/446)
Resolving deltas:  20% (90/446)
Resolving deltas:  21% (94/446)
Resolving deltas:  22% (99/446)
Resolving deltas:  23% (105/446)
Resolving deltas:  24% (108/446)
Resolving deltas:  25% (113/446)
Resolving deltas:  26% (116/446)
Resolving deltas:  27% (122/446)
Resolving deltas:  28% (125/446)
Resolving deltas:  29% (131/446)
Resolving deltas:  30% (134/446)
Resolving deltas:  31% (139/446)
Resolving deltas:  32% (144/446)
Resolving deltas:  33% (148/446)
Resolving deltas:  34% (152/446)
Resolving deltas:  35% (157/446)
Resolving deltas:  36% (161/446)
Resolving deltas:  37% (166/446)
Resolving deltas:  38% (170/446)
Resolving deltas:  39% (174/446)
Resolving deltas:  40% (179/446)
Resolving deltas:  41% (185/446)
Resolving deltas:  42% (188/446)
Resolving deltas:  43% (193/446)
Resolving deltas:  44% (197/446)
Resolving deltas:  45% (201/446)
Resolving deltas:  46% (206/446)
Resolving deltas:  47% (210/446)
Resolving deltas:  48% (216/446)
Resolving deltas:  49% (219/446)
Resolving deltas:  50% (223/446)
Resolving deltas:  51% (228/446)
Resolving deltas:  52% (233/446)
Resolving deltas:  53% (238/446)
Resolving deltas:  54% (241/446)
Resolving deltas:  55% (247/446)
Resolving deltas:  56% (250/446)
Resolving deltas:  57% (255/446)
Resolving deltas:  58% (260/446)
Resolving deltas:  59% (264/446)
Resolving deltas:  60% (268/446)
Resolving deltas:  61% (273/446)
Resolving deltas:  62% (277/446)
Resolving deltas:  63% (282/446)
Resolving deltas:  64% (287/446)
Resolving deltas:  65% (290/446)
Resolving deltas:  66% (297/446)
Resolving deltas:  67% (299/446)
Resolving deltas:  68% (304/446)
Resolving deltas:  69% (308/446)
Resolving deltas:  70% (314/446)
Resolving deltas:  71% (317/446)
Resolving deltas:  72% (322/446)
Resolving deltas:  73% (326/446)
Resolving deltas:  74% (331/446)
Resolving deltas:  75% (335/446)
Resolving deltas:  76% (339/446)
Resolving deltas:  77% (344/446)
Resolving deltas:  78% (349/446)
Resolving deltas:  79% (353/446)
Resolving deltas:  80% (361/446)
Resolving deltas:  81% (362/446)
Resolving deltas:  82% (366/446)
Resolving deltas:  83% (373/446)
Resolving deltas:  84% (375/446)
Resolving deltas:  85% (380/446)
Resolving deltas:  86% (384/446)
Resolving deltas:  87% (390/446)
Resolving deltas:  88% (394/446)
Resolving deltas:  89% (397/446)
Resolving deltas:  90% (402/446)
Resolving deltas:  91% (406/446)
Resolving deltas:  92% (411/446)
Resolving deltas:  93% (415/446)
Resolving deltas:  94% (420/446)
Resolving deltas:  95% (424/446)
Resolving deltas:  96% (429/446)
Resolving deltas:  97% (433/446)
Resolving deltas:  98% (438/446)
Resolving deltas:  99% (442/446)
Resolving deltas: 100% (446/446)
Resolving deltas: 100% (446/446), done.
2024-12-25T09:10:32.463809692Z [?2004hroot@f7349b543439:/# cd dataformer/
2024-12-25T09:10:41.286191954Z [?2004l
[?2004hroot@f7349b543439:/dataformer# git checkout [7m0cf88cc22a20a6d5d115773ae9aac8970d7812e3[27m0cf88cc22a20a6d5d115773ae9aac8970d7812e3
2024-12-25T09:10:41.290060641Z [?2004l
Note: switching to '0cf88cc22a20a6d5d115773ae9aac8970d7812e3'.
2024-12-25T09:10:41.290072862Z 
2024-12-25T09:10:41.290075077Z You are in 'detached HEAD' state. You can look around, make experimental
2024-12-25T09:10:41.290077482Z changes and commit them, and you can discard any commits you make in this
2024-12-25T09:10:41.290079521Z state without impacting any branches by switching back to a branch.
2024-12-25T09:10:41.290081512Z 
2024-12-25T09:10:41.290083448Z If you want to create a new branch to retain commits you create, you may
2024-12-25T09:10:41.290085549Z do so (now or later) by using -c with the switch command. Example:
2024-12-25T09:10:41.290087501Z 
2024-12-25T09:10:41.290089344Z   git switch -c <new-branch-name>
2024-12-25T09:10:41.290091416Z 
2024-12-25T09:10:41.290093238Z Or undo this operation with:
2024-12-25T09:10:41.290095148Z 
2024-12-25T09:10:41.290096934Z   git switch -
2024-12-25T09:10:41.290099048Z 
2024-12-25T09:10:41.290101607Z Turn off this advice by setting config variable advice.detachedHead to false
2024-12-25T09:10:41.290103865Z 
2024-12-25T09:10:41.290105718Z HEAD is now at 0cf88cc Update README.md
2024-12-25T09:12:01.998971836Z [?2004hroot@f7349b543439:/dataformer# cl[K[Kcd [K[K[Kls
2024-12-25T09:12:02.000328885Z [?2004l
CONTRIBUTING.md  LICENSE  Makefile  README.md  env.example  examples  pyproject.toml  src  tests
2024-12-25T09:12:10.928508350Z [?2004hroot@f7349b543439:/dataformer# pip install -e .
2024-12-25T09:12:11.282902099Z [?2004l
Looking in indexes: /simple/
2024-12-25T09:12:11.283261573Z Obtaining file:///dataformer
2024-12-25T09:12:13.595178821Z   Installing build dependencies ... [?25l- \ | / - \ | done
2024-12-25T09:12:13.776859940Z [?25h  Checking if build backend supports build_editable ... [?25ldone
2024-12-25T09:12:14.044601640Z [?25h  Getting requirements to build editable ... [?25l- done
2024-12-25T09:12:14.308834579Z [?25h  Preparing editable metadata (pyproject.toml) ... [?25l- done
2024-12-25T09:12:14.444665800Z [?25hCollecting tiktoken
2024-12-25T09:12:14.474909114Z   Downloading /packages/tiktoken/tiktoken-0.8.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.2 MB)
2024-12-25T09:12:14.497424347Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/1.2 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m1.2/1.2 MB[0m [31m64.9 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:15.866881207Z [?25hCollecting aiohttp
2024-12-25T09:12:15.882328634Z   Downloading /packages/aiohttp/aiohttp-3.11.11-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)
2024-12-25T09:12:15.911265680Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/1.6 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m1.6/1.6 MB[0m [31m63.4 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:15.915539412Z [?25hRequirement already satisfied: pytest in /usr/local/lib/python3.10/site-packages (from dataformer==0.0.2) (8.3.4)
2024-12-25T09:12:16.302233696Z Collecting pydantic>=2.0
2024-12-25T09:12:16.317755072Z   Downloading /packages/pydantic/pydantic-2.10.4-py3-none-any.whl (431 kB)
2024-12-25T09:12:16.341967378Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/431.8 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m431.8/431.8 kB[0m [31m20.8 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:16.384286663Z [?25hCollecting python-dotenv
2024-12-25T09:12:16.400294211Z   Downloading /packages/python-dotenv/python_dotenv-1.0.1-py3-none-any.whl (19 kB)
2024-12-25T09:12:16.479761438Z Collecting typing-extensions>=4.12.2
2024-12-25T09:12:16.497713480Z   Downloading /packages/typing-extensions/typing_extensions-4.12.2-py3-none-any.whl (37 kB)
2024-12-25T09:12:16.526269302Z Collecting annotated-types>=0.6.0
2024-12-25T09:12:16.541916553Z   Downloading /packages/annotated-types/annotated_types-0.7.0-py3-none-any.whl (13 kB)
2024-12-25T09:12:18.584574326Z Collecting pydantic-core==2.27.2
2024-12-25T09:12:18.603001402Z   Downloading /packages/pydantic-core/pydantic_core-2.27.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)
2024-12-25T09:12:18.639073841Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/2.0 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m2.0/2.0 MB[0m [31m62.1 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:18.881606401Z [?25hCollecting frozenlist>=1.1.1
2024-12-25T09:12:18.897147028Z   Downloading /packages/frozenlist/frozenlist-1.5.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (241 kB)
2024-12-25T09:12:18.916074379Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/241.9 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m241.9/241.9 kB[0m [31m15.5 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:19.477531221Z [?25hCollecting multidict<7.0,>=4.5
2024-12-25T09:12:19.494068636Z   Downloading /packages/multidict/multidict-6.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (124 kB)
2024-12-25T09:12:19.501630324Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/124.6 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m124.6/124.6 kB[0m [31m30.0 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:19.607481855Z [?25hCollecting propcache>=0.2.0
2024-12-25T09:12:19.623684229Z   Downloading /packages/propcache/propcache-0.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (205 kB)
2024-12-25T09:12:19.642460246Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/205.1 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m205.1/205.1 kB[0m [31m13.0 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:20.545608000Z [?25hCollecting yarl<2.0,>=1.17.0
2024-12-25T09:12:20.561265682Z   Downloading /packages/yarl/yarl-1.18.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (319 kB)
2024-12-25T09:12:20.581298344Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/319.7 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m319.7/319.7 kB[0m [31m19.2 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:20.613012310Z [?25hCollecting async-timeout<6.0,>=4.0
2024-12-25T09:12:20.629163066Z   Downloading /packages/async-timeout/async_timeout-5.0.1-py3-none-any.whl (6.2 kB)
2024-12-25T09:12:20.659214937Z Collecting aiosignal>=1.1.2
2024-12-25T09:12:20.678176263Z   Downloading /packages/aiosignal/aiosignal-1.3.2-py2.py3-none-any.whl (7.6 kB)
2024-12-25T09:12:20.729005788Z Collecting aiohappyeyeballs>=2.3.0
2024-12-25T09:12:20.744796094Z   Downloading /packages/aiohappyeyeballs/aiohappyeyeballs-2.4.4-py3-none-any.whl (14 kB)
2024-12-25T09:12:20.792076465Z Collecting attrs>=17.3.0
2024-12-25T09:12:20.811689569Z   Downloading /packages/attrs/attrs-24.3.0-py3-none-any.whl (63 kB)
2024-12-25T09:12:20.822761795Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/63.4 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m63.4/63.4 kB[0m [31m7.3 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:20.839792077Z [?25hRequirement already satisfied: packaging in /usr/local/lib/python3.10/site-packages (from pytest->dataformer==0.0.2) (24.2)
2024-12-25T09:12:20.841037152Z Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /usr/local/lib/python3.10/site-packages (from pytest->dataformer==0.0.2) (1.2.2)
2024-12-25T09:12:20.841775313Z Requirement already satisfied: pluggy<2,>=1.5 in /usr/local/lib/python3.10/site-packages (from pytest->dataformer==0.0.2) (1.5.0)
2024-12-25T09:12:20.843242137Z Requirement already satisfied: tomli>=1 in /usr/local/lib/python3.10/site-packages (from pytest->dataformer==0.0.2) (2.2.1)
2024-12-25T09:12:20.843684012Z Requirement already satisfied: iniconfig in /usr/local/lib/python3.10/site-packages (from pytest->dataformer==0.0.2) (2.0.0)
2024-12-25T09:12:22.055692769Z Collecting regex>=2022.1.18
2024-12-25T09:12:22.072363110Z   Downloading /packages/regex/regex-2024.11.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (781 kB)
2024-12-25T09:12:22.098393760Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/781.7 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m781.7/781.7 kB[0m [31m35.1 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:22.174880515Z [?25hCollecting requests>=2.26.0
2024-12-25T09:12:22.191165583Z   Downloading /packages/requests/requests-2.32.3-py3-none-any.whl (64 kB)
2024-12-25T09:12:22.201789950Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/64.9 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m64.9/64.9 kB[0m [31m8.0 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:22.349851673Z [?25hCollecting idna<4,>=2.5
2024-12-25T09:12:22.368366210Z   Downloading /packages/idna/idna-3.10-py3-none-any.whl (70 kB)
2024-12-25T09:12:22.379339873Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/70.4 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m70.4/70.4 kB[0m [31m8.3 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:22.430213607Z [?25hCollecting certifi>=2017.4.17
2024-12-25T09:12:22.447334823Z   Downloading /packages/certifi/certifi-2024.12.14-py3-none-any.whl (164 kB)
2024-12-25T09:12:22.473177446Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/164.9 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m164.9/164.9 kB[0m [31m7.1 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:22.557447570Z [?25hCollecting urllib3<3,>=1.21.1
2024-12-25T09:12:22.574424845Z   Downloading /packages/urllib3/urllib3-2.3.0-py3-none-any.whl (128 kB)
2024-12-25T09:12:22.589125470Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/128.4 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m128.4/128.4 kB[0m [31m11.1 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:22.861492127Z [?25hCollecting charset-normalizer<4,>=2
2024-12-25T09:12:22.880771930Z   Downloading /packages/charset-normalizer/charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (146 kB)
2024-12-25T09:12:22.896004551Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/146.1 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m146.1/146.1 kB[0m [31m12.0 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:22.954670133Z [?25hBuilding wheels for collected packages: dataformer
2024-12-25T09:12:23.287798673Z   Building editable for dataformer (pyproject.toml) ... [?25l- done
2024-12-25T09:12:23.288491291Z [?25h  Created wheel for dataformer: filename=dataformer-0.0.2-0.editable-py3-none-any.whl size=7299 sha256=392891b002dba3a4b2fef4b153bd3d707a362154f596cbc3402ddeb858468d19
2024-12-25T09:12:23.288711190Z   Stored in directory: /tmp/pip-ephem-wheel-cache-h40y97un/wheels/78/e8/02/b7b3dba96fa17b3f67e0e5a0ebb1a2bccb40dba2bdd80b0b07
2024-12-25T09:12:23.290839075Z Successfully built dataformer
2024-12-25T09:12:23.460928825Z Installing collected packages: urllib3, typing-extensions, regex, python-dotenv, propcache, idna, frozenlist, charset-normalizer, certifi, attrs, async-timeout, annotated-types, aiohappyeyeballs, requests, pydantic-core, multidict, aiosignal, yarl, tiktoken, pydantic, aiohttp, dataformer
2024-12-25T09:12:24.564701375Z Successfully installed aiohappyeyeballs-2.4.4 aiohttp-3.11.11 aiosignal-1.3.2 annotated-types-0.7.0 async-timeout-5.0.1 attrs-24.3.0 certifi-2024.12.14 charset-normalizer-3.4.1 dataformer-0.0.2 frozenlist-1.5.0 idna-3.10 multidict-6.1.0 propcache-0.2.1 pydantic-2.10.4 pydantic-core-2.27.2 python-dotenv-1.0.1 regex-2024.11.6 requests-2.32.3 tiktoken-0.8.0 typing-extensions-4.12.2 urllib3-2.3.0 yarl-1.18.3
2024-12-25T09:12:24.564863463Z [33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv[0m[33m
2024-12-25T09:12:24.568789821Z [0m
2024-12-25T09:12:24.568813302Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m A new release of pip is available: [0m[31;49m23.0.1[0m[39;49m -> [0m[32;49m24.3.1[0m
2024-12-25T09:12:24.568820065Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m To update, run: [0m[32;49mpip install --upgrade pip[0m
2024-12-25T09:12:32.651184843Z [?2004hroot@f7349b543439:/dataformer# l[Kpyre[K[Ktest --o[Kcoo[Kllect-only -q
2024-12-25T09:12:33.310396120Z [?2004l
tests/test_all_api_providers_in_request_list.py::test_all_api_providers
2024-12-25T09:12:33.310426157Z tests/test_cache_vars.py::test_cache_vars
2024-12-25T09:12:33.310429006Z tests/test_caching_requests.py::test_caching_requests
2024-12-25T09:12:33.310431256Z tests/test_embeddings.py::test_embedding_generation
2024-12-25T09:12:33.310433941Z tests/test_llm_chat_generation.py::test_llm_generate_proper_response
2024-12-25T09:12:33.310445344Z tests/test_llm_text_generation.py::test_llm_generate_proper_response
2024-12-25T09:12:33.310447600Z tests/test_task_id_generator.py::test_task_id_generator
2024-12-25T09:12:33.412466447Z 
2024-12-25T09:12:33.412508157Z ========================================================================================= ERRORS ==========================================================================================
2024-12-25T09:12:33.412511218Z [31m[1m____________________________________________________________________ ERROR collecting tests/test_complexity_scorer.py _____________________________________________________________________[0m
2024-12-25T09:12:33.412514256Z [31mImportError while importing test module '/dataformer/tests/test_complexity_scorer.py'.
2024-12-25T09:12:33.412516832Z Hint: make sure your test modules/packages have valid Python names.
2024-12-25T09:12:33.412518810Z Traceback:
2024-12-25T09:12:33.412520751Z /usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
2024-12-25T09:12:33.412522726Z     return _bootstrap._gcd_import(name[level:], package, level)
2024-12-25T09:12:33.412525018Z tests/test_complexity_scorer.py:3: in <module>
2024-12-25T09:12:33.412527305Z     from dataformer.components import ComplexityScorer
2024-12-25T09:12:33.412529246Z src/dataformer/components/__init__.py:7: in <module>
2024-12-25T09:12:33.412531491Z     from dataformer.components.complexity_scorer import ComplexityScorer
2024-12-25T09:12:33.412533660Z src/dataformer/components/complexity_scorer.py:3: in <module>
2024-12-25T09:12:33.412535914Z     from jinja2 import Template
2024-12-25T09:12:33.412538070Z E   ModuleNotFoundError: No module named 'jinja2'[0m
2024-12-25T09:12:33.412540093Z [31m[1m__________________________________________________________________________ ERROR collecting tests/test_deita.py ___________________________________________________________________________[0m
2024-12-25T09:12:33.412542330Z [31mImportError while importing test module '/dataformer/tests/test_deita.py'.
2024-12-25T09:12:33.412544301Z Hint: make sure your test modules/packages have valid Python names.
2024-12-25T09:12:33.412546242Z Traceback:
2024-12-25T09:12:33.412548083Z /usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
2024-12-25T09:12:33.412550250Z     return _bootstrap._gcd_import(name[level:], package, level)
2024-12-25T09:12:33.412552172Z tests/test_deita.py:3: in <module>
2024-12-25T09:12:33.412554116Z     from dataformer.components import Deita
2024-12-25T09:12:33.412556010Z src/dataformer/components/__init__.py:7: in <module>
2024-12-25T09:12:33.412557966Z     from dataformer.components.complexity_scorer import ComplexityScorer
2024-12-25T09:12:33.412559981Z src/dataformer/components/complexity_scorer.py:3: in <module>
2024-12-25T09:12:33.412561932Z     from jinja2 import Template
2024-12-25T09:12:33.412563799Z E   ModuleNotFoundError: No module named 'jinja2'[0m
2024-12-25T09:12:33.412596922Z [31m[1m_______________________________________________________________________ ERROR collecting tests/test_eval_quality.py _______________________________________________________________________[0m
2024-12-25T09:12:33.412636729Z [31mImportError while importing test module '/dataformer/tests/test_eval_quality.py'.
2024-12-25T09:12:33.412641022Z Hint: make sure your test modules/packages have valid Python names.
2024-12-25T09:12:33.412644514Z Traceback:
2024-12-25T09:12:33.412647761Z /usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
2024-12-25T09:12:33.412650912Z     return _bootstrap._gcd_import(name[level:], package, level)
2024-12-25T09:12:33.412654661Z tests/test_eval_quality.py:5: in <module>
2024-12-25T09:12:33.412658257Z     from datasets import load_dataset
2024-12-25T09:12:33.412661737Z E   ModuleNotFoundError: No module named 'datasets'[0m
2024-12-25T09:12:33.412663990Z [31m[1m______________________________________________________________________ ERROR collecting tests/test_evol_instruct.py _______________________________________________________________________[0m
2024-12-25T09:12:33.412672440Z [31mImportError while importing test module '/dataformer/tests/test_evol_instruct.py'.
2024-12-25T09:12:33.412677318Z Hint: make sure your test modules/packages have valid Python names.
2024-12-25T09:12:33.412679326Z Traceback:
2024-12-25T09:12:33.412681224Z /usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
2024-12-25T09:12:33.412683169Z     return _bootstrap._gcd_import(name[level:], package, level)
2024-12-25T09:12:33.412685097Z tests/test_evol_instruct.py:5: in <module>
2024-12-25T09:12:33.412687259Z     from datasets import load_dataset
2024-12-25T09:12:33.412689183Z E   ModuleNotFoundError: No module named 'datasets'[0m
2024-12-25T09:12:33.412692884Z [31m[1m_________________________________________________________________ ERROR collecting tests/test_inference_compute_tests.py __________________________________________________________________[0m
2024-12-25T09:12:33.412695690Z [1m[31mtests/test_inference_compute_tests.py[0m:9: in <module>
2024-12-25T09:12:33.413076887Z     llm = AsyncLLM(
2024-12-25T09:12:33.413102673Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:302: in __init__
2024-12-25T09:12:33.413227416Z     self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:12:33.413234342Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:316: in check_model_exists
2024-12-25T09:12:33.413386208Z     api_key=self.get_api_key()
2024-12-25T09:12:33.413391383Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:451: in get_api_key
2024-12-25T09:12:33.413586227Z     raise ValueError("Invalid API Key Provided")
2024-12-25T09:12:33.413602098Z [1m[31mE   ValueError: Invalid API Key Provided[0m
2024-12-25T09:12:33.413674262Z [31m[1m______________________________________________________________________ ERROR collecting tests/test_quality_scorer.py ______________________________________________________________________[0m
2024-12-25T09:12:33.413689511Z [31mImportError while importing test module '/dataformer/tests/test_quality_scorer.py'.
2024-12-25T09:12:33.413691874Z Hint: make sure your test modules/packages have valid Python names.
2024-12-25T09:12:33.413693867Z Traceback:
2024-12-25T09:12:33.413695751Z /usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
2024-12-25T09:12:33.413697855Z     return _bootstrap._gcd_import(name[level:], package, level)
2024-12-25T09:12:33.413699977Z tests/test_quality_scorer.py:3: in <module>
2024-12-25T09:12:33.413702313Z     from dataformer.components import QualityScorer
2024-12-25T09:12:33.413704247Z src/dataformer/components/__init__.py:7: in <module>
2024-12-25T09:12:33.413706431Z     from dataformer.components.complexity_scorer import ComplexityScorer
2024-12-25T09:12:33.413708418Z src/dataformer/components/complexity_scorer.py:3: in <module>
2024-12-25T09:12:33.413710396Z     from jinja2 import Template
2024-12-25T09:12:33.413713083Z E   ModuleNotFoundError: No module named 'jinja2'[0m
2024-12-25T09:12:33.413741733Z [31m[1m_____________________________________________________________________ ERROR collecting tests/test_sampling_params.py ______________________________________________________________________[0m
2024-12-25T09:12:33.413759653Z [31mImportError while importing test module '/dataformer/tests/test_sampling_params.py'.
2024-12-25T09:12:33.413762558Z Hint: make sure your test modules/packages have valid Python names.
2024-12-25T09:12:33.413764741Z Traceback:
2024-12-25T09:12:33.413766809Z /usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
2024-12-25T09:12:33.413768930Z     return _bootstrap._gcd_import(name[level:], package, level)
2024-12-25T09:12:33.413771128Z tests/test_sampling_params.py:6: in <module>
2024-12-25T09:12:33.413773198Z     from datasets import load_dataset
2024-12-25T09:12:33.413775579Z E   ModuleNotFoundError: No module named 'datasets'[0m
2024-12-25T09:12:33.413781494Z [31m[1m__________________________________________________________ ERROR collecting tests/test_various_limits_request_list_formation.py ___________________________________________________________[0m
2024-12-25T09:12:33.413784272Z [31mImportError while importing test module '/dataformer/tests/test_various_limits_request_list_formation.py'.
2024-12-25T09:12:33.413786326Z Hint: make sure your test modules/packages have valid Python names.
2024-12-25T09:12:33.413788780Z Traceback:
2024-12-25T09:12:33.413791019Z /usr/local/lib/python3.10/importlib/__init__.py:126: in import_module
2024-12-25T09:12:33.413793105Z     return _bootstrap._gcd_import(name[level:], package, level)
2024-12-25T09:12:33.413802961Z tests/test_various_limits_request_list_formation.py:5: in <module>
2024-12-25T09:12:33.413805213Z     from datasets import load_dataset
2024-12-25T09:12:33.413807680Z E   ModuleNotFoundError: No module named 'datasets'[0m
2024-12-25T09:12:33.414160650Z [36m[1m================================================================================= short test summary info =================================================================================[0m
2024-12-25T09:12:33.414168790Z [31mERROR[0m tests/test_complexity_scorer.py
2024-12-25T09:12:33.414171043Z [31mERROR[0m tests/test_deita.py
2024-12-25T09:12:33.414173121Z [31mERROR[0m tests/test_eval_quality.py
2024-12-25T09:12:33.414175110Z [31mERROR[0m tests/test_evol_instruct.py
2024-12-25T09:12:33.414177412Z [31mERROR[0m tests/test_inference_compute_tests.py - ValueError: Invalid API Key Provided
2024-12-25T09:12:33.414179503Z [31mERROR[0m tests/test_quality_scorer.py
2024-12-25T09:12:33.414189023Z [31mERROR[0m tests/test_sampling_params.py
2024-12-25T09:12:33.414191489Z [31mERROR[0m tests/test_various_limits_request_list_formation.py
2024-12-25T09:12:33.414270230Z !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 8 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2024-12-25T09:12:33.414319150Z [31m[32m7 tests collected[0m, [31m8 errors[0m[31m in 0.52s[0m[0m
2024-12-25T09:12:41.953976069Z [?2004hroot@f7349b543439:/dataformer# pip install [K[K[K[K[K[K[K[K[K[K[K[Kpip install jinja2
2024-12-25T09:12:42.313493619Z [?2004l
Looking in indexes: /simple/
2024-12-25T09:12:42.364295022Z Collecting jinja2
2024-12-25T09:12:42.381321558Z   Downloading /packages/jinja2/jinja2-3.1.5-py3-none-any.whl (134 kB)
2024-12-25T09:12:42.396709410Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/134.6 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m134.6/134.6 kB[0m [31m11.5 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:42.591052747Z [?25hCollecting MarkupSafe>=2.0
2024-12-25T09:12:42.609171929Z   Downloading /packages/markupsafe/MarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (20 kB)
2024-12-25T09:12:42.786610870Z Installing collected packages: MarkupSafe, jinja2
2024-12-25T09:12:42.892801493Z Successfully installed MarkupSafe-3.0.2 jinja2-3.1.5
2024-12-25T09:12:42.893044604Z [33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv[0m[33m
2024-12-25T09:12:42.896717417Z [0m
2024-12-25T09:12:42.896732122Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m A new release of pip is available: [0m[31;49m23.0.1[0m[39;49m -> [0m[32;49m24.3.1[0m
2024-12-25T09:12:42.896735679Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m To update, run: [0m[32;49mpip install --upgrade pip[0m
2024-12-25T09:12:55.922667956Z [?2004hroot@f7349b543439:/dataformer# pip install jinja2ytest --collect-only -q[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kpip install p[Kdatasets
2024-12-25T09:12:56.289289672Z [?2004l
Looking in indexes: /simple/
2024-12-25T09:12:56.363343714Z Collecting datasets
2024-12-25T09:12:56.380123745Z   Downloading /packages/datasets/datasets-3.2.0-py3-none-any.whl (480 kB)
2024-12-25T09:12:56.404378458Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/480.6 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m480.6/480.6 kB[0m [31m24.1 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:57.140207985Z [?25hCollecting numpy>=1.17
2024-12-25T09:12:57.159540567Z   Downloading /packages/numpy/numpy-2.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.4 MB)
2024-12-25T09:12:57.287758724Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/16.4 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [91m━━━━━━━━━━[0m[90m╺[0m[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m4.2/16.4 MB[0m [31m125.9 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[90m╺[0m[90m━━━━━[0m [32m14.0/16.4 MB[0m [31m275.9 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m [32m16.4/16.4 MB[0m [31m283.9 MB/s[0m eta [36m0:00:01[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m16.4/16.4 MB[0m [31m125.5 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:57.419226539Z [?25hCollecting huggingface-hub>=0.23.0
2024-12-25T09:12:57.435417712Z   Downloading /packages/huggingface-hub/huggingface_hub-0.27.0-py3-none-any.whl (450 kB)
2024-12-25T09:12:57.459122517Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/450.5 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m450.5/450.5 kB[0m [31m22.2 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:57.755967434Z [?25hCollecting xxhash
2024-12-25T09:12:57.772216166Z   Downloading /packages/xxhash/xxhash-3.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (194 kB)
2024-12-25T09:12:57.787583880Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/194.1 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m194.1/194.1 kB[0m [31m16.1 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:58.176348987Z [?25hCollecting pandas
2024-12-25T09:12:58.191992071Z   Downloading /packages/pandas/pandas-2.2.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.1 MB)
2024-12-25T09:12:58.313884054Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/13.1 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [91m━━━━━━━━[0m[90m╺[0m[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m2.7/13.1 MB[0m [31m80.7 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m[90m━━━━━━━━━━[0m [32m9.6/13.1 MB[0m [31m140.4 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m [32m13.1/13.1 MB[0m [31m220.0 MB/s[0m eta [36m0:00:01[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m13.1/13.1 MB[0m [31m124.8 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:58.346118702Z [?25hRequirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.10/site-packages (from datasets) (2.32.3)
2024-12-25T09:12:58.404580021Z Collecting multiprocess<0.70.17
2024-12-25T09:12:58.421651273Z   Downloading /packages/multiprocess/multiprocess-0.70.16-py310-none-any.whl (134 kB)
2024-12-25T09:12:58.436998412Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/134.8 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m134.8/134.8 kB[0m [31m10.9 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:58.471957559Z [?25hCollecting dill<0.3.9,>=0.3.0
2024-12-25T09:12:58.487781959Z   Downloading /packages/dill/dill-0.3.8-py3-none-any.whl (116 kB)
2024-12-25T09:12:58.502797552Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/116.3 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m116.3/116.3 kB[0m [31m9.4 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:58.633460568Z [?25hCollecting pyyaml>=5.1
2024-12-25T09:12:58.652709998Z   Downloading /packages/pyyaml/PyYAML-6.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (751 kB)
2024-12-25T09:12:58.679219963Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/751.2 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m751.2/751.2 kB[0m [31m32.9 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:58.792180414Z [?25hCollecting tqdm>=4.66.3
2024-12-25T09:12:58.809759138Z   Downloading /packages/tqdm/tqdm-4.67.1-py3-none-any.whl (78 kB)
2024-12-25T09:12:58.820857346Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/78.5 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m78.5/78.5 kB[0m [31m9.4 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:58.823288095Z [?25hRequirement already satisfied: packaging in /usr/local/lib/python3.10/site-packages (from datasets) (24.2)
2024-12-25T09:12:58.823713996Z Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/site-packages (from datasets) (3.11.11)
2024-12-25T09:12:58.885525227Z Collecting fsspec[http]<=2024.9.0,>=2023.1.0
2024-12-25T09:12:58.902232779Z   Downloading /packages/fsspec/fsspec-2024.9.0-py3-none-any.whl (179 kB)
2024-12-25T09:12:58.917388587Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/179.3 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m179.3/179.3 kB[0m [31m14.8 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:58.972457340Z [?25hCollecting filelock
2024-12-25T09:12:58.990896628Z   Downloading /packages/filelock/filelock-3.16.1-py3-none-any.whl (16 kB)
2024-12-25T09:12:59.260748756Z Collecting pyarrow>=15.0.0
2024-12-25T09:12:59.276758907Z   Downloading /packages/pyarrow/pyarrow-18.1.0-cp310-cp310-manylinux_2_28_x86_64.whl (40.1 MB)
2024-12-25T09:12:59.546280312Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/40.1 MB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [91m━━━━[0m[90m╺[0m[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m4.4/40.1 MB[0m [31m132.4 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━[0m[90m╺[0m[90m━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m14.2/40.1 MB[0m [31m275.1 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m[90m━━━━━━━━━━━━━━━━[0m [32m23.9/40.1 MB[0m [31m275.7 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m[90m━━━━━━[0m [32m33.8/40.1 MB[0m [31m277.6 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m [32m40.1/40.1 MB[0m [31m287.8 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m [32m40.1/40.1 MB[0m [31m287.8 MB/s[0m eta [36m0:00:01[0m
[2K     [91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m[91m╸[0m [32m40.1/40.1 MB[0m [31m287.8 MB/s[0m eta [36m0:00:01[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m40.1/40.1 MB[0m [31m73.5 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:12:59.730334354Z [?25hRequirement already satisfied: async-timeout<6.0,>=4.0 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (5.0.1)
2024-12-25T09:12:59.730924057Z Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (6.1.0)
2024-12-25T09:12:59.731608935Z Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (1.18.3)
2024-12-25T09:12:59.732252966Z Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (0.2.1)
2024-12-25T09:12:59.733406002Z Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (24.3.0)
2024-12-25T09:12:59.734083114Z Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (1.3.2)
2024-12-25T09:12:59.734732897Z Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (2.4.4)
2024-12-25T09:12:59.735372933Z Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/site-packages (from aiohttp->datasets) (1.5.0)
2024-12-25T09:12:59.859550269Z Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/site-packages (from huggingface-hub>=0.23.0->datasets) (4.12.2)
2024-12-25T09:12:59.903310866Z Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (2024.12.14)
2024-12-25T09:12:59.904144407Z Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (2.3.0)
2024-12-25T09:12:59.904916175Z Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (3.4.1)
2024-12-25T09:12:59.905581981Z Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/site-packages (from requests>=2.32.2->datasets) (3.10)
2024-12-25T09:13:00.093983903Z Collecting python-dateutil>=2.8.2
2024-12-25T09:13:00.112399932Z   Downloading /packages/python-dateutil/python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
2024-12-25T09:13:00.131823600Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/229.9 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m229.9/229.9 kB[0m [31m14.3 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:13:00.168829086Z [?25hCollecting tzdata>=2022.7
2024-12-25T09:13:00.186925410Z   Downloading /packages/tzdata/tzdata-2024.2-py2.py3-none-any.whl (346 kB)
2024-12-25T09:13:00.194954784Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/346.6 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m346.6/346.6 kB[0m [31m82.5 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:13:00.309340673Z [?25hCollecting pytz>=2020.1
2024-12-25T09:13:00.325191626Z   Downloading /packages/pytz/pytz-2024.2-py2.py3-none-any.whl (508 kB)
2024-12-25T09:13:00.349223440Z [?25l     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m0.0/508.0 kB[0m [31m?[0m eta [36m-:--:--[0m
[2K     [90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m508.0/508.0 kB[0m [31m25.1 MB/s[0m eta [36m0:00:00[0m
2024-12-25T09:13:00.474596128Z [?25hCollecting six>=1.5
2024-12-25T09:13:00.492035193Z   Downloading /packages/six/six-1.17.0-py2.py3-none-any.whl (11 kB)
2024-12-25T09:13:01.138275737Z Installing collected packages: pytz, xxhash, tzdata, tqdm, six, pyyaml, pyarrow, numpy, fsspec, filelock, dill, python-dateutil, multiprocess, huggingface-hub, pandas, datasets
2024-12-25T09:13:09.576181819Z Successfully installed datasets-3.2.0 dill-0.3.8 filelock-3.16.1 fsspec-2024.9.0 huggingface-hub-0.27.0 multiprocess-0.70.16 numpy-2.2.1 pandas-2.2.3 pyarrow-18.1.0 python-dateutil-2.9.0.post0 pytz-2024.2 pyyaml-6.0.2 six-1.17.0 tqdm-4.67.1 tzdata-2024.2 xxhash-3.5.0
2024-12-25T09:13:09.576406111Z [33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv[0m[33m
2024-12-25T09:13:09.580526321Z [0m
2024-12-25T09:13:09.580535166Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m A new release of pip is available: [0m[31;49m23.0.1[0m[39;49m -> [0m[32;49m24.3.1[0m
2024-12-25T09:13:09.580538469Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m To update, run: [0m[32;49mpip install --upgrade pip[0m
2024-12-25T09:13:12.170022314Z [?2004hroot@f7349b543439:/dataformer# pip install datasets[2Pjinja2ytest --collect-only -q
2024-12-25T09:13:13.534332806Z [?2004l
tests/test_all_api_providers_in_request_list.py::test_all_api_providers
2024-12-25T09:13:13.534353922Z tests/test_cache_vars.py::test_cache_vars
2024-12-25T09:13:13.534357496Z tests/test_caching_requests.py::test_caching_requests
2024-12-25T09:13:13.534360216Z tests/test_complexity_scorer.py::test_complexity_scorer
2024-12-25T09:13:13.534363162Z tests/test_deita.py::test_deita
2024-12-25T09:13:13.534365973Z tests/test_embeddings.py::test_embedding_generation
2024-12-25T09:13:13.534368275Z tests/test_eval_quality.py::test_evol_quality
2024-12-25T09:13:13.534370418Z tests/test_evol_instruct.py::test_evol_instruct
2024-12-25T09:13:13.534373101Z tests/test_llm_chat_generation.py::test_llm_generate_proper_response
2024-12-25T09:13:13.534375922Z tests/test_llm_text_generation.py::test_llm_generate_proper_response
2024-12-25T09:13:13.534378461Z tests/test_quality_scorer.py::test_quality_scorer
2024-12-25T09:13:13.534380688Z tests/test_sampling_params.py::test_sampling_parameters
2024-12-25T09:13:13.534400879Z tests/test_task_id_generator.py::test_task_id_generator
2024-12-25T09:13:13.534403091Z tests/test_various_limits_request_list_formation.py::test_various_limits_and_request_lists
2024-12-25T09:13:13.625649140Z 
2024-12-25T09:13:13.625680173Z ========================================================================================= ERRORS ==========================================================================================
2024-12-25T09:13:13.625683787Z [31m[1m_________________________________________________________________ ERROR collecting tests/test_inference_compute_tests.py __________________________________________________________________[0m
2024-12-25T09:13:13.625686904Z [1m[31mtests/test_inference_compute_tests.py[0m:9: in <module>
2024-12-25T09:13:13.625908751Z     llm = AsyncLLM(
2024-12-25T09:13:13.625939042Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:302: in __init__
2024-12-25T09:13:13.626070991Z     self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:13:13.626085239Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:316: in check_model_exists
2024-12-25T09:13:13.626241921Z     api_key=self.get_api_key()
2024-12-25T09:13:13.626247029Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:451: in get_api_key
2024-12-25T09:13:13.626397367Z     raise ValueError("Invalid API Key Provided")
2024-12-25T09:13:13.626400851Z [1m[31mE   ValueError: Invalid API Key Provided[0m
2024-12-25T09:13:13.626700385Z [36m[1m================================================================================= short test summary info =================================================================================[0m
2024-12-25T09:13:13.626705591Z [31mERROR[0m tests/test_inference_compute_tests.py - ValueError: Invalid API Key Provided
2024-12-25T09:13:13.626746257Z !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2024-12-25T09:13:13.626803506Z [31m[32m14 tests collected[0m, [31m1 error[0m[31m in 1.28s[0m[0m
2024-12-25T09:14:56.105072737Z [?2004hroot@f7349b543439:/dataformer# [7mexport API_KEY=your_valid_api_key[27m
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cexport API_KEY=your_valid_api_key
2024-12-25T09:14:58.145157689Z [?2004l
[?2004hroot@f7349b543439:/dataformer# export API_KEY=your_valid_api_key
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[9Ppytest --collect-only -q
2024-12-25T09:14:59.348121196Z [?2004l
tests/test_all_api_providers_in_request_list.py::test_all_api_providers
2024-12-25T09:14:59.348173963Z tests/test_cache_vars.py::test_cache_vars
2024-12-25T09:14:59.348176979Z tests/test_caching_requests.py::test_caching_requests
2024-12-25T09:14:59.348179052Z tests/test_complexity_scorer.py::test_complexity_scorer
2024-12-25T09:14:59.348180948Z tests/test_deita.py::test_deita
2024-12-25T09:14:59.348182817Z tests/test_embeddings.py::test_embedding_generation
2024-12-25T09:14:59.348184758Z tests/test_eval_quality.py::test_evol_quality
2024-12-25T09:14:59.348186855Z tests/test_evol_instruct.py::test_evol_instruct
2024-12-25T09:14:59.348188795Z tests/test_llm_chat_generation.py::test_llm_generate_proper_response
2024-12-25T09:14:59.348190756Z tests/test_llm_text_generation.py::test_llm_generate_proper_response
2024-12-25T09:14:59.348192748Z tests/test_quality_scorer.py::test_quality_scorer
2024-12-25T09:14:59.348194655Z tests/test_sampling_params.py::test_sampling_parameters
2024-12-25T09:14:59.348196552Z tests/test_task_id_generator.py::test_task_id_generator
2024-12-25T09:14:59.348198515Z tests/test_various_limits_request_list_formation.py::test_various_limits_and_request_lists
2024-12-25T09:14:59.438256391Z 
2024-12-25T09:14:59.438286585Z ========================================================================================= ERRORS ==========================================================================================
2024-12-25T09:14:59.438291561Z [31m[1m_________________________________________________________________ ERROR collecting tests/test_inference_compute_tests.py __________________________________________________________________[0m
2024-12-25T09:14:59.438296595Z [1m[31mtests/test_inference_compute_tests.py[0m:9: in <module>
2024-12-25T09:14:59.438577612Z     llm = AsyncLLM(
2024-12-25T09:14:59.438596321Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:302: in __init__
2024-12-25T09:14:59.438724404Z     self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:14:59.438728062Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:316: in check_model_exists
2024-12-25T09:14:59.438960709Z     api_key=self.get_api_key()
2024-12-25T09:14:59.438968106Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:451: in get_api_key
2024-12-25T09:14:59.439066838Z     raise ValueError("Invalid API Key Provided")
2024-12-25T09:14:59.439070727Z [1m[31mE   ValueError: Invalid API Key Provided[0m
2024-12-25T09:14:59.439302098Z [36m[1m================================================================================= short test summary info =================================================================================[0m
2024-12-25T09:14:59.439305952Z [31mERROR[0m tests/test_inference_compute_tests.py - ValueError: Invalid API Key Provided
2024-12-25T09:14:59.439308270Z !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2024-12-25T09:14:59.439387688Z [31m[32m14 tests collected[0m, [31m1 error[0m[31m in 1.12s[0m[0m
2024-12-25T09:15:36.960777440Z [?2004hroot@f7349b543439:/dataformer# unset [K[K[K[Kset API_KEY
2024-12-25T09:15:39.819498912Z [?2004l
[?2004hroot@f7349b543439:/dataformer# unset API_KEYpytest --collect-only -q
2024-12-25T09:15:41.067899996Z [?2004l
tests/test_all_api_providers_in_request_list.py::test_all_api_providers
2024-12-25T09:15:41.067929515Z tests/test_cache_vars.py::test_cache_vars
2024-12-25T09:15:41.067932720Z tests/test_caching_requests.py::test_caching_requests
2024-12-25T09:15:41.067935246Z tests/test_complexity_scorer.py::test_complexity_scorer
2024-12-25T09:15:41.067938179Z tests/test_deita.py::test_deita
2024-12-25T09:15:41.067940535Z tests/test_embeddings.py::test_embedding_generation
2024-12-25T09:15:41.067942872Z tests/test_eval_quality.py::test_evol_quality
2024-12-25T09:15:41.067944975Z tests/test_evol_instruct.py::test_evol_instruct
2024-12-25T09:15:41.067947474Z tests/test_llm_chat_generation.py::test_llm_generate_proper_response
2024-12-25T09:15:41.067960166Z tests/test_llm_text_generation.py::test_llm_generate_proper_response
2024-12-25T09:15:41.067962426Z tests/test_quality_scorer.py::test_quality_scorer
2024-12-25T09:15:41.067964658Z tests/test_sampling_params.py::test_sampling_parameters
2024-12-25T09:15:41.067967418Z tests/test_task_id_generator.py::test_task_id_generator
2024-12-25T09:15:41.067969671Z tests/test_various_limits_request_list_formation.py::test_various_limits_and_request_lists
2024-12-25T09:15:41.160149023Z 
2024-12-25T09:15:41.160173319Z ========================================================================================= ERRORS ==========================================================================================
2024-12-25T09:15:41.160177119Z [31m[1m_________________________________________________________________ ERROR collecting tests/test_inference_compute_tests.py __________________________________________________________________[0m
2024-12-25T09:15:41.160202609Z [1m[31mtests/test_inference_compute_tests.py[0m:9: in <module>
2024-12-25T09:15:41.160465254Z     llm = AsyncLLM(
2024-12-25T09:15:41.160469742Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:302: in __init__
2024-12-25T09:15:41.160672068Z     self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:15:41.160693965Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:316: in check_model_exists
2024-12-25T09:15:41.160812442Z     api_key=self.get_api_key()
2024-12-25T09:15:41.160830272Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:451: in get_api_key
2024-12-25T09:15:41.160988724Z     raise ValueError("Invalid API Key Provided")
2024-12-25T09:15:41.160994570Z [1m[31mE   ValueError: Invalid API Key Provided[0m
2024-12-25T09:15:41.161234461Z [36m[1m================================================================================= short test summary info =================================================================================[0m
2024-12-25T09:15:41.161239606Z [31mERROR[0m tests/test_inference_compute_tests.py - ValueError: Invalid API Key Provided
2024-12-25T09:15:41.161241982Z !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2024-12-25T09:15:41.161335131Z [31m[32m14 tests collected[0m, [31m1 error[0m[31m in 1.16s[0m[0m
2024-12-25T09:15:48.030752635Z [?2004hroot@f7349b543439:/dataformer# cat [7mtests/test_inference_compute_tests.py[27m
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ctests/test_inference_compute_tests.py
2024-12-25T09:15:48.031848752Z [?2004l
from dotenv import load_dotenv
2024-12-25T09:15:48.031873728Z # Load environment variables from .env file
2024-12-25T09:15:48.031876281Z load_dotenv()
2024-12-25T09:15:48.031878252Z from dataformer.llms import AsyncLLM
2024-12-25T09:15:48.031880218Z from dataformer.components.SelfConsistency import SelfConsistency
2024-12-25T09:15:48.031883079Z from dataformer.components.cot import cot
2024-12-25T09:15:48.031885088Z from dataformer.components.pvg import pvg
2024-12-25T09:15:48.031887250Z from dataformer.components.rto import rto
2024-12-25T09:15:48.031889118Z llm = AsyncLLM(
2024-12-25T09:15:48.031890992Z     model="meta-llama/Meta-Llama-3.1-8B-Instruct", api_provider="deepinfra"
2024-12-25T09:15:48.031893232Z )  
2024-12-25T09:15:48.031895056Z def test_cot():
2024-12-25T09:15:48.031896889Z     request_list = [
2024-12-25T09:15:48.031898879Z         {"messages": [{"role": "user", "content": "If a train leaves a station traveling at 60 miles per hour and another train leaves the same station 30 minutes later traveling at 90 miles per hour, when will the second train catch up to the first train?"}]}
2024-12-25T09:15:48.031901763Z     ]
2024-12-25T09:15:48.031903889Z    
2024-12-25T09:15:48.031905718Z     cot_instance = cot(llm)
2024-12-25T09:15:48.031907576Z     results = cot_instance.generate(request_list)
2024-12-25T09:15:48.031909478Z     assert results is not None, "Response is missing"
2024-12-25T09:15:48.031911505Z     assert results[0]['cot_response'] is not None, "No CoT response"
2024-12-25T09:15:48.031928011Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:15:48.031930294Z 
2024-12-25T09:15:48.031932100Z def test_self_consistency():
2024-12-25T09:15:48.031933964Z     request_list = [
2024-12-25T09:15:48.031935888Z         {"messages": [{"role": "user", "content": "I have a dish of potatoes. The following statements are true: No potatoes of mine, that are new, have been boiled. All my potatoes in this dish are fit to eat. No unboiled potatoes of mine are fit to eat. Are there any new potatoes in this dish?"}]}
2024-12-25T09:15:48.031938449Z     ]
2024-12-25T09:15:48.031940244Z    
2024-12-25T09:15:48.031942379Z     self_consistency_instance = SelfConsistency(llm)
2024-12-25T09:15:48.031944343Z     results = self_consistency_instance.generate(request_list=request_list, return_model_answer=True)
2024-12-25T09:15:48.031964808Z     assert results is not None, "Response is missing"
2024-12-25T09:15:48.031966831Z     assert results[0]['SelfConsistency_response'] is not None, "No SelfConsistency response"
2024-12-25T09:15:48.031968854Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:15:48.031970841Z 
2024-12-25T09:15:48.031972676Z def test_pvg():
2024-12-25T09:15:48.031974608Z     request_list = [
2024-12-25T09:15:48.031976503Z         {"messages": [{"role": "user", "content": "Write a code in python for timetable generation. Consider all the constraints."}]}
2024-12-25T09:15:48.031978777Z     ]
2024-12-25T09:15:48.031980623Z     
2024-12-25T09:15:48.031982405Z     pvg_instance = pvg(llm)
2024-12-25T09:15:48.031984270Z     results = pvg_instance.generate(request_list)
2024-12-25T09:15:48.031987454Z     assert results is not None, "Response is missing"
2024-12-25T09:15:48.031989397Z     assert results[0]['pvg_response'] is not None, "No PVG response"
2024-12-25T09:15:48.031991337Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:15:48.031993289Z 
2024-12-25T09:15:48.031995059Z def test_rto():
2024-12-25T09:15:48.031996983Z     request_list = [
2024-12-25T09:15:48.031998804Z         {"messages": [{"role": "user", "content": "Write a genetic algorithm code in python which is fast."}]}
2024-12-25T09:15:48.032001005Z     ]
2024-12-25T09:15:48.032002804Z     rto_instance = rto(llm)
2024-12-25T09:15:48.032004638Z     results = rto_instance.generate(request_list)
2024-12-25T09:15:48.032006512Z     assert results is not None, "Response is missing"
2024-12-25T09:15:48.032008415Z     assert results[0]['rto_response'] is not None, "No RTO response"
2024-12-25T09:15:48.032012792Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:15:48.032014901Z def test_inference_compute_tests():
2024-12-25T09:15:48.032016790Z     test_cot()
2024-12-25T09:15:48.032018619Z     test_self_consistency()
2024-12-25T09:15:48.032020495Z     test_pvg()
2024-12-25T09:15:48.032022310Z     test_rto()
2024-12-25T09:16:40.895978066Z [?2004hroot@f7349b543439:/dataformer# [7mpip install pytest-dotenv[27mpip install pytest-dotenv
2024-12-25T09:16:41.263291088Z [?2004l
Looking in indexes: /simple/
2024-12-25T09:16:41.398313166Z Collecting pytest-dotenv
2024-12-25T09:16:41.546104090Z   Downloading /packages/pytest-dotenv/pytest_dotenv-0.5.2-py3-none-any.whl (4.0 kB)
2024-12-25T09:16:41.553981672Z Requirement already satisfied: pytest>=5.0.0 in /usr/local/lib/python3.10/site-packages (from pytest-dotenv) (8.3.4)
2024-12-25T09:16:41.554887299Z Requirement already satisfied: python-dotenv>=0.9.1 in /usr/local/lib/python3.10/site-packages (from pytest-dotenv) (1.0.1)
2024-12-25T09:16:41.570376669Z Requirement already satisfied: tomli>=1 in /usr/local/lib/python3.10/site-packages (from pytest>=5.0.0->pytest-dotenv) (2.2.1)
2024-12-25T09:16:41.571619933Z Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /usr/local/lib/python3.10/site-packages (from pytest>=5.0.0->pytest-dotenv) (1.2.2)
2024-12-25T09:16:41.571993461Z Requirement already satisfied: packaging in /usr/local/lib/python3.10/site-packages (from pytest>=5.0.0->pytest-dotenv) (24.2)
2024-12-25T09:16:41.572888092Z Requirement already satisfied: pluggy<2,>=1.5 in /usr/local/lib/python3.10/site-packages (from pytest>=5.0.0->pytest-dotenv) (1.5.0)
2024-12-25T09:16:41.573219169Z Requirement already satisfied: iniconfig in /usr/local/lib/python3.10/site-packages (from pytest>=5.0.0->pytest-dotenv) (2.0.0)
2024-12-25T09:16:42.210827612Z Installing collected packages: pytest-dotenv
2024-12-25T09:16:42.226276834Z Successfully installed pytest-dotenv-0.5.2
2024-12-25T09:16:42.226491709Z [33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv[0m[33m
2024-12-25T09:16:42.230187114Z [0m
2024-12-25T09:16:42.230198297Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m A new release of pip is available: [0m[31;49m23.0.1[0m[39;49m -> [0m[32;49m24.3.1[0m
2024-12-25T09:16:42.230205618Z [1m[[0m[34;49mnotice[0m[1;39;49m][0m[39;49m To update, run: [0m[32;49mpip install --upgrade pip[0m
2024-12-25T09:16:44.843347730Z [?2004hroot@f7349b543439:/dataformer# pip install pytest-dotenvcat tests/test_inference_compute_tests.py
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[17Ppytest --collect-only -q
2024-12-25T09:16:46.054163767Z [?2004l
tests/test_all_api_providers_in_request_list.py::test_all_api_providers
2024-12-25T09:16:46.054195646Z tests/test_cache_vars.py::test_cache_vars
2024-12-25T09:16:46.054198206Z tests/test_caching_requests.py::test_caching_requests
2024-12-25T09:16:46.054200503Z tests/test_complexity_scorer.py::test_complexity_scorer
2024-12-25T09:16:46.054202552Z tests/test_deita.py::test_deita
2024-12-25T09:16:46.054204552Z tests/test_embeddings.py::test_embedding_generation
2024-12-25T09:16:46.054206463Z tests/test_eval_quality.py::test_evol_quality
2024-12-25T09:16:46.054208364Z tests/test_evol_instruct.py::test_evol_instruct
2024-12-25T09:16:46.054210355Z tests/test_llm_chat_generation.py::test_llm_generate_proper_response
2024-12-25T09:16:46.054212371Z tests/test_llm_text_generation.py::test_llm_generate_proper_response
2024-12-25T09:16:46.054214262Z tests/test_quality_scorer.py::test_quality_scorer
2024-12-25T09:16:46.054216238Z tests/test_sampling_params.py::test_sampling_parameters
2024-12-25T09:16:46.054218128Z tests/test_task_id_generator.py::test_task_id_generator
2024-12-25T09:16:46.054220027Z tests/test_various_limits_request_list_formation.py::test_various_limits_and_request_lists
2024-12-25T09:16:46.146019904Z 
2024-12-25T09:16:46.146041998Z ========================================================================================= ERRORS ==========================================================================================
2024-12-25T09:16:46.146046036Z [31m[1m_________________________________________________________________ ERROR collecting tests/test_inference_compute_tests.py __________________________________________________________________[0m
2024-12-25T09:16:46.146056491Z [1m[31mtests/test_inference_compute_tests.py[0m:9: in <module>
2024-12-25T09:16:46.146343583Z     llm = AsyncLLM(
2024-12-25T09:16:46.146366163Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:302: in __init__
2024-12-25T09:16:46.146518160Z     self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:16:46.146523251Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:316: in check_model_exists
2024-12-25T09:16:46.146696445Z     api_key=self.get_api_key()
2024-12-25T09:16:46.146718318Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:451: in get_api_key
2024-12-25T09:16:46.146872533Z     raise ValueError("Invalid API Key Provided")
2024-12-25T09:16:46.146878231Z [1m[31mE   ValueError: Invalid API Key Provided[0m
2024-12-25T09:16:46.147103598Z [36m[1m================================================================================= short test summary info =================================================================================[0m
2024-12-25T09:16:46.147108006Z [31mERROR[0m tests/test_inference_compute_tests.py - ValueError: Invalid API Key Provided
2024-12-25T09:16:46.147129839Z !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2024-12-25T09:16:46.147199760Z [31m[32m14 tests collected[0m, [31m1 error[0m[31m in 1.12s[0m[0m
2024-12-25T09:16:59.248338083Z [?2004hroot@f7349b543439:/dataformer# l [Ks tests/
2024-12-25T09:16:59.249738057Z [?2004l
README.MD				   test_cache_vars.py	      test_embeddings.py	       test_llm_chat_generation.py  test_quality_scorer.py
2024-12-25T09:16:59.249757643Z __init__.py				   test_caching_requests.py   test_eval_quality.py	       test_llm_text_generation.py  test_sampling_params.py
2024-12-25T09:16:59.249760529Z __pycache__				   test_complexity_scorer.py  test_evol_instruct.py	       test_magpie.py		    test_task_id_generator.py
2024-12-25T09:16:59.249763212Z test_all_api_providers_in_request_list.py  test_deita.py	      test_inference_compute_tests.py  test_ollama.py		    test_various_limits_request_list_formation.py
2024-12-25T09:17:03.210436778Z [?2004hroot@f7349b543439:/dataformer# ls -a tests/
2024-12-25T09:17:03.211799498Z [?2004l
.	     __pycache__				test_complexity_scorer.py  test_evol_instruct.py	    test_magpie.py	     test_task_id_generator.py
2024-12-25T09:17:03.211822695Z ..	     test_all_api_providers_in_request_list.py	test_deita.py		   test_inference_compute_tests.py  test_ollama.py	     test_various_limits_request_list_formation.py
2024-12-25T09:17:03.211835047Z README.MD    test_cache_vars.py				test_embeddings.py	   test_llm_chat_generation.py	    test_quality_scorer.py
2024-12-25T09:17:03.211837564Z __init__.py  test_caching_requests.py			test_eval_quality.py	   test_llm_text_generation.py	    test_sampling_params.py
2024-12-25T09:17:25.042633092Z [?2004hroot@f7349b543439:/dataformer# cat[K[K[Kecho ""[7mAPI_KEY=your_valid_api_key[27m"API_KEY=your_valid_api_key" > tests/.env
2024-12-25T09:17:27.478373845Z [?2004l
[?2004hroot@f7349b543439:/dataformer# echo "API_KEY=your_valid_api_key" > tests/.env
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cls -a tests/[K[3Ptests/pytest --collect-only -q
2024-12-25T09:17:28.830655490Z [?2004l
tests/test_all_api_providers_in_request_list.py::test_all_api_providers
2024-12-25T09:17:28.830686001Z tests/test_cache_vars.py::test_cache_vars
2024-12-25T09:17:28.830689543Z tests/test_caching_requests.py::test_caching_requests
2024-12-25T09:17:28.830691655Z tests/test_complexity_scorer.py::test_complexity_scorer
2024-12-25T09:17:28.830693775Z tests/test_deita.py::test_deita
2024-12-25T09:17:28.830695875Z tests/test_embeddings.py::test_embedding_generation
2024-12-25T09:17:28.830698073Z tests/test_eval_quality.py::test_evol_quality
2024-12-25T09:17:28.830700084Z tests/test_evol_instruct.py::test_evol_instruct
2024-12-25T09:17:28.830702426Z tests/test_llm_chat_generation.py::test_llm_generate_proper_response
2024-12-25T09:17:28.830704726Z tests/test_llm_text_generation.py::test_llm_generate_proper_response
2024-12-25T09:17:28.830706698Z tests/test_quality_scorer.py::test_quality_scorer
2024-12-25T09:17:28.830709012Z tests/test_sampling_params.py::test_sampling_parameters
2024-12-25T09:17:28.830711083Z tests/test_task_id_generator.py::test_task_id_generator
2024-12-25T09:17:28.830712981Z tests/test_various_limits_request_list_formation.py::test_various_limits_and_request_lists
2024-12-25T09:17:28.929427807Z 
2024-12-25T09:17:28.929463272Z ========================================================================================= ERRORS ==========================================================================================
2024-12-25T09:17:28.929466534Z [31m[1m_________________________________________________________________ ERROR collecting tests/test_inference_compute_tests.py __________________________________________________________________[0m
2024-12-25T09:17:28.929469545Z [1m[31mtests/test_inference_compute_tests.py[0m:9: in <module>
2024-12-25T09:17:28.929683797Z     llm = AsyncLLM(
2024-12-25T09:17:28.929699854Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:302: in __init__
2024-12-25T09:17:28.929910178Z     self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:17:28.929923638Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:316: in check_model_exists
2024-12-25T09:17:28.930106858Z     api_key=self.get_api_key()
2024-12-25T09:17:28.930113265Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:451: in get_api_key
2024-12-25T09:17:28.930243230Z     raise ValueError("Invalid API Key Provided")
2024-12-25T09:17:28.930248495Z [1m[31mE   ValueError: Invalid API Key Provided[0m
2024-12-25T09:17:28.930495214Z [36m[1m================================================================================= short test summary info =================================================================================[0m
2024-12-25T09:17:28.930499344Z [31mERROR[0m tests/test_inference_compute_tests.py - ValueError: Invalid API Key Provided
2024-12-25T09:17:28.930542944Z !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2024-12-25T09:17:28.930652920Z [31m[32m14 tests collected[0m, [31m1 error[0m[31m in 1.26s[0m[0m
2024-12-25T09:17:41.685917575Z [?2004hroot@f7349b543439:/dataformer# rm -rf tests/.env 
2024-12-25T09:17:53.689046413Z [?2004l
[?2004hroot@f7349b543439:/dataformer# ex[K[Krm -rf tests/.env pytest --collect-only -qecho "API_KEY=your_valid_api_key" > tests/.env
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cls -a tests/[K[3Ptests/pytest --collect-only -qip install pytest-dotenvcat tests/test_inference_compute_tests.py
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[17Ppytest --collect-only -q[11Punset API_KEYpytest --collect-only -q[11Punset API_KEYpytest --collect-only -qexport API_KEY=your_valid_api_key[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K123
2024-12-25T09:17:55.245829796Z [?2004l
[?2004hroot@f7349b543439:/dataformer# export API_KEY=123rm -rf tests/.env pytest --collect-only -q
2024-12-25T09:17:56.458201265Z [?2004l
tests/test_all_api_providers_in_request_list.py::test_all_api_providers
2024-12-25T09:17:56.458230573Z tests/test_cache_vars.py::test_cache_vars
2024-12-25T09:17:56.458234792Z tests/test_caching_requests.py::test_caching_requests
2024-12-25T09:17:56.458237303Z tests/test_complexity_scorer.py::test_complexity_scorer
2024-12-25T09:17:56.458254186Z tests/test_deita.py::test_deita
2024-12-25T09:17:56.458256652Z tests/test_embeddings.py::test_embedding_generation
2024-12-25T09:17:56.458259175Z tests/test_eval_quality.py::test_evol_quality
2024-12-25T09:17:56.458261543Z tests/test_evol_instruct.py::test_evol_instruct
2024-12-25T09:17:56.458263755Z tests/test_llm_chat_generation.py::test_llm_generate_proper_response
2024-12-25T09:17:56.458266032Z tests/test_llm_text_generation.py::test_llm_generate_proper_response
2024-12-25T09:17:56.458268482Z tests/test_quality_scorer.py::test_quality_scorer
2024-12-25T09:17:56.458270356Z tests/test_sampling_params.py::test_sampling_parameters
2024-12-25T09:17:56.458272258Z tests/test_task_id_generator.py::test_task_id_generator
2024-12-25T09:17:56.458274178Z tests/test_various_limits_request_list_formation.py::test_various_limits_and_request_lists
2024-12-25T09:17:56.547546283Z 
2024-12-25T09:17:56.547574109Z ========================================================================================= ERRORS ==========================================================================================
2024-12-25T09:17:56.547577044Z [31m[1m_________________________________________________________________ ERROR collecting tests/test_inference_compute_tests.py __________________________________________________________________[0m
2024-12-25T09:17:56.547579904Z [1m[31mtests/test_inference_compute_tests.py[0m:9: in <module>
2024-12-25T09:17:56.547872814Z     llm = AsyncLLM(
2024-12-25T09:17:56.547891546Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:302: in __init__
2024-12-25T09:17:56.548009633Z     self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:17:56.548021884Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:316: in check_model_exists
2024-12-25T09:17:56.548178713Z     api_key=self.get_api_key()
2024-12-25T09:17:56.548183461Z [1m[31msrc/dataformer/llms/asyncllm.py[0m:451: in get_api_key
2024-12-25T09:17:56.548369927Z     raise ValueError("Invalid API Key Provided")
2024-12-25T09:17:56.548377590Z [1m[31mE   ValueError: Invalid API Key Provided[0m
2024-12-25T09:17:56.548592840Z [36m[1m================================================================================= short test summary info =================================================================================[0m
2024-12-25T09:17:56.548596595Z [31mERROR[0m tests/test_inference_compute_tests.py - ValueError: Invalid API Key Provided
2024-12-25T09:17:56.548598740Z !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2024-12-25T09:17:56.548687425Z [31m[32m14 tests collected[0m, [31m1 error[0m[31m in 1.12s[0m[0m
2024-12-25T09:18:20.639148154Z [?2004hroot@f7349b543439:/dataformer# cat [7mtests/test_inference_compute_tests.py[27m
[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ctests/test_inference_compute_tests.py
2024-12-25T09:18:20.640253074Z [?2004l
from dotenv import load_dotenv
2024-12-25T09:18:20.640273874Z # Load environment variables from .env file
2024-12-25T09:18:20.640276814Z load_dotenv()
2024-12-25T09:18:20.640278944Z from dataformer.llms import AsyncLLM
2024-12-25T09:18:20.640280963Z from dataformer.components.SelfConsistency import SelfConsistency
2024-12-25T09:18:20.640283230Z from dataformer.components.cot import cot
2024-12-25T09:18:20.640285241Z from dataformer.components.pvg import pvg
2024-12-25T09:18:20.640287072Z from dataformer.components.rto import rto
2024-12-25T09:18:20.640289011Z llm = AsyncLLM(
2024-12-25T09:18:20.640291193Z     model="meta-llama/Meta-Llama-3.1-8B-Instruct", api_provider="deepinfra"
2024-12-25T09:18:20.640293436Z )  
2024-12-25T09:18:20.640295310Z def test_cot():
2024-12-25T09:18:20.640297178Z     request_list = [
2024-12-25T09:18:20.640299438Z         {"messages": [{"role": "user", "content": "If a train leaves a station traveling at 60 miles per hour and another train leaves the same station 30 minutes later traveling at 90 miles per hour, when will the second train catch up to the first train?"}]}
2024-12-25T09:18:20.640302781Z     ]
2024-12-25T09:18:20.640304610Z    
2024-12-25T09:18:20.640306383Z     cot_instance = cot(llm)
2024-12-25T09:18:20.640308340Z     results = cot_instance.generate(request_list)
2024-12-25T09:18:20.640310375Z     assert results is not None, "Response is missing"
2024-12-25T09:18:20.640312433Z     assert results[0]['cot_response'] is not None, "No CoT response"
2024-12-25T09:18:20.640314441Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:18:20.640316438Z 
2024-12-25T09:18:20.640318219Z def test_self_consistency():
2024-12-25T09:18:20.640320067Z     request_list = [
2024-12-25T09:18:20.640321967Z         {"messages": [{"role": "user", "content": "I have a dish of potatoes. The following statements are true: No potatoes of mine, that are new, have been boiled. All my potatoes in this dish are fit to eat. No unboiled potatoes of mine are fit to eat. Are there any new potatoes in this dish?"}]}
2024-12-25T09:18:20.640324618Z     ]
2024-12-25T09:18:20.640326390Z    
2024-12-25T09:18:20.640328193Z     self_consistency_instance = SelfConsistency(llm)
2024-12-25T09:18:20.640330132Z     results = self_consistency_instance.generate(request_list=request_list, return_model_answer=True)
2024-12-25T09:18:20.640344556Z     assert results is not None, "Response is missing"
2024-12-25T09:18:20.640354323Z     assert results[0]['SelfConsistency_response'] is not None, "No SelfConsistency response"
2024-12-25T09:18:20.640358414Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:18:20.640360412Z 
2024-12-25T09:18:20.640362236Z def test_pvg():
2024-12-25T09:18:20.640364057Z     request_list = [
2024-12-25T09:18:20.640365908Z         {"messages": [{"role": "user", "content": "Write a code in python for timetable generation. Consider all the constraints."}]}
2024-12-25T09:18:20.640368222Z     ]
2024-12-25T09:18:20.640370048Z     
2024-12-25T09:18:20.640371861Z     pvg_instance = pvg(llm)
2024-12-25T09:18:20.640373732Z     results = pvg_instance.generate(request_list)
2024-12-25T09:18:20.640376288Z     assert results is not None, "Response is missing"
2024-12-25T09:18:20.640378360Z     assert results[0]['pvg_response'] is not None, "No PVG response"
2024-12-25T09:18:20.640380380Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:18:20.640382374Z 
2024-12-25T09:18:20.640384122Z def test_rto():
2024-12-25T09:18:20.640385988Z     request_list = [
2024-12-25T09:18:20.640387855Z         {"messages": [{"role": "user", "content": "Write a genetic algorithm code in python which is fast."}]}
2024-12-25T09:18:20.640390072Z     ]
2024-12-25T09:18:20.640391846Z     rto_instance = rto(llm)
2024-12-25T09:18:20.640393720Z     results = rto_instance.generate(request_list)
2024-12-25T09:18:20.640395617Z     assert results is not None, "Response is missing"
2024-12-25T09:18:20.640397573Z     assert results[0]['rto_response'] is not None, "No RTO response"
2024-12-25T09:18:20.640399627Z     assert results[0]['model_response'] is not None, "No model response"
2024-12-25T09:18:20.640401603Z def test_inference_compute_tests():
2024-12-25T09:18:20.640403472Z     test_cot()
2024-12-25T09:18:20.640405285Z     test_self_consistency()
2024-12-25T09:18:20.640407156Z     test_pvg()
2024-12-25T09:18:20.640409039Z     test_rto()
2024-12-25T09:19:56.623323319Z [?2004hroot@f7349b543439:/dataformer# cata [K[K[K [Kt [7msrc/dataformer/llms/asyncllm.py[27msrc/dataformer/llms/asyncllm.py
2024-12-25T09:19:56.624476657Z [?2004l
# imports
2024-12-25T09:19:56.624494158Z import asyncio  # for running API calls concurrently
2024-12-25T09:19:56.624508784Z import json  # for saving results to a jsonl file
2024-12-25T09:19:56.624511045Z import logging  # for logging rate limit warnings and other messages
2024-12-25T09:19:56.624513233Z import os  # for reading API key
2024-12-25T09:19:56.624515246Z import re  # for matching endpoint from request URL
2024-12-25T09:19:56.624517150Z import time  # for sleeping after rate limit is hit
2024-12-25T09:19:56.624519362Z import subprocess # for checking if the provided model really exists
2024-12-25T09:19:56.624521417Z import sys # for checking if the provided model really exists
2024-12-25T09:19:56.624523332Z # for storing API inputs, outputs, and metadata
2024-12-25T09:19:56.624525203Z import typing
2024-12-25T09:19:56.624527364Z from dataclasses import (
2024-12-25T09:19:56.624530463Z     dataclass,
2024-12-25T09:19:56.624532290Z     field,
2024-12-25T09:19:56.624534107Z )
2024-12-25T09:19:56.624535985Z 
2024-12-25T09:19:56.624537877Z import aiohttp  # for making API calls concurrently
2024-12-25T09:19:56.624539802Z import tiktoken  # for counting tokens
2024-12-25T09:19:56.624541755Z 
2024-12-25T09:19:56.624543572Z from dataformer.llms.api_providers import api_key_dict, url_dict, model_dict
2024-12-25T09:19:56.624545671Z from dataformer.utils.cache import (
2024-12-25T09:19:56.624547524Z     create_hash,
2024-12-25T09:19:56.624549471Z     get_cache_vars,
2024-12-25T09:19:56.624551500Z     get_request_details,
2024-12-25T09:19:56.624553547Z     task_id_generator_function,
2024-12-25T09:19:56.624555405Z     delete_cache
2024-12-25T09:19:56.624557274Z )
2024-12-25T09:19:56.624559076Z from dataformer.utils.notebook import in_notebook
2024-12-25T09:19:56.624561063Z 
2024-12-25T09:19:56.624562879Z if in_notebook():
2024-12-25T09:19:56.624564706Z     import nest_asyncio
2024-12-25T09:19:56.624566577Z 
2024-12-25T09:19:56.624568310Z     nest_asyncio.apply()
2024-12-25T09:19:56.624570205Z 
2024-12-25T09:19:56.624571963Z 
2024-12-25T09:19:56.624573769Z @dataclass
2024-12-25T09:19:56.624575561Z class StatusTracker:
2024-12-25T09:19:56.624577515Z     """Stores metadata about the script's progress. Only one instance is created."""
2024-12-25T09:19:56.624579858Z 
2024-12-25T09:19:56.624581664Z     num_tasks_started: int = 0
2024-12-25T09:19:56.624583574Z     num_tasks_in_progress: int = 0  # script ends when this reaches 0
2024-12-25T09:19:56.624585572Z     num_tasks_succeeded: int = 0
2024-12-25T09:19:56.624587436Z     num_tasks_failed: int = 0
2024-12-25T09:19:56.624592635Z     num_rate_limit_errors: int = 0
2024-12-25T09:19:56.624594618Z     num_api_errors: int = 0  # excluding rate limit errors, counted above
2024-12-25T09:19:56.624596564Z     num_other_errors: int = 0
2024-12-25T09:19:56.624598407Z     time_of_last_rate_limit_error: int = 0  # used to cool off after hitting rate limits
2024-12-25T09:19:56.624600402Z 
2024-12-25T09:19:56.624602159Z 
2024-12-25T09:19:56.624603928Z @dataclass
2024-12-25T09:19:56.624605695Z class APIRequest:
2024-12-25T09:19:56.624607594Z     """Stores an API request's inputs, outputs, and other metadata. Contains a method to make an API call."""
2024-12-25T09:19:56.624609696Z 
2024-12-25T09:19:56.624611461Z     task_id: int
2024-12-25T09:19:56.624613255Z     recent_task_id:int
2024-12-25T09:19:56.624615139Z     difference_task_id:int
2024-12-25T09:19:56.624616979Z     request_json: dict
2024-12-25T09:19:56.624618833Z     token_consumption: int
2024-12-25T09:19:56.624620663Z     attempts_left: int
2024-12-25T09:19:56.624622462Z     metadata: dict
2024-12-25T09:19:56.624624330Z     result: list = field(default_factory=list)
2024-12-25T09:19:56.624626227Z 
2024-12-25T09:19:56.624628141Z     async def call_api(
2024-12-25T09:19:56.624630010Z         self,
2024-12-25T09:19:56.624631955Z         session: aiohttp.ClientSession,
2024-12-25T09:19:56.624633806Z         request_url: str,
2024-12-25T09:19:56.624636328Z         request_header: dict,
2024-12-25T09:19:56.624638218Z         retry_queue: asyncio.Queue,
2024-12-25T09:19:56.624640153Z         cache_filepath: str,
2024-12-25T09:19:56.624641994Z         association_filepath:str,
2024-12-25T09:19:56.624643820Z         project_name:str,
2024-12-25T09:19:56.624645741Z         status_tracker: StatusTracker,
2024-12-25T09:19:56.624647591Z         asyncllm_instance,
2024-12-25T09:19:56.624649420Z     ):
2024-12-25T09:19:56.624651322Z         """Calls the OpenAI API and saves results."""
2024-12-25T09:19:56.624653554Z 
2024-12-25T09:19:56.624655353Z         if self.task_id in asyncllm_instance.skip_task_ids:
2024-12-25T09:19:56.624657450Z             return  # Skip request
2024-12-25T09:19:56.624659323Z 
2024-12-25T09:19:56.624661129Z         logging.info(f"Starting request #{self.task_id}")
2024-12-25T09:19:56.624663143Z         error = None
2024-12-25T09:19:56.624664983Z         try:
2024-12-25T09:19:56.624666809Z           
2024-12-25T09:19:56.624671345Z             async with session.post(
2024-12-25T09:19:56.624673293Z                 url=request_url, headers=request_header, json=self.request_json
2024-12-25T09:19:56.624675278Z             ) as response:
2024-12-25T09:19:56.624677205Z                 response = await response.json()
2024-12-25T09:19:56.624679175Z             if "error" in response:
2024-12-25T09:19:56.624681177Z                 logging.warning(
2024-12-25T09:19:56.624683125Z                     f"Request {self.task_id} failed with error {response['error']}"
2024-12-25T09:19:56.624685162Z                 )
2024-12-25T09:19:56.624686999Z                 status_tracker.num_api_errors += 1
2024-12-25T09:19:56.624688861Z                 error = response
2024-12-25T09:19:56.624690701Z                 if "Rate limit" in response["error"].get("message", ""):
2024-12-25T09:19:56.624693003Z                     status_tracker.time_of_last_rate_limit_error = time.time()
2024-12-25T09:19:56.624695023Z                     status_tracker.num_rate_limit_errors += 1
2024-12-25T09:19:56.624700656Z                     status_tracker.num_api_errors -= (
2024-12-25T09:19:56.624702609Z                         1  # rate limit errors are counted separately
2024-12-25T09:19:56.624704560Z                     )
2024-12-25T09:19:56.624706407Z 
2024-12-25T09:19:56.624708219Z         except Exception as e:  # catching naked exceptions is bad practice, but in this case we'll log & save them
2024-12-25T09:19:56.624710390Z             logging.warning(f"Request {self.task_id} failed with Exception {e}")
2024-12-25T09:19:56.624712521Z             status_tracker.num_other_errors += 1
2024-12-25T09:19:56.624714425Z             error = e
2024-12-25T09:19:56.624716338Z 
2024-12-25T09:19:56.624718113Z         if error:
2024-12-25T09:19:56.624719923Z             self.result.append(error)
2024-12-25T09:19:56.624721774Z             self.attempts_left -= 1
2024-12-25T09:19:56.624723627Z             logging.info(f"Request ID: {self.task_id}, Attempts Left: {self.attempts_left}")
2024-12-25T09:19:56.624725738Z             if self.attempts_left:
2024-12-25T09:19:56.624727587Z                 retry_queue.put_nowait(self)
2024-12-25T09:19:56.624729659Z             else:
2024-12-25T09:19:56.624731482Z                 logging.error(
2024-12-25T09:19:56.624733441Z                     f"Request {self.request_json} failed after all attempts. Saving errors: {self.result}"
2024-12-25T09:19:56.624735543Z                 )
2024-12-25T09:19:56.624737677Z                 response = [str(e) for e in self.result]
2024-12-25T09:19:56.624739639Z                 data = self.create_data(asyncllm_instance, response)
2024-12-25T09:19:56.624743747Z                 if data is not None:
2024-12-25T09:19:56.624745656Z                     asyncllm_instance.response_list.append(data)
2024-12-25T09:19:56.624747628Z                 status_tracker.num_tasks_in_progress -= 1
2024-12-25T09:19:56.624749533Z                 status_tracker.num_tasks_failed += 1
2024-12-25T09:19:56.624751425Z         else:
2024-12-25T09:19:56.624753239Z             response = self.convert_response(request_url, response)
2024-12-25T09:19:56.624755170Z             data = self.create_data(asyncllm_instance, response)
2024-12-25T09:19:56.624757118Z 
2024-12-25T09:19:56.624758889Z             if data is not None:
2024-12-25T09:19:56.624760723Z                 asyncllm_instance.response_list.append(data)
2024-12-25T09:19:56.624762761Z                 # Save the response immediately after processing the request
2024-12-25T09:19:56.624764800Z                 if cache_filepath is not None:
2024-12-25T09:19:56.624766807Z                     json_string = json.dumps(data)
2024-12-25T09:19:56.624768779Z                     with open(cache_filepath, "a") as f:
2024-12-25T09:19:56.624770789Z                         f.write(json_string + "\n")
2024-12-25T09:19:56.624772782Z                 
2024-12-25T09:19:56.624774578Z                 if association_filepath is not None:
2024-12-25T09:19:56.624776634Z                     self.update_association_file(association_filepath,cache_filepath,project_name)
2024-12-25T09:19:56.624778709Z             status_tracker.num_tasks_in_progress -= 1
2024-12-25T09:19:56.624783127Z             status_tracker.num_tasks_succeeded += 1
2024-12-25T09:19:56.624786463Z 
2024-12-25T09:19:56.624789287Z     def create_data(self, asyncllm_instance, response):
2024-12-25T09:19:56.624792975Z         data = [
2024-12-25T09:19:56.624796497Z             {asyncllm_instance.cache_hash[self.task_id-self.recent_task_id-self.difference_task_id]: self.task_id-self.recent_task_id-self.difference_task_id},
2024-12-25T09:19:56.624800535Z             self.request_json,
2024-12-25T09:19:56.624804084Z             response,
2024-12-25T09:19:56.624806160Z         ] + ([self.metadata] if self.metadata else [])
2024-12-25T09:19:56.624809693Z         return data
2024-12-25T09:19:56.624813210Z         
2024-12-25T09:19:56.624816772Z     def update_association_file(self,association_filepath,cache_filepath,project_name):
2024-12-25T09:19:56.624818793Z         with open(association_filepath,"r") as f:
2024-12-25T09:19:56.624820792Z             data = json.load(f)
2024-12-25T09:19:56.624822687Z         hash_data=[]
2024-12-25T09:19:56.624824513Z         #Iterate data and get hash
2024-12-25T09:19:56.624828640Z         if os.path.exists(cache_filepath):
2024-12-25T09:19:56.624830755Z             with open(cache_filepath,"r") as f:
2024-12-25T09:19:56.624832695Z                 file = f.readlines()
2024-12-25T09:19:56.624834542Z                 for row in file:
2024-12-25T09:19:56.624836447Z                     row = json.loads(row)
2024-12-25T09:19:56.624838314Z                     hash_data.append(list(row[0].keys())[0])
2024-12-25T09:19:56.624840250Z             
2024-12-25T09:19:56.624842763Z             filename = os.path.basename(cache_filepath).split(".")[0]
2024-12-25T09:19:56.624844821Z             dict_data_projects={}
2024-12-25T09:19:56.624846672Z             with open(association_filepath,"r") as file:
2024-12-25T09:19:56.624848760Z                 json_data = json.load(file)
2024-12-25T09:19:56.624850758Z                 dict_data_projects['project_requests'] = json_data['project_requests']
2024-12-25T09:19:56.624852730Z                 #check if project name exists and append r create new association
2024-12-25T09:19:56.624854804Z                 if project_name in list(json_data["project_requests"].keys()):
2024-12-25T09:19:56.624856860Z                     if filename not in dict_data_projects['project_requests'][project_name]:
2024-12-25T09:19:56.624858854Z                         dict_data_projects['project_requests'][project_name].append(filename)
2024-12-25T09:19:56.624860854Z                 else:
2024-12-25T09:19:56.624862772Z                     dict_data_projects['project_requests'][project_name]=[filename]
2024-12-25T09:19:56.624864725Z                
2024-12-25T09:19:56.624866619Z             data[filename]= hash_data
2024-12-25T09:19:56.624868524Z             if "project_requests" in list(dict_data_projects.keys()):
2024-12-25T09:19:56.624870603Z                 data["project_requests"] = dict_data_projects['project_requests']
2024-12-25T09:19:56.624872780Z             else:
2024-12-25T09:19:56.624874617Z                 raise ValueError("Association file has incorrect associations.")
2024-12-25T09:19:56.624876633Z             with open(association_filepath,"w") as f:
2024-12-25T09:19:56.624878921Z                 json.dump(data,f)
2024-12-25T09:19:56.624880858Z     
2024-12-25T09:19:56.624882655Z     def convert_response(self, request_url, response):
2024-12-25T09:19:56.624884531Z         ollama_keys = ("ollama", "11434", "api/chat", "api/generate")
2024-12-25T09:19:56.624886848Z         if request_url.endswith("completions"):
2024-12-25T09:19:56.624888808Z             return response
2024-12-25T09:19:56.624890651Z         elif "anthropic" in request_url:
2024-12-25T09:19:56.624892644Z             response["usage"] = {
2024-12-25T09:19:56.624896550Z                 "prompt_tokens": response["usage"]["input_tokens"],
2024-12-25T09:19:56.624898765Z                 "completion_tokens": response["usage"]["output_tokens"],
2024-12-25T09:19:56.624900840Z                 "total_tokens": response["usage"]["input_tokens"]
2024-12-25T09:19:56.624902908Z                 + response["usage"]["output_tokens"],
2024-12-25T09:19:56.624904922Z             }
2024-12-25T09:19:56.624906830Z             response["object"] = response.pop("type", "")
2024-12-25T09:19:56.624908978Z             response["choices"] = [
2024-12-25T09:19:56.624911153Z                 {
2024-12-25T09:19:56.624913063Z                     "index": response.pop("stop_sequence", ""),
2024-12-25T09:19:56.624915161Z                     "message": {
2024-12-25T09:19:56.624917072Z                         "role": response.pop("role", ""),
2024-12-25T09:19:56.624919598Z                         "content": response.pop("content")[0]["text"],
2024-12-25T09:19:56.624921814Z                     },
2024-12-25T09:19:56.624923783Z                     "finish_reason": response.pop("stop_reason", ""),
2024-12-25T09:19:56.624925937Z                 }
2024-12-25T09:19:56.624927806Z             ]
2024-12-25T09:19:56.624929604Z             response["created"] = int(time.time())
2024-12-25T09:19:56.624931530Z             return response
2024-12-25T09:19:56.624933348Z         elif any(word in request_url for word in ollama_keys):
2024-12-25T09:19:56.624935345Z             response["object"] = (
2024-12-25T09:19:56.624937258Z                 "ollama.chat" if "chat" in request_url else "ollama.generate"
2024-12-25T09:19:56.624939561Z             )
2024-12-25T09:19:56.624941365Z             response["created"] = response.pop("created_at", int(time.time()))
2024-12-25T09:19:56.624943588Z             response["system_fingerprint"] = "fp_ollama"
2024-12-25T09:19:56.624945567Z             response["choices"] = [
2024-12-25T09:19:56.624947450Z                 {
2024-12-25T09:19:56.624957305Z                     "index": 0,
2024-12-25T09:19:56.624959961Z                     "message": response.pop("message", ""),
2024-12-25T09:19:56.624962024Z                     "finish_reason": response.pop("done_reason", ""),
2024-12-25T09:19:56.624964060Z                 }
2024-12-25T09:19:56.624965878Z             ]
2024-12-25T09:19:56.624967693Z             response["usage"] = {
2024-12-25T09:19:56.624969638Z                 "prompt_tokens": response.get("prompt_eval_count", 0),
2024-12-25T09:19:56.624971697Z                 "completion_tokens": response.get("eval_count", 0),
2024-12-25T09:19:56.624975776Z                 "total_tokens": response.pop("prompt_eval_count", 0)
2024-12-25T09:19:56.624977908Z                 + response.pop("eval_count", 0),
2024-12-25T09:19:56.624979856Z             }
2024-12-25T09:19:56.624981727Z 
2024-12-25T09:19:56.624984590Z             for key in (
2024-12-25T09:19:56.624986482Z                 "done",
2024-12-25T09:19:56.624988388Z                 "total_duration",
2024-12-25T09:19:56.624990293Z                 "load_duration",
2024-12-25T09:19:56.624992179Z                 "prompt_eval_duration",
2024-12-25T09:19:56.624994949Z                 "eval_duration",
2024-12-25T09:19:56.624998036Z             ):
2024-12-25T09:19:56.625000953Z                 response.pop(key, "")
2024-12-25T09:19:56.625003674Z             return response
2024-12-25T09:19:56.625006322Z         else:
2024-12-25T09:19:56.625008874Z             return response
2024-12-25T09:19:56.625011596Z 
2024-12-25T09:19:56.625014210Z 
2024-12-25T09:19:56.625016849Z class AsyncLLM:
2024-12-25T09:19:56.625019664Z     def __init__(
2024-12-25T09:19:56.625022595Z         self,
2024-12-25T09:19:56.625025429Z         api_provider="openai",
2024-12-25T09:19:56.625028526Z         model="",
2024-12-25T09:19:56.625031752Z         api_key=None,
2024-12-25T09:19:56.625034715Z         url="",        
2024-12-25T09:19:56.625037533Z         sampling_params={},
2024-12-25T09:19:56.625040614Z         max_requests_per_minute=None,
2024-12-25T09:19:56.625044262Z         max_tokens_per_minute=None,
2024-12-25T09:19:56.625046157Z         max_concurrent_requests=None,
2024-12-25T09:19:56.625048006Z         max_rps=False,
2024-12-25T09:19:56.625049889Z         max_attempts=3,
2024-12-25T09:19:56.625051802Z         token_encoding_name="cl100k_base",
2024-12-25T09:19:56.625053766Z         logging_level=logging.INFO,
2024-12-25T09:19:56.625055612Z         gen_type="chat",
2024-12-25T09:19:56.625057506Z         project_name=None,
2024-12-25T09:19:56.625059395Z         cache_dir=".cache/dataformer"
2024-12-25T09:19:56.625061278Z     ):
2024-12-25T09:19:56.625063204Z         self.api_key = api_key
2024-12-25T09:19:56.625065045Z         self.url = url
2024-12-25T09:19:56.625067401Z         self.api_provider = api_provider
2024-12-25T09:19:56.625069270Z         self.max_requests_per_minute = max_requests_per_minute or os.getenv(
2024-12-25T09:19:56.625071353Z             "MAX_REQUESTS_PER_MINUTE", 60
2024-12-25T09:19:56.625081804Z         )
2024-12-25T09:19:56.625083838Z         self.max_requests_per_minute = int(self.max_requests_per_minute)
2024-12-25T09:19:56.625085873Z         
2024-12-25T09:19:56.625087718Z         self.max_tokens_per_minute = max_tokens_per_minute or os.getenv(
2024-12-25T09:19:56.625089788Z             "MAX_TOKENS_PER_MINUTE", 10000000000
2024-12-25T09:19:56.625091757Z         )
2024-12-25T09:19:56.625093657Z         self.max_tokens_per_minute = int(self.max_tokens_per_minute)
2024-12-25T09:19:56.625095671Z         self.max_concurrent_requests = max_concurrent_requests or os.getenv(
2024-12-25T09:19:56.625097717Z             "MAX_TOKENS_PER_MINUTE"
2024-12-25T09:19:56.625099607Z         )
2024-12-25T09:19:56.625101408Z         if self.max_concurrent_requests:
2024-12-25T09:19:56.625103356Z             self.max_concurrent_requests = int(self.max_concurrent_requests)
2024-12-25T09:19:56.625105407Z 
2024-12-25T09:19:56.625107350Z         self.max_rps = max_rps
2024-12-25T09:19:56.625109162Z         self.max_attempts = max_attempts
2024-12-25T09:19:56.625111008Z         self.token_encoding_name = token_encoding_name
2024-12-25T09:19:56.625112907Z         self.logging_level = logging_level
2024-12-25T09:19:56.625114739Z         self.gen_type = gen_type
2024-12-25T09:19:56.625116581Z         self.skip_task_ids = []
2024-12-25T09:19:56.625118422Z         self.cache_dir = cache_dir
2024-12-25T09:19:56.625120380Z         self.sampling_params = sampling_params
2024-12-25T09:19:56.625122351Z         self.task_id_generator = None
2024-12-25T09:19:56.625129377Z         self.project_name = project_name or os.getenv(
2024-12-25T09:19:56.625133751Z             "PROJECT_NAME"
2024-12-25T09:19:56.625135705Z         )
2024-12-25T09:19:56.625137474Z         if self.project_name=="" or self.project_name is None:
2024-12-25T09:19:56.625139500Z             self.project_name= "dataformer"
2024-12-25T09:19:56.625141533Z         self.project_name=self.project_name.lower()
2024-12-25T09:19:56.625143423Z         # initialize logging
2024-12-25T09:19:56.625145279Z         logging.basicConfig(level=self.logging_level, force=True)
2024-12-25T09:19:56.625147354Z 
2024-12-25T09:19:56.625149114Z         if model:
2024-12-25T09:19:56.625150930Z             self.model = model
2024-12-25T09:19:56.625152817Z         elif self.url or self.api_provider:
2024-12-25T09:19:56.625154667Z             self.url = self.url or self.get_request_url()
2024-12-25T09:19:56.625156569Z             self.model = model_dict.get(self.url)
2024-12-25T09:19:56.625160488Z         else:
2024-12-25T09:19:56.625162440Z             raise ValueError("Model not provided.")
2024-12-25T09:19:56.625164484Z         if self.url=="":
2024-12-25T09:19:56.625166431Z             self.url = self.get_request_url()
2024-12-25T09:19:56.625168347Z         # Skip check_model_exists if URL is provided
2024-12-25T09:19:56.625170253Z         if not url:
2024-12-25T09:19:56.625172073Z             self.check_model_exists(self.url, self.api_provider, self.api_key, self.model)
2024-12-25T09:19:56.625174018Z         if self.api_provider == "together":
2024-12-25T09:19:56.625175999Z             self.max_rps = True
2024-12-25T09:19:56.625177897Z 
2024-12-25T09:19:56.625180131Z     def check_model_exists(self,api_url,api_provider,api_key,model):
2024-12-25T09:19:56.625182138Z 
2024-12-25T09:19:56.625184001Z         # Check if the api_url is in the url_dict
2024-12-25T09:19:56.625185881Z         if not any(api_url in urls.values() for urls in url_dict.values()):
2024-12-25T09:19:56.625187813Z             print(f"Skipping model verification for URL: {api_url}")
2024-12-25T09:19:56.625189838Z             return
2024-12-25T09:19:56.625191686Z         
2024-12-25T09:19:56.625193578Z         # check if the url and api_key exists
2024-12-25T09:19:56.625195438Z         # check if the api_key and model exists
2024-12-25T09:19:56.625197314Z         if api_key=="" or not api_key:
2024-12-25T09:19:56.625199236Z             api_key=self.get_api_key()
2024-12-25T09:19:56.625201068Z             if not api_key and not model:
2024-12-25T09:19:56.625202944Z                 raise ValueError("API key not provided")
2024-12-25T09:19:56.625205010Z         # assign the api provider and url
2024-12-25T09:19:56.625206933Z         if api_provider=="" or not api_provider:
2024-12-25T09:19:56.625208942Z     
2024-12-25T09:19:56.625210732Z             for provider, urls in url_dict.items():
2024-12-25T09:19:56.625212651Z                 if api_url in urls.values():
2024-12-25T09:19:56.625214579Z                     api_provider = provider
2024-12-25T09:19:56.625216433Z                     break
2024-12-25T09:19:56.625218244Z             if api_provider=="" or not api_provider:
2024-12-25T09:19:56.625220122Z                 raise ValueError("No api provider found")
2024-12-25T09:19:56.625222128Z         
2024-12-25T09:19:56.625223959Z         # if api_provider api_url and model given go ahead
2024-12-25T09:19:56.625225870Z         if api_provider and model:
2024-12-25T09:19:56.625227749Z             
2024-12-25T09:19:56.625229572Z             #Get the url for making request to find out the models supported by the api 
2024-12-25T09:19:56.625233796Z             if isinstance(url_dict[api_provider], dict):
2024-12-25T09:19:56.625235765Z                     if "models" in url_dict[api_provider]:
2024-12-25T09:19:56.625237756Z                         url = url_dict[api_provider]["models"]
2024-12-25T09:19:56.625239758Z                     else:
2024-12-25T09:19:56.625241596Z                         url = url_dict[api_provider]["chat"] #for antropic only
2024-12-25T09:19:56.625243606Z             else:
2024-12-25T09:19:56.625245416Z                     url = url_dict[self.api_provider]
2024-12-25T09:19:56.625247301Z             
2024-12-25T09:19:56.625249090Z             # Make the GET request to get the models list  
2024-12-25T09:19:56.625251097Z             # anthropic doesn't have any list models api endpoint,check with message reply or error if any, to see if a amdoel exists or not
2024-12-25T09:19:56.625253173Z            
2024-12-25T09:19:56.625255009Z             if api_provider=="anthropic":
2024-12-25T09:19:56.625256911Z                 data = {
2024-12-25T09:19:56.625258720Z                     "model": model,
2024-12-25T09:19:56.625260648Z                     "max_tokens": self.max_tokens_per_minute,
2024-12-25T09:19:56.625262646Z                     "messages": [
2024-12-25T09:19:56.625266717Z                         {
2024-12-25T09:19:56.625268548Z                             "role": "user", 
2024-12-25T09:19:56.625271095Z                             "content": "Hello, world"
2024-12-25T09:19:56.625273131Z                             }
2024-12-25T09:19:56.625275060Z                         ]
2024-12-25T09:19:56.625276969Z                 }
2024-12-25T09:19:56.625278879Z 
2024-12-25T09:19:56.625280641Z                 json_data = json.dumps(data)
2024-12-25T09:19:56.625282599Z                 curl_command = [
2024-12-25T09:19:56.625284424Z                     "curl", "-s", "-X", "POST", url,
2024-12-25T09:19:56.625286546Z                     "--header", f"x-api-key: {api_key}",
2024-12-25T09:19:56.625288625Z                     "--header", "anthropic-version: 2023-06-01",
2024-12-25T09:19:56.625290698Z                     "--header", "Content-Type: application/json",
2024-12-25T09:19:56.625292694Z                     "--data", json_data
2024-12-25T09:19:56.625294589Z                 ]
2024-12-25T09:19:56.625296421Z             
2024-12-25T09:19:56.625298239Z             else:
2024-12-25T09:19:56.625300070Z                 curl_command = [
2024-12-25T09:19:56.625301921Z                     "curl",
2024-12-25T09:19:56.625305830Z                     "-s",
2024-12-25T09:19:56.625307791Z                     url,
2024-12-25T09:19:56.625309619Z                     "-H",
2024-12-25T09:19:56.625311505Z                     f"Authorization: Bearer {api_key}"
2024-12-25T09:19:56.625313450Z                 ]  
2024-12-25T09:19:56.625315272Z             if sys.platform == "win32":
2024-12-25T09:19:56.625317184Z                 CREATE_NO_WINDOW = subprocess.CREATE_NO_WINDOW # For windows platforms
2024-12-25T09:19:56.625319146Z             else:
2024-12-25T09:19:56.625320996Z                 CREATE_NO_WINDOW = 0  # For non-Windows platforms
2024-12-25T09:19:56.625322902Z 
2024-12-25T09:19:56.625324673Z             #execute the curl request and load the output in json format            
2024-12-25T09:19:56.625326610Z             try:
2024-12-25T09:19:56.625328454Z                 output = subprocess.check_output(curl_command, text=True,creationflags=CREATE_NO_WINDOW,encoding="utf-8")
2024-12-25T09:19:56.625330519Z             except Exception:
2024-12-25T09:19:56.625332396Z                 raise ValueError('Some exception occurred while testing for model support')
2024-12-25T09:19:56.625334353Z            
2024-12-25T09:19:56.625336172Z             try:
2024-12-25T09:19:56.625338048Z                 response = json.loads(output)
2024-12-25T09:19:56.625339891Z             except Exception:
2024-12-25T09:19:56.625341744Z                 raise ValueError("Tried to verify the model but received the following response from api provider.",output)
2024-12-25T09:19:56.625343869Z             
2024-12-25T09:19:56.625345662Z             # Convert response to dict if it's a list
2024-12-25T09:19:56.625347544Z             if isinstance(response, list):
2024-12-25T09:19:56.625349410Z                 response = {"data": response}
2024-12-25T09:19:56.625351431Z 
2024-12-25T09:19:56.625353208Z             
2024-12-25T09:19:56.625355014Z             if "error" in list(response.keys()):
2024-12-25T09:19:56.625356993Z                  raise ValueError("Tried to verify the model but received the error from the api provider",response)
2024-12-25T09:19:56.625359076Z             elif api_provider=="anthropic":
2024-12-25T09:19:56.625360968Z                 print("Model verified successfully")
2024-12-25T09:19:56.625362894Z                 return
2024-12-25T09:19:56.625364709Z                      
2024-12-25T09:19:56.625366848Z             # if proper response received go for model checking
2024-12-25T09:19:56.625368779Z             if 'id' in list(response.keys()) or 'data' in list(response.keys()):
2024-12-25T09:19:56.625370717Z                     response = response['data']
2024-12-25T09:19:56.625374721Z                     models = [i['id'] for i in response]
2024-12-25T09:19:56.625376702Z                     #Check if the model exists/supported by the api provider platform
2024-12-25T09:19:56.625378649Z                     if not model in models:
2024-12-25T09:19:56.625380585Z                         raise ValueError("Wrong model provided for the api_provider or url. The model doesn't exist on the given api_provider or url.")
2024-12-25T09:19:56.625382692Z                     print("Model verified successfully")
2024-12-25T09:19:56.625384684Z             else:
2024-12-25T09:19:56.625386507Z                 raise ValueError("tried to verify the model but received error." ,response)
2024-12-25T09:19:56.625388546Z             
2024-12-25T09:19:56.625390340Z     def get_request_url(self):
2024-12-25T09:19:56.625392192Z         if self.url:
2024-12-25T09:19:56.625394036Z             if not self.api_provider:
2024-12-25T09:19:56.625395895Z                 # If api_provider is not set, get it from url_dict
2024-12-25T09:19:56.625397808Z                 for provider, urls in url_dict.items():
2024-12-25T09:19:56.625399712Z                     if self.url in urls.values():
2024-12-25T09:19:56.625401573Z                         self.api_provider = provider
2024-12-25T09:19:56.625403439Z                         break
2024-12-25T09:19:56.625405282Z 
2024-12-25T09:19:56.625407046Z             if self.api_provider == "together":
2024-12-25T09:19:56.625408969Z                 self.max_rps = True
2024-12-25T09:19:56.625410827Z 
2024-12-25T09:19:56.625412575Z             return self.url
2024-12-25T09:19:56.625414422Z 
2024-12-25T09:19:56.625416172Z         if self.api_provider in url_dict:
2024-12-25T09:19:56.625418017Z             if isinstance(url_dict[self.api_provider], dict):
2024-12-25T09:19:56.625419952Z                 if self.gen_type in url_dict[self.api_provider]:
2024-12-25T09:19:56.625421892Z                     self.url = url_dict[self.api_provider][self.gen_type]
2024-12-25T09:19:56.625423830Z                 else:
2024-12-25T09:19:56.625425665Z                     raise ValueError("Invalid gen_type provided")
2024-12-25T09:19:56.625427632Z             else:
2024-12-25T09:19:56.625429470Z                 self.url = url_dict[self.api_provider]
2024-12-25T09:19:56.625431371Z         else:
2024-12-25T09:19:56.625433168Z             raise ValueError("Invalid API Provider")
2024-12-25T09:19:56.625435090Z 
2024-12-25T09:19:56.625436865Z         return self.url
2024-12-25T09:19:56.625438682Z    
2024-12-25T09:19:56.625451007Z        
2024-12-25T09:19:56.625453437Z     def get_api_key(self):
2024-12-25T09:19:56.625455354Z         if self.api_provider == "ollama":
2024-12-25T09:19:56.625457268Z             return "ollama"
2024-12-25T09:19:56.625459142Z         if self.api_key:
2024-12-25T09:19:56.625461006Z             return self.api_key
2024-12-25T09:19:56.625462841Z         else:
2024-12-25T09:19:56.625464657Z             for url, env_var in api_key_dict.items():
2024-12-25T09:19:56.625466546Z                 if url in self.url:
2024-12-25T09:19:56.625468411Z                     #send key only if it exists
2024-12-25T09:19:56.625470578Z                     if os.getenv(env_var):
2024-12-25T09:19:56.625473522Z                         return os.getenv(env_var)
2024-12-25T09:19:56.625475398Z 
2024-12-25T09:19:56.625477175Z         raise ValueError("Invalid API Key Provided")
2024-12-25T09:19:56.625479111Z 
2024-12-25T09:19:56.625480976Z     def get_requesturl_apikey(self):
2024-12-25T09:19:56.625482829Z         request_url = self.get_request_url()
2024-12-25T09:19:56.625484707Z         api_key = self.get_api_key()
2024-12-25T09:19:56.625486591Z         return request_url, api_key
2024-12-25T09:19:56.625488550Z     #Send request url and api provider
2024-12-25T09:19:56.625490394Z     def get_requesturl_apikey_list(self,url,api_provider):
2024-12-25T09:19:56.625492289Z         gen_type = self.gen_type
2024-12-25T09:19:56.625494138Z         if url:
2024-12-25T09:19:56.625496003Z             if not api_provider:
2024-12-25T09:19:56.625497877Z                 # If api_provider is not set, get it from url_dict
2024-12-25T09:19:56.625499780Z                 for provider, urls in url_dict.items():
2024-12-25T09:19:56.625501703Z                     if url in urls.values():
2024-12-25T09:19:56.625503556Z                         api_provider = provider
2024-12-25T09:19:56.625505427Z                         break
2024-12-25T09:19:56.625507274Z 
2024-12-25T09:19:56.625509043Z             
2024-12-25T09:19:56.625510843Z 
2024-12-25T09:19:56.625512617Z             return [url,api_provider]
2024-12-25T09:19:56.625514463Z 
2024-12-25T09:19:56.625516250Z         if api_provider in url_dict:
2024-12-25T09:19:56.625518116Z             if isinstance(url_dict[api_provider], dict):
2024-12-25T09:19:56.625520464Z                 if gen_type in url_dict[api_provider]:
2024-12-25T09:19:56.625523377Z                     url = url_dict[api_provider][gen_type]
2024-12-25T09:19:56.625527306Z                 else:
2024-12-25T09:19:56.625532044Z                     raise ValueError("Invalid gen_type provided")
2024-12-25T09:19:56.625534106Z             else:
2024-12-25T09:19:56.625535904Z                 url = url_dict[api_provider]
2024-12-25T09:19:56.625537825Z         else:
2024-12-25T09:19:56.625539596Z             raise ValueError("Invalid API Provider")
2024-12-25T09:19:56.625541535Z 
2024-12-25T09:19:56.625543264Z         return [url,api_provider]
2024-12-25T09:19:56.625545117Z     
2024-12-25T09:19:56.625546918Z 
2024-12-25T09:19:56.625548659Z     async def process_api_requests(
2024-12-25T09:19:56.625550557Z         self, request_url: str, api_key: str, request_list: list, cache_filepath: str, association_filepath:str,project_name:str, different_requests=False
2024-12-25T09:19:56.625552674Z     ):
2024-12-25T09:19:56.625554490Z         """Processes API requests in parallel, throttling to stay under rate limits."""
2024-12-25T09:19:56.625556613Z 
2024-12-25T09:19:56.625558359Z         # constants
2024-12-25T09:19:56.625560161Z         seconds_to_pause_after_rate_limit_error = 15
2024-12-25T09:19:56.625562026Z         seconds_to_sleep_each_loop = (
2024-12-25T09:19:56.625563987Z             0.001  # 1 ms limits max throughput to 1,000 requests per second
2024-12-25T09:19:56.625565950Z         )
2024-12-25T09:19:56.625567811Z 
2024-12-25T09:19:56.625569581Z         logging.debug(f"Logging initialized at level {self.logging_level}")
2024-12-25T09:19:56.625571605Z 
2024-12-25T09:19:56.625573345Z         if not different_requests:
2024-12-25T09:19:56.625575186Z                 # infer API endpoint and construct request header
2024-12-25T09:19:56.625577099Z             url = request_url
2024-12-25T09:19:56.625578960Z             api_endpoint = self.api_endpoint_from_url(request_url)
2024-12-25T09:19:56.625581589Z             request_header = {"Authorization": f"Bearer {api_key}"}
2024-12-25T09:19:56.625583681Z             # use api-key header for Azure deployments
2024-12-25T09:19:56.625585548Z             if "/deployments" in request_url:
2024-12-25T09:19:56.625587482Z                 request_header = {"api-key": f"{api_key}"}
2024-12-25T09:19:56.625589476Z             # Use x-api-key for Anthropic
2024-12-25T09:19:56.625591314Z             if self.api_provider == "anthropic":
2024-12-25T09:19:56.625593347Z                 request_header = {
2024-12-25T09:19:56.625595259Z                     "x-api-key": f"{api_key}",
2024-12-25T09:19:56.625597233Z                     "anthropic-version": "2023-06-01",
2024-12-25T09:19:56.625599322Z                     "content-type": "application/json",
2024-12-25T09:19:56.625603323Z                 }
2024-12-25T09:19:56.625605219Z                 for request in request_list:
2024-12-25T09:19:56.625607094Z                     request['max_tokens'] = self.max_tokens_per_minute
2024-12-25T09:19:56.625609012Z             if self.api_provider == "ollama":
2024-12-25T09:19:56.625610927Z                 request_header = {
2024-12-25T09:19:56.625612757Z                     "Content-Type": "application/json",
2024-12-25T09:19:56.625614755Z                     "api_key": api_key,
2024-12-25T09:19:56.625616701Z                 }
2024-12-25T09:19:56.625618531Z         else:
2024-12-25T09:19:56.625620320Z             url = request_list[0]["url"]
2024-12-25T09:19:56.625622237Z             #first request then set self.max_rps to True if provider is together
2024-12-25T09:19:56.625624170Z             if request_list[0]["api_provider"]=="together":
2024-12-25T09:19:56.625626296Z                 self.max_rps=True
2024-12-25T09:19:56.625628139Z         first_request=True
2024-12-25T09:19:56.625629970Z         second_request=False
2024-12-25T09:19:56.625631824Z         task_id_recent=0
2024-12-25T09:19:56.625633651Z         value_iterate=1
2024-12-25T09:19:56.625635467Z         difference_task_id=0
2024-12-25T09:19:56.625637291Z         # initialize trackers
2024-12-25T09:19:56.625639195Z         queue_of_requests_to_retry = asyncio.Queue()
2024-12-25T09:19:56.625641080Z         if self.task_id_generator is None:
2024-12-25T09:19:56.625642959Z             self.task_id_generator = (
2024-12-25T09:19:56.625644800Z                 task_id_generator_function()
2024-12-25T09:19:56.625646733Z             )  # generates integer IDs of 0, 1, 2, ...
2024-12-25T09:19:56.625648619Z         status_tracker = (
2024-12-25T09:19:56.625650435Z             StatusTracker()
2024-12-25T09:19:56.625652290Z         )  # single instance to track a collection of variables
2024-12-25T09:19:56.625654234Z         next_request = None  # variable to hold the next request to call
2024-12-25T09:19:56.625656180Z 
2024-12-25T09:19:56.625657934Z         # initialize available capacity counts
2024-12-25T09:19:56.625659892Z         available_request_capacity = (
2024-12-25T09:19:56.625661772Z             self.max_requests_per_minute / 60
2024-12-25T09:19:56.625663638Z             if self.max_rps
2024-12-25T09:19:56.625665470Z             else self.max_requests_per_minute
2024-12-25T09:19:56.625667354Z         )
2024-12-25T09:19:56.625669133Z         available_token_capacity = self.max_tokens_per_minute
2024-12-25T09:19:56.625673161Z         last_update_time = time.time()
2024-12-25T09:19:56.625675110Z 
2024-12-25T09:19:56.625676884Z         # initialize flags
2024-12-25T09:19:56.625679024Z         list_not_finished = True  # after list is empty, we'll skip reading it
2024-12-25T09:19:56.625680965Z         logging.debug("Initialization complete.")
2024-12-25T09:19:56.625682909Z 
2024-12-25T09:19:56.625684667Z         semaphore = (
2024-12-25T09:19:56.625686502Z             asyncio.Semaphore(self.max_concurrent_requests)
2024-12-25T09:19:56.625688390Z             if self.max_concurrent_requests
2024-12-25T09:19:56.625690266Z             else None
2024-12-25T09:19:56.625692115Z         )
2024-12-25T09:19:56.625693949Z 
2024-12-25T09:19:56.625695715Z         # initialize list reading
2024-12-25T09:19:56.625697562Z         requests = iter(request_list)
2024-12-25T09:19:56.625699410Z         logging.debug("List opened. Entering main loop")
2024-12-25T09:19:56.625701383Z         # Create a TCPConnector with SSL verification disabled for monsterapi
2024-12-25T09:19:56.625703319Z         connector = aiohttp.TCPConnector(ssl=False) if "monsterapi.ai" in url else None
2024-12-25T09:19:56.625705360Z         async with aiohttp.ClientSession(connector=connector) as session:  # Initialize ClientSession here
2024-12-25T09:19:56.625707345Z             while True:
2024-12-25T09:19:56.625709218Z                 # get next request (if one is not already waiting for capacity)
2024-12-25T09:19:56.625711144Z                 if next_request is None:
2024-12-25T09:19:56.625713012Z                     if not queue_of_requests_to_retry.empty():
2024-12-25T09:19:56.625714984Z                         next_request = queue_of_requests_to_retry.get_nowait()
2024-12-25T09:19:56.625716937Z                         logging.debug(
2024-12-25T09:19:56.625721034Z                             f"Retrying request {next_request.task_id}: {next_request}"
2024-12-25T09:19:56.625723042Z                         )
2024-12-25T09:19:56.625724899Z                     elif list_not_finished:
2024-12-25T09:19:56.625726788Z                         try:
2024-12-25T09:19:56.625728621Z                             # get new request
2024-12-25T09:19:56.625730481Z                             request_json = next(requests)
2024-12-25T09:19:56.625732385Z                             
2024-12-25T09:19:56.625734189Z                             if different_requests:
2024-12-25T09:19:56.625736075Z                                     ##infer API endpoint and construct request header
2024-12-25T09:19:56.625738038Z                                     request_url = request_json["url"]
2024-12-25T09:19:56.625740043Z                                     api_key = request_json["api_key"]
2024-12-25T09:19:56.625744852Z                                     api_provider = request_json["api_provider"]
2024-12-25T09:19:56.625746938Z                                     if api_provider=="together":
2024-12-25T09:19:56.625748880Z                                         self.max_rps=True
2024-12-25T09:19:56.625750788Z                                     else:
2024-12-25T09:19:56.625752653Z                                         self.max_rps=False
2024-12-25T09:19:56.625754547Z                                         
2024-12-25T09:19:56.625756589Z                                     api_endpoint = self.api_endpoint_from_url(request_url)
2024-12-25T09:19:56.625758560Z                                     request_header = {"Authorization": f"Bearer {api_key}"}
2024-12-25T09:19:56.625760668Z                                     # use api-key header for Azure deployments
2024-12-25T09:19:56.625762624Z                                     if "/deployments" in request_url:
2024-12-25T09:19:56.625764584Z                                         request_header = {"api-key": f"{api_key}"}
2024-12-25T09:19:56.625766601Z                                     # Use x-api-key for Anthropic
2024-12-25T09:19:56.625768501Z                                     if api_provider == "anthropic":
2024-12-25T09:19:56.625770436Z                                         request_header = {
2024-12-25T09:19:56.625772342Z                                             "x-api-key": f"{api_key}",
2024-12-25T09:19:56.625774330Z                                             "anthropic-version": "2023-06-01",
2024-12-25T09:19:56.625776424Z                                             "content-type": "application/json",
2024-12-25T09:19:56.625778432Z                                         }
2024-12-25T09:19:56.625780295Z                                         request_json['max_tokens'] = self.max_tokens_per_minute
2024-12-25T09:19:56.625782249Z                                     if api_provider == "ollama":
2024-12-25T09:19:56.625784201Z                                         request_header = {
2024-12-25T09:19:56.625786087Z                                             "Content-Type": "application/json",
2024-12-25T09:19:56.625788076Z                                             "api_key": api_key,
2024-12-25T09:19:56.625790119Z                                         }
2024-12-25T09:19:56.625792011Z                             #delete the extra keys used above
2024-12-25T09:19:56.625793927Z                             if "api_key" in request_json:
2024-12-25T09:19:56.625795873Z                                 del request_json["api_key"]
2024-12-25T09:19:56.625797808Z                             if "url" in request_json:
2024-12-25T09:19:56.625799767Z                                 del request_json["url"]
2024-12-25T09:19:56.625804950Z                             if "api_provider" in request_json:
2024-12-25T09:19:56.625806999Z                                 del request_json["api_provider"]
2024-12-25T09:19:56.625808941Z                             active_task_id = next(self.task_id_generator)
2024-12-25T09:19:56.625810879Z                             if second_request:
2024-12-25T09:19:56.625812785Z                                 #when iterating and task ids are not in series like 1,2,3 more difference like 3,6 and so on  
2024-12-25T09:19:56.625814873Z                                 difference_task_id =  active_task_id- task_id_recent-value_iterate
2024-12-25T09:19:56.625817022Z                                 value_iterate+=1
2024-12-25T09:19:56.625818905Z                                 
2024-12-25T09:19:56.625820776Z 
2024-12-25T09:19:56.625822546Z                             if first_request:
2024-12-25T09:19:56.625824521Z                                 #When sae object bt llm.generate is called again remeber the last id for indexing in create data
2024-12-25T09:19:56.625826588Z                                 task_id_recent = active_task_id
2024-12-25T09:19:56.625828563Z                                 first_request=False
2024-12-25T09:19:56.625830439Z                                 second_request=True
2024-12-25T09:19:56.625832305Z                             # else:
2024-12-25T09:19:56.625834170Z 
2024-12-25T09:19:56.625836035Z                             #     task_id_recent=active_task_id-task_id_recent
2024-12-25T09:19:56.625837989Z                             if active_task_id in self.skip_task_ids:
2024-12-25T09:19:56.625839904Z                                 logging.info(
2024-12-25T09:19:56.625841816Z                                     f"[Cache Used] Skip request  {str(active_task_id)}"
2024-12-25T09:19:56.625843846Z                                 )                                
2024-12-25T09:19:56.625845756Z                                 continue
2024-12-25T09:19:56.625847599Z                             next_request = APIRequest(
2024-12-25T09:19:56.625849457Z                                 task_id=active_task_id,
2024-12-25T09:19:56.625851331Z                                 recent_task_id = task_id_recent,
2024-12-25T09:19:56.625853263Z                                 difference_task_id= difference_task_id,
2024-12-25T09:19:56.625855202Z                                 request_json=request_json,
2024-12-25T09:19:56.625857136Z                                 token_consumption=self.num_tokens_consumed_from_request(
2024-12-25T09:19:56.625859103Z                                     request_json, api_endpoint, self.token_encoding_name
2024-12-25T09:19:56.625861043Z                                 ),
2024-12-25T09:19:56.625865153Z                                 attempts_left=self.max_attempts,
2024-12-25T09:19:56.625867140Z                                 metadata=request_json.pop("metadata", None),
2024-12-25T09:19:56.625869143Z                             )
2024-12-25T09:19:56.625870995Z                             status_tracker.num_tasks_started += 1
2024-12-25T09:19:56.625872900Z                             status_tracker.num_tasks_in_progress += 1
2024-12-25T09:19:56.625874869Z                             logging.debug(
2024-12-25T09:19:56.625876737Z                                 f"Reading request {next_request.task_id}: {next_request}"
2024-12-25T09:19:56.625878734Z                             )
2024-12-25T09:19:56.625880584Z                         except StopIteration:
2024-12-25T09:19:56.625882473Z                             # if list runs out, set flag to stop reading it
2024-12-25T09:19:56.625884403Z                             logging.debug("Read list exhausted")
2024-12-25T09:19:56.625886560Z                             list_not_finished = False
2024-12-25T09:19:56.625888478Z 
2024-12-25T09:19:56.625890284Z                 # update available capacity
2024-12-25T09:19:56.625892159Z                 current_time = time.time()
2024-12-25T09:19:56.625894008Z                 seconds_since_update = current_time - last_update_time
2024-12-25T09:19:56.625895959Z                 if self.max_rps:
2024-12-25T09:19:56.625897795Z                     # If max_rps is True, divide max_requests_per_minute by 60
2024-12-25T09:19:56.625899741Z                     available_request_capacity = min(
2024-12-25T09:19:56.625901626Z                         available_request_capacity
2024-12-25T09:19:56.625903493Z                         + (self.max_requests_per_minute / 60) * seconds_since_update,
2024-12-25T09:19:56.625905463Z                         self.max_requests_per_minute / 60,
2024-12-25T09:19:56.625907350Z                     )
2024-12-25T09:19:56.625909195Z                 else:
2024-12-25T09:19:56.625911018Z                     available_request_capacity = min(
2024-12-25T09:19:56.625912906Z                         available_request_capacity
2024-12-25T09:19:56.625914776Z                         + self.max_requests_per_minute * seconds_since_update / 60.0,
2024-12-25T09:19:56.625916726Z                         self.max_requests_per_minute,
2024-12-25T09:19:56.625918591Z                     )
2024-12-25T09:19:56.625920436Z                 available_token_capacity = min(
2024-12-25T09:19:56.625922309Z                     available_token_capacity
2024-12-25T09:19:56.625924167Z                     + self.max_tokens_per_minute * seconds_since_update / 60.0,
2024-12-25T09:19:56.625926118Z                     self.max_tokens_per_minute,
2024-12-25T09:19:56.625930147Z                 )
2024-12-25T09:19:56.625932039Z                 last_update_time = current_time
2024-12-25T09:19:56.625933936Z 
2024-12-25T09:19:56.625935694Z                 # if enough capacity available, call API
2024-12-25T09:19:56.625937616Z                 if next_request:
2024-12-25T09:19:56.625939514Z                     next_request_tokens = next_request.token_consumption
2024-12-25T09:19:56.625942564Z                     if self.max_concurrent_requests is not None or (
2024-12-25T09:19:56.625944494Z                         available_request_capacity >= 1
2024-12-25T09:19:56.625946499Z                         and available_token_capacity >= next_request_tokens
2024-12-25T09:19:56.625955344Z                     ):
2024-12-25T09:19:56.625957943Z                         # call API
2024-12-25T09:19:56.625959806Z                         if semaphore:
2024-12-25T09:19:56.625961777Z                             asyncio.create_task(
2024-12-25T09:19:56.625963652Z                                 self._call_api_with_semaphore(
2024-12-25T09:19:56.625965718Z                                     semaphore,
2024-12-25T09:19:56.625967638Z                                     next_request,
2024-12-25T09:19:56.625969599Z                                     session,
2024-12-25T09:19:56.625971459Z                                     request_url,
2024-12-25T09:19:56.625973306Z                                     request_header,
2024-12-25T09:19:56.625975725Z                                     queue_of_requests_to_retry,
2024-12-25T09:19:56.625977770Z                                     cache_filepath,
2024-12-25T09:19:56.625979635Z                                     association_filepath,
2024-12-25T09:19:56.625981555Z                                     project_name,
2024-12-25T09:19:56.625983415Z                                     status_tracker,
2024-12-25T09:19:56.625985286Z                                 )
2024-12-25T09:19:56.625987129Z                             )
2024-12-25T09:19:56.625988944Z                         else:
2024-12-25T09:19:56.625990758Z                             # update counters
2024-12-25T09:19:56.625992635Z                             available_request_capacity -= 1
2024-12-25T09:19:56.625994549Z                             available_token_capacity -= next_request_tokens
2024-12-25T09:19:56.625996474Z                             # next_request.attempts_left -= 1
2024-12-25T09:19:56.625998394Z 
2024-12-25T09:19:56.626000138Z                             asyncio.create_task(
2024-12-25T09:19:56.626001995Z                                 next_request.call_api(
2024-12-25T09:19:56.626005978Z                                     session=session,
2024-12-25T09:19:56.626007959Z                                     request_url=request_url,
2024-12-25T09:19:56.626009968Z                                     request_header=request_header,
2024-12-25T09:19:56.626011901Z                                     retry_queue=queue_of_requests_to_retry,
2024-12-25T09:19:56.626013836Z                                     cache_filepath=cache_filepath,
2024-12-25T09:19:56.626015766Z                                     association_filepath= association_filepath,
2024-12-25T09:19:56.626017698Z                                     project_name=project_name,
2024-12-25T09:19:56.626020152Z                                     status_tracker=status_tracker,
2024-12-25T09:19:56.626023112Z                                     asyncllm_instance=self,
2024-12-25T09:19:56.626026263Z                                 )
2024-12-25T09:19:56.626029133Z                             )
2024-12-25T09:19:56.626031695Z                         next_request = None  # reset next_request to empty
2024-12-25T09:19:56.626034814Z 
2024-12-25T09:19:56.626037405Z                 # if all tasks are finished, break
2024-12-25T09:19:56.626040348Z                 if status_tracker.num_tasks_in_progress == 0:
2024-12-25T09:19:56.626043492Z                     break
2024-12-25T09:19:56.626046184Z 
2024-12-25T09:19:56.626049225Z                 # main loop sleeps briefly so concurrent tasks can run
2024-12-25T09:19:56.626052547Z                 await asyncio.sleep(seconds_to_sleep_each_loop)
2024-12-25T09:19:56.626055522Z 
2024-12-25T09:19:56.626058296Z                 # if a rate limit error was hit recently, pause to cool down
2024-12-25T09:19:56.626061275Z                 seconds_since_rate_limit_error = (
2024-12-25T09:19:56.626064190Z                     time.time() - status_tracker.time_of_last_rate_limit_error
2024-12-25T09:19:56.626067087Z                 )
2024-12-25T09:19:56.626069885Z                 if (
2024-12-25T09:19:56.626072858Z                     seconds_since_rate_limit_error
2024-12-25T09:19:56.626076162Z                     < seconds_to_pause_after_rate_limit_error
2024-12-25T09:19:56.626079153Z                 ):
2024-12-25T09:19:56.626083114Z                     remaining_seconds_to_pause = (
2024-12-25T09:19:56.626085109Z                         seconds_to_pause_after_rate_limit_error
2024-12-25T09:19:56.626087010Z                         - seconds_since_rate_limit_error
2024-12-25T09:19:56.626089068Z                     )
2024-12-25T09:19:56.626090915Z                     await asyncio.sleep(remaining_seconds_to_pause)
2024-12-25T09:19:56.626092864Z                     # ^e.g., if pause is 15 seconds and final limit was hit 5 seconds ago
2024-12-25T09:19:56.626097723Z                     logging.warn(
2024-12-25T09:19:56.626099707Z                         f"Pausing to cool down until {time.ctime(status_tracker.time_of_last_rate_limit_error + seconds_to_pause_after_rate_limit_error)}"
2024-12-25T09:19:56.626101863Z                     )
2024-12-25T09:19:56.626103703Z 
2024-12-25T09:19:56.626105460Z         if status_tracker.num_tasks_failed > 0:
2024-12-25T09:19:56.626107398Z             logging.warning(
2024-12-25T09:19:56.626109250Z                 f"{status_tracker.num_tasks_failed} / {status_tracker.num_tasks_started} requests failed."
2024-12-25T09:19:56.626111343Z             )
2024-12-25T09:19:56.626113144Z         if status_tracker.num_rate_limit_errors > 0:
2024-12-25T09:19:56.626115072Z             logging.warning(
2024-12-25T09:19:56.626116924Z                 f"{status_tracker.num_rate_limit_errors} rate limit errors received. Consider running at a lower rate."
2024-12-25T09:19:56.626118968Z             )
2024-12-25T09:19:56.626120747Z 
2024-12-25T09:19:56.626122514Z     def api_endpoint_from_url(self, request_url):
2024-12-25T09:19:56.626124398Z         """Extract the API endpoint from the request URL."""
2024-12-25T09:19:56.626126464Z         match = re.search("^https://[^/]+/v\\d+/(.+)$", request_url)
2024-12-25T09:19:56.626128621Z         if match is None:
2024-12-25T09:19:56.626130451Z             # for Azure OpenAI deployment urls
2024-12-25T09:19:56.626132397Z             match = re.search(
2024-12-25T09:19:56.626134237Z                 r"^https://[^/]+/openai/deployments/[^/]+/(.+?)(\?|$)", request_url
2024-12-25T09:19:56.626136338Z             )
2024-12-25T09:19:56.626138130Z 
2024-12-25T09:19:56.626139906Z         if match is None:
2024-12-25T09:19:56.626141723Z             return request_url
2024-12-25T09:19:56.626143607Z         else:
2024-12-25T09:19:56.626145385Z             return match[1]
2024-12-25T09:19:56.626147206Z 
2024-12-25T09:19:56.626149035Z     def num_tokens_consumed_from_request(
2024-12-25T09:19:56.626150905Z         self,
2024-12-25T09:19:56.626152673Z         request_json: dict,
2024-12-25T09:19:56.626154476Z         api_endpoint: str,
2024-12-25T09:19:56.626156301Z         token_encoding_name: str,
2024-12-25T09:19:56.626158181Z     ):
2024-12-25T09:19:56.626159985Z         """Count the number of tokens in the request. Only supports completion and embedding requests."""
2024-12-25T09:19:56.626162082Z         encoding = tiktoken.get_encoding(token_encoding_name)
2024-12-25T09:19:56.626164089Z 
2024-12-25T09:19:56.626169319Z         ollama_flag = any(
2024-12-25T09:19:56.626171242Z             word in self.url
2024-12-25T09:19:56.626173092Z             for word in ("ollama", "11434", "api/chat", "api/generate")
2024-12-25T09:19:56.626175237Z         )
2024-12-25T09:19:56.626177088Z 
2024-12-25T09:19:56.626179110Z         # if completions request, tokens = prompt + n * max_tokens
2024-12-25T09:19:56.626181068Z         if api_endpoint.endswith(("completions", "messages")) or ollama_flag:
2024-12-25T09:19:56.626183126Z             max_tokens = request_json.get("max_tokens", 15)
2024-12-25T09:19:56.626185086Z             n = request_json.get("n", 1)
2024-12-25T09:19:56.626187000Z             completion_tokens = n * max_tokens
2024-12-25T09:19:56.626188969Z 
2024-12-25T09:19:56.626190708Z             # chat completions
2024-12-25T09:19:56.626192571Z             # if api_endpoint.startswith("chat/"):
2024-12-25T09:19:56.626194528Z             if "chat/" in api_endpoint or "messages" in api_endpoint or ollama_flag:
2024-12-25T09:19:56.626196584Z                 num_tokens = 0
2024-12-25T09:19:56.626198409Z                 for message in request_json["messages"]:
2024-12-25T09:19:56.626200416Z                     num_tokens += 4  # every message follows <im_start>{role/name}\n{content}<im_end>\n
2024-12-25T09:19:56.626202776Z                     for key, value in message.items():
2024-12-25T09:19:56.626204660Z                         num_tokens += len(encoding.encode(value))
2024-12-25T09:19:56.626206577Z                         if key == "name":  # if there's a name, the role is omitted
2024-12-25T09:19:56.626208591Z                             num_tokens -= (
2024-12-25T09:19:56.626210460Z                                 1  # role is always required and always 1 token
2024-12-25T09:19:56.626212430Z                             )
2024-12-25T09:19:56.626214256Z                 num_tokens += 2  # every reply is primed with <im_start>assistant
2024-12-25T09:19:56.626216308Z                 return num_tokens + completion_tokens
2024-12-25T09:19:56.626218219Z             # normal completions
2024-12-25T09:19:56.626221928Z             else:
2024-12-25T09:19:56.626223725Z                 prompt = request_json["prompt"]
2024-12-25T09:19:56.626225682Z                 if isinstance(prompt, str):  # single prompt
2024-12-25T09:19:56.626227681Z                     prompt_tokens = len(encoding.encode(prompt))
2024-12-25T09:19:56.626229603Z                     num_tokens = prompt_tokens + completion_tokens
2024-12-25T09:19:56.626231601Z                     return num_tokens
2024-12-25T09:19:56.626233453Z                 elif isinstance(prompt, list):  # multiple prompts
2024-12-25T09:19:56.626237634Z                     prompt_tokens = sum([len(encoding.encode(p)) for p in prompt])
2024-12-25T09:19:56.626239709Z                     num_tokens = prompt_tokens + completion_tokens * len(prompt)
2024-12-25T09:19:56.626241656Z                     return num_tokens
2024-12-25T09:19:56.626243552Z                 else:
2024-12-25T09:19:56.626245750Z                     raise TypeError(
2024-12-25T09:19:56.626247616Z                         'Expecting either string or list of strings for "prompt" field in completion request'
2024-12-25T09:19:56.626249666Z                     )
2024-12-25T09:19:56.626251486Z         # if embeddings request, tokens = input tokens
2024-12-25T09:19:56.626253624Z         elif api_endpoint.endswith("embeddings"):
2024-12-25T09:19:56.626255555Z             input = request_json["input"]
2024-12-25T09:19:56.626257435Z             if isinstance(input, str):  # single input
2024-12-25T09:19:56.626259343Z                 num_tokens = len(encoding.encode(input))
2024-12-25T09:19:56.626261241Z                 return num_tokens
2024-12-25T09:19:56.626263067Z             elif isinstance(input, list):  # multiple inputs
2024-12-25T09:19:56.626264974Z                 num_tokens = sum([len(encoding.encode(i)) for i in input])
2024-12-25T09:19:56.626266895Z                 return num_tokens
2024-12-25T09:19:56.626268739Z             else:
2024-12-25T09:19:56.626270542Z                 raise TypeError(
2024-12-25T09:19:56.626272399Z                     'Expecting either string or list of strings for "inputs" field in embedding request'
2024-12-25T09:19:56.626274479Z                 )
2024-12-25T09:19:56.626276288Z         # more logic needed to support other API calls (e.g., edits, inserts, DALL-E)
2024-12-25T09:19:56.626278259Z         else:
2024-12-25T09:19:56.626280068Z             raise NotImplementedError(
2024-12-25T09:19:56.626281931Z                 f'API endpoint "{api_endpoint}" not implemented in this script'
2024-12-25T09:19:56.626283958Z             )
2024-12-25T09:19:56.626285787Z 
2024-12-25T09:19:56.626287524Z     async def _call_api_with_semaphore(
2024-12-25T09:19:56.626289415Z         self,
2024-12-25T09:19:56.626291186Z         semaphore: asyncio.Semaphore,
2024-12-25T09:19:56.626293040Z         request: APIRequest,
2024-12-25T09:19:56.626294867Z         session: aiohttp.ClientSession,
2024-12-25T09:19:56.626296714Z         request_url: str,
2024-12-25T09:19:56.626298547Z         request_header: dict,
2024-12-25T09:19:56.626300364Z         retry_queue: asyncio.Queue,
2024-12-25T09:19:56.626302203Z         cache_filepath: str,
2024-12-25T09:19:56.626306210Z         association_filepath:str,
2024-12-25T09:19:56.626308134Z         project_name:str,
2024-12-25T09:19:56.626309967Z         status_tracker: StatusTracker,
2024-12-25T09:19:56.626311810Z     ):
2024-12-25T09:19:56.626313667Z         async with semaphore:
2024-12-25T09:19:56.626315508Z             await request.call_api(
2024-12-25T09:19:56.626317344Z                 session=session,
2024-12-25T09:19:56.626319171Z                 request_url=request_url,
2024-12-25T09:19:56.626321040Z                 request_header=request_header,
2024-12-25T09:19:56.626322903Z                 retry_queue=retry_queue,
2024-12-25T09:19:56.626324737Z                 cache_filepath=cache_filepath,
2024-12-25T09:19:56.626326598Z                 association_filepath=association_filepath,
2024-12-25T09:19:56.626328475Z                 project_name=project_name,
2024-12-25T09:19:56.626330324Z                 status_tracker=status_tracker,
2024-12-25T09:19:56.626332169Z                 asyncllm_instance=self,
2024-12-25T09:19:56.626334035Z             )
2024-12-25T09:19:56.626335865Z 
2024-12-25T09:19:56.626337681Z     #create associaton file for first time or if file is deleted
2024-12-25T09:19:56.626339579Z     def create_association_file(self,first=False):
2024-12-25T09:19:56.626341462Z         content={}
2024-12-25T09:19:56.626343266Z         #create association file path
2024-12-25T09:19:56.626345109Z         if os.path.exists(self.cache_dir):
2024-12-25T09:19:56.626346974Z             associatation_filepath = self.cache_dir+"/association.jsonl"
2024-12-25T09:19:56.626349143Z         #first time association file is created with project and requests.jsonl file associations
2024-12-25T09:19:56.626351167Z         if first:
2024-12-25T09:19:56.626353002Z             content['project_requests']={self.project_name: ["request_1"]}
2024-12-25T09:19:56.626354989Z             with open(associatation_filepath, "a") as f:
2024-12-25T09:19:56.626356934Z                 json.dump(content,f)
2024-12-25T09:19:56.626358794Z                 f.write("\n")
2024-12-25T09:19:56.626360692Z             return
2024-12-25T09:19:56.626362524Z         #Get the association
2024-12-25T09:19:56.626364318Z         dict_pro={}
2024-12-25T09:19:56.626366146Z         if os.path.exists(associatation_filepath):
2024-12-25T09:19:56.626368017Z             with open(associatation_filepath) as f:
2024-12-25T09:19:56.626369886Z                 json_data = json.load(f)
2024-12-25T09:19:56.626371731Z                 if "project_requests" in list(json_data.keys()):
2024-12-25T09:19:56.626375634Z                         dict_pro["project_requests"] = json_data["project_requests"]
2024-12-25T09:19:56.626377844Z             os.remove(associatation_filepath)
2024-12-25T09:19:56.626379721Z         
2024-12-25T09:19:56.626381492Z         if os.path.exists(self.cache_dir):
2024-12-25T09:19:56.626383376Z             files=os.listdir(self.cache_dir)
2024-12-25T09:19:56.626385232Z             for file in files:
2024-12-25T09:19:56.626387048Z                 with open(os.path.join(self.cache_dir, file),"r") as f:
2024-12-25T09:19:56.626389081Z                     data=f.readlines()
2024-12-25T09:19:56.626390943Z                 hash_array = []
2024-12-25T09:19:56.626392765Z                 for row in data:
2024-12-25T09:19:56.626394589Z                     row=json.loads(row)
2024-12-25T09:19:56.626396439Z                     if row:
2024-12-25T09:19:56.626398296Z                         hash_array.append(list(row[0].keys())[0])
2024-12-25T09:19:56.626400201Z                 if len(hash_array)!=0:
2024-12-25T09:19:56.626402061Z                             content[file.split(".")[0]] = hash_array
2024-12-25T09:19:56.626404049Z                 else:
2024-12-25T09:19:56.626405866Z                         print("No data found")
2024-12-25T09:19:56.626407805Z         else:
2024-12-25T09:19:56.626409592Z             raise ValueError("Cache file path not proper")
2024-12-25T09:19:56.626411577Z         
2024-12-25T09:19:56.626413393Z         if len(content)!=0:
2024-12-25T09:19:56.626415196Z             request_name_list  = list(content.keys())
2024-12-25T09:19:56.626417242Z             
2024-12-25T09:19:56.626419023Z             if len(dict_pro)!=0:
2024-12-25T09:19:56.626420861Z                 content["project_requests"]=dict_pro["project_requests"]
2024-12-25T09:19:56.626422897Z             else:
2024-12-25T09:19:56.626424750Z                 #If association file deleted and no informartion abut project all requests assinged to default dataformer project
2024-12-25T09:19:56.626426804Z                 content["project_requests"]={"dataformer":request_name_list}
2024-12-25T09:19:56.626428939Z             
2024-12-25T09:19:56.626431694Z             with open(associatation_filepath, "a") as f:
2024-12-25T09:19:56.626433631Z                 json.dump(content,f)
2024-12-25T09:19:56.626435478Z                 f.write("\n")
2024-12-25T09:19:56.626437392Z         else:
2024-12-25T09:19:56.626439472Z             raise FileNotFoundError("All request cache files empty")
2024-12-25T09:19:56.626441474Z    
2024-12-25T09:19:56.626452582Z             
2024-12-25T09:19:56.626456886Z     
2024-12-25T09:19:56.626458818Z 
2024-12-25T09:19:56.626460565Z     def generate(
2024-12-25T09:19:56.626462485Z         self,
2024-12-25T09:19:56.626464298Z         request_list: typing.List,
2024-12-25T09:19:56.626466289Z         cache_vars: typing.Dict = {},
2024-12-25T09:19:56.626468158Z         task_id_generator=None,
2024-12-25T09:19:56.626469978Z         use_cache=True,
2024-12-25T09:19:56.626471812Z         project_name=None,
2024-12-25T09:19:56.626473666Z         clear_project_cache=typing.Union[str, typing.List[str]] ,
2024-12-25T09:19:56.626475613Z     ):
2024-12-25T09:19:56.626477384Z         if project_name:
2024-12-25T09:19:56.626479218Z             project_name = project_name.lower()
2024-12-25T09:19:56.626481083Z         if isinstance(clear_project_cache,str):
2024-12-25T09:19:56.626482957Z             if clear_project_cache=="full":
2024-12-25T09:19:56.626484954Z                 delete_cache(project_or_full="full",dir_path=self.cache_dir)
2024-12-25T09:19:56.626486952Z             else:
2024-12-25T09:19:56.626488806Z                 delete_cache(project_or_full=clear_project_cache.lower(),dir_path=self.cache_dir)
2024-12-25T09:19:56.626490803Z         
2024-12-25T09:19:56.626492581Z         elif isinstance(clear_project_cache,list):
2024-12-25T09:19:56.626494453Z             for project in clear_project_cache:
2024-12-25T09:19:56.626496330Z                 #Delete the files of reqestive projects in case of list of projects
2024-12-25T09:19:56.626498342Z                 delete_cache(project_or_full=project.lower(),dir_path=self.cache_dir)  
2024-12-25T09:19:56.626500324Z 
2024-12-25T09:19:56.626502111Z         #keys to ignore            
2024-12-25T09:19:56.626503956Z         ignore_keys = [
2024-12-25T09:19:56.626505784Z             "cache_hash",
2024-12-25T09:19:56.626507648Z             "skip_task_ids",
2024-12-25T09:19:56.626509539Z             "task_id_generator",
2024-12-25T09:19:56.626511400Z             "response_list",
2024-12-25T09:19:56.626513308Z             "use_cache",
2024-12-25T09:19:56.626515186Z             "max_requests_per_minute",
2024-12-25T09:19:56.626517099Z             "max_tokens_per_minute",
2024-12-25T09:19:56.626518968Z             "max_attempts",
2024-12-25T09:19:56.626520865Z             "max_concurrent_requests",
2024-12-25T09:19:56.626522736Z             "max_rps",
2024-12-25T09:19:56.626524596Z             "api_key",
2024-12-25T09:19:56.626526456Z             "sampling_params" # Already part of request_list
2024-12-25T09:19:56.626532450Z         ]
2024-12-25T09:19:56.626534424Z 
2024-12-25T09:19:56.626536265Z         #override the project name
2024-12-25T09:19:56.626538131Z         if project_name is not None:
2024-12-25T09:19:56.626539988Z             self.project_name = project_name
2024-12-25T09:19:56.626541838Z                 
2024-12-25T09:19:56.626543679Z         # Check if 'model' is present in all request items
2024-12-25T09:19:56.626545605Z         if not all("model" in request for request in request_list):
2024-12-25T09:19:56.626547614Z             # Since all request already have model, we can ignore self.model for cache.
2024-12-25T09:19:56.626549560Z             # ignore_keys.append("model")
2024-12-25T09:19:56.626551562Z         # else:
2024-12-25T09:19:56.626553382Z             for request in request_list:
2024-12-25T09:19:56.626555244Z                 #over ride model based on the api provider or base url in the request list
2024-12-25T09:19:56.626557215Z                 if "model" not in request:
2024-12-25T09:19:56.626559433Z                     model=self.model
2024-12-25T09:19:56.626561271Z                     api_provider=""
2024-12-25T09:19:56.626563168Z                     url=""
2024-12-25T09:19:56.626565076Z                     if "url" in list(request.keys()) or "api_provider" in list(request.keys()):
2024-12-25T09:19:56.626567207Z                         if "api_provider" in list(request.keys()):
2024-12-25T09:19:56.626569185Z                             api_provider=request['api_provider']
2024-12-25T09:19:56.626571088Z                         if "url" in list(request.keys()):
2024-12-25T09:19:56.626573040Z                             url=request['url']
2024-12-25T09:19:56.626574937Z                         url = self.get_requesturl_apikey_list(url,api_provider)[0]
2024-12-25T09:19:56.626576888Z                         
2024-12-25T09:19:56.626578706Z                         model = model_dict.get(url)
2024-12-25T09:19:56.626580586Z                     
2024-12-25T09:19:56.626582435Z                     request["model"] = model
2024-12-25T09:19:56.626584360Z                     
2024-12-25T09:19:56.626586213Z 
2024-12-25T09:19:56.626587974Z 
2024-12-25T09:19:56.626589726Z         request_url=""
2024-12-25T09:19:56.626591578Z         api_key=""
2024-12-25T09:19:56.626593421Z         different_apis=False
2024-12-25T09:19:56.626595255Z 
2024-12-25T09:19:56.626597043Z         #check if any provider or base url present in request list
2024-12-25T09:19:56.626599000Z         if any("api_provider" in request or "url" in request for request in request_list):
2024-12-25T09:19:56.626603258Z                 different_apis = True
2024-12-25T09:19:56.626605177Z         
2024-12-25T09:19:56.626607007Z         #If no urls or api providers in request means use default in init
2024-12-25T09:19:56.626608928Z         if not different_apis:
2024-12-25T09:19:56.626610763Z             request_url = self.get_request_url()
2024-12-25T09:19:56.626612659Z             for requests in request_list:
2024-12-25T09:19:56.626614539Z                 requests['api_provider'] = self.api_provider
2024-12-25T09:19:56.626616466Z                 requests['url'] = request_url
2024-12-25T09:19:56.626618333Z                 api_key=""
2024-12-25T09:19:56.626620203Z                 if "api_key" in list(requests.keys()):
2024-12-25T09:19:56.626622170Z                     api_key=requests['api_key']
2024-12-25T09:19:56.626624063Z                 else:
2024-12-25T09:19:56.626625893Z                     api_key = self.get_api_key()
2024-12-25T09:19:56.626627777Z                 requests['api_key'] = api_key
2024-12-25T09:19:56.626629684Z         else:
2024-12-25T09:19:56.626631509Z             if all("api_provider" in request or "url" in request for request in request_list):
2024-12-25T09:19:56.626633593Z                 # Since all request already have either api_provider or url, we can ignore self.provider or if url (if set) for cache.
2024-12-25T09:19:56.626635676Z                 # all requests have either one of api_provider or _url then no need for initatied or default values for cache hash calculation
2024-12-25T09:19:56.626637772Z                 # #because they actuallhy wont be used in requests
2024-12-25T09:19:56.626639697Z                 
2024-12-25T09:19:56.626641711Z                     ignore_keys.append("api_provider")
2024-12-25T09:19:56.626643642Z                     ignore_keys.append("url")
2024-12-25T09:19:56.626645596Z                
2024-12-25T09:19:56.626647417Z             else:
2024-12-25T09:19:56.626649239Z                 
2024-12-25T09:19:56.626651039Z                 use_default_or_request_api=[]
2024-12-25T09:19:56.626652893Z                 for request in request_list:
2024-12-25T09:19:56.626654737Z                     key_list = list(request.keys())
2024-12-25T09:19:56.626656614Z                     if "api_provider" in key_list or "url" in key_list:
2024-12-25T09:19:56.626658657Z                        
2024-12-25T09:19:56.626660534Z                         #Use another provider than default or in llm init
2024-12-25T09:19:56.626662477Z                         use_default_or_request_api.append(False) 
2024-12-25T09:19:56.626664407Z                     else:
2024-12-25T09:19:56.626668200Z                         #Use same provider as default or in llm init
2024-12-25T09:19:56.626670216Z                         use_default_or_request_api.append(True)
2024-12-25T09:19:56.626672149Z 
2024-12-25T09:19:56.626673923Z         
2024-12-25T09:19:56.626675737Z                 #if default init is used, check if api key given in request list instead of init
2024-12-25T09:19:56.626677731Z                 for i in range(len(request_list)):
2024-12-25T09:19:56.626679613Z                     api_key=""
2024-12-25T09:19:56.626681469Z                     if use_default_or_request_api[i]:
2024-12-25T09:19:56.626683369Z                         if "api_key" in list(request_list[i].keys()):
2024-12-25T09:19:56.626685369Z                             api_key = request_list[i]['api_key']
2024-12-25T09:19:56.626688966Z                         
2024-12-25T09:19:56.626690799Z                         if api_key!="":
2024-12-25T09:19:56.626692716Z                             url = self.get_request_url()
2024-12-25T09:19:56.626694702Z                         else:
2024-12-25T09:19:56.626696606Z                             url,api_key = self.get_requesturl_apikey()
2024-12-25T09:19:56.626698536Z                         
2024-12-25T09:19:56.626700361Z                         api_provider = self.api_provider
2024-12-25T09:19:56.626702369Z                         request_list[i]['api_provider'] = api_provider
2024-12-25T09:19:56.626704302Z                         request_list[i]['url'] = url
2024-12-25T09:19:56.626706171Z                         request_list[i]['api_key'] = api_key
2024-12-25T09:19:56.626708159Z             
2024-12-25T09:19:56.626710054Z             #to skip records, already processed
2024-12-25T09:19:56.626711910Z             skip=True
2024-12-25T09:19:56.626713726Z             for i in range(len(request_list)):
2024-12-25T09:19:56.626715598Z                     api_provider=""
2024-12-25T09:19:56.626717489Z                     url=""
2024-12-25T09:19:56.626719329Z                     api_key=""
2024-12-25T09:19:56.626721165Z                     keys_list=list(request_list[i].keys())
2024-12-25T09:19:56.626723059Z                     #check if any field is missing
2024-12-25T09:19:56.626724959Z                     if "api_provider" not in keys_list or "api_key" not in keys_list or "rl" not in keys_list:
2024-12-25T09:19:56.626727113Z                         skip=False
2024-12-25T09:19:56.626729112Z                         if "api_provider" in keys_list:
2024-12-25T09:19:56.626731138Z                             api_provider=request_list[i]['api_provider']
2024-12-25T09:19:56.626733066Z                         if "url" in keys_list:
2024-12-25T09:19:56.626737126Z                             url=request_list[i]['url']
2024-12-25T09:19:56.626739061Z                         #get the base url
2024-12-25T09:19:56.626740940Z                         url, api_provider = self.get_requesturl_apikey_list(url,api_provider)
2024-12-25T09:19:56.626742965Z                         
2024-12-25T09:19:56.626744787Z                         #if both not found in request list, may be in initialized init
2024-12-25T09:19:56.626746727Z                         if url=="" and api_provider=="":
2024-12-25T09:19:56.626748750Z                             url,api_key = self.get_requesturl_apikey()
2024-12-25T09:19:56.626750686Z                             api_provider = self.api_provider
2024-12-25T09:19:56.626752586Z                        #set the api key
2024-12-25T09:19:56.626754424Z                         if "api_key" in keys_list:
2024-12-25T09:19:56.626756361Z                             #Use another provider than default or in llm init
2024-12-25T09:19:56.626758345Z                             api_key= request_list[i]['api_key']
2024-12-25T09:19:56.626760325Z                         elif self.api_key:
2024-12-25T09:19:56.626762167Z                             api_key=self.api_key
2024-12-25T09:19:56.626764031Z                         elif api_provider=="ollama":
2024-12-25T09:19:56.626765944Z                             api_key="ollama"
2024-12-25T09:19:56.626767841Z                         else:
2024-12-25T09:19:56.626769674Z                             for url_var, env_var in api_key_dict.items():
2024-12-25T09:19:56.626771634Z                                 if url_var in url:
2024-12-25T09:19:56.626773532Z                                     api_key  = os.getenv(env_var)
2024-12-25T09:19:56.626775432Z                                     break
2024-12-25T09:19:56.626777291Z                             
2024-12-25T09:19:56.626779124Z 
2024-12-25T09:19:56.626780890Z                         
2024-12-25T09:19:56.626782723Z                         if api_key=="" or api_key==None:
2024-12-25T09:19:56.626784728Z                             raise ValueError("Api key not provided or INVALID. Provide appropriate API key with api provider or baseurl.")
2024-12-25T09:19:56.626786831Z                     else:
2024-12-25T09:19:56.626788672Z                         skip=True
2024-12-25T09:19:56.626790522Z                         
2024-12-25T09:19:56.626792349Z                     if not skip:
2024-12-25T09:19:56.626794166Z                         if api_provider=="" or url=="":
2024-12-25T09:19:56.626796166Z                             raise ValueError("No api provider or base url provided")
2024-12-25T09:19:56.626798196Z                         else:
2024-12-25T09:19:56.626802100Z                             request_list[i]['api_provider'] = api_provider
2024-12-25T09:19:56.626804328Z                             request_list[i]['url'] =url
2024-12-25T09:19:56.626806248Z                             request_list[i]['api_key'] = api_key
2024-12-25T09:19:56.626808175Z                    
2024-12-25T09:19:56.626810003Z 
2024-12-25T09:19:56.626811750Z         for request in request_list:
2024-12-25T09:19:56.626813615Z             for key, value in self.sampling_params.items():
2024-12-25T09:19:56.626815506Z                 if key not in request:
2024-12-25T09:19:56.626817361Z                     request[key] = value
2024-12-25T09:19:56.626819230Z 
2024-12-25T09:19:56.626821025Z         if task_id_generator:
2024-12-25T09:19:56.626822948Z             self.task_id_generator = task_id_generator
2024-12-25T09:19:56.626824840Z         else:
2024-12-25T09:19:56.626826646Z             #Incase if llm.enerate called multiple times on same object
2024-12-25T09:19:56.626828586Z             self.task_id_generator = None
2024-12-25T09:19:56.626830439Z         self.response_list = []
2024-12-25T09:19:56.626832280Z         # check if requests_list have properly assigned model parameter 
2024-12-25T09:19:56.626834227Z         if different_apis:
2024-12-25T09:19:56.626836080Z             for request in request_list:
2024-12-25T09:19:56.626837968Z                 self.check_model_exists(request['url'],request['api_provider'],request['api_key'],request['model'])
2024-12-25T09:19:56.626839961Z         # If cache, add cached responses to self.response_list
2024-12-25T09:19:56.626841862Z         # if "request_details" not in cache_vars:
2024-12-25T09:19:56.626843789Z             # self.request_details = get_request_details(request_list)
2024-12-25T09:19:56.626845728Z        
2024-12-25T09:19:56.626847555Z         
2024-12-25T09:19:56.626849349Z         # create cache list
2024-12-25T09:19:56.626851236Z         new_re_cache = [create_hash(get_cache_vars(re.copy(), ignore_keys=ignore_keys, additional_data=cache_vars,vars_use=False)) for re in request_list]
2024-12-25T09:19:56.626853330Z         if self.gen_type=="text":
2024-12-25T09:19:56.626855324Z                     for i in request_list:
2024-12-25T09:19:56.626857178Z                         if i["api_provider"]=="groq":
2024-12-25T09:19:56.626859190Z                             raise ValueError("Groq doesn't support text generation.")
2024-12-25T09:19:56.626861213Z         # We create cache_hash to sort the async responses even when use_cache is False.
2024-12-25T09:19:56.626863151Z         self.cache_hash = new_re_cache
2024-12-25T09:19:56.626865021Z 
2024-12-25T09:19:56.626868702Z         self.skip_task_ids = []
2024-12-25T09:19:56.626870628Z        
2024-12-25T09:19:56.626872413Z         cache_filepath=None
2024-12-25T09:19:56.626874234Z         association_filepath=None
2024-12-25T09:19:56.626876084Z         if use_cache:
2024-12-25T09:19:56.626877909Z             if not os.path.exists(self.cache_dir):
2024-12-25T09:19:56.626879761Z                 os.makedirs(self.cache_dir)
2024-12-25T09:19:56.626881644Z             
2024-12-25T09:19:56.626883472Z             #check if files exists, to assign names as first request or next request in order
2024-12-25T09:19:56.626885410Z             files = os.listdir(self.cache_dir)
2024-12-25T09:19:56.626887252Z             files.sort(key=lambda x: x.split('.')[0])
2024-12-25T09:19:56.626889317Z             #If someone deletes all the files except the association file, then delete it 
2024-12-25T09:19:56.626891295Z             if len(files)==1 and "association.jsonl" in files[0]:
2024-12-25T09:19:56.626893305Z                 os.remove(os.path.join(self.cache_dir,files[0]))
2024-12-25T09:19:56.626895244Z                 files=[]
2024-12-25T09:19:56.626897113Z             if len(files)==0:
2024-12-25T09:19:56.626899894Z                 filename="request_1"
2024-12-25T09:19:56.626901774Z             else:                
2024-12-25T09:19:56.626903626Z                 filename= "request_"+ str(int(files[-1].split(".")[0].split("_")[1])+1)
2024-12-25T09:19:56.626905756Z         
2024-12-25T09:19:56.626907609Z             #name the cache and association file
2024-12-25T09:19:56.626909566Z             cache_filepath = f"{self.cache_dir}/{filename}.jsonl"
2024-12-25T09:19:56.626911568Z             association_filepath =f"{self.cache_dir}/association.jsonl"
2024-12-25T09:19:56.626913557Z             
2024-12-25T09:19:56.626915451Z             #create if the association file doesn't exist or is deleted or corrupted
2024-12-25T09:19:56.626917381Z             if filename!="request_1":
2024-12-25T09:19:56.626919248Z                 #create association file for first time
2024-12-25T09:19:56.626921105Z                 if not os.path.exists(association_filepath):
2024-12-25T09:19:56.626923083Z                     self.create_association_file()
2024-12-25T09:19:56.626924975Z 
2024-12-25T09:19:56.626926755Z                 else:
2024-12-25T09:19:56.626928588Z                     #corrupted or edited file inaccurately case
2024-12-25T09:19:56.626930524Z                     with open(association_filepath,"r") as f:
2024-12-25T09:19:56.626932469Z                         data_json = json.load(f)
2024-12-25T09:19:56.626934323Z                     keys_files= list(data_json.keys())
2024-12-25T09:19:56.626938209Z                     files = os.listdir(self.cache_dir)
2024-12-25T09:19:56.626940216Z                     #Check if all requests hash ids present in association if not possibility of edited file, create new 
2024-12-25T09:19:56.626942267Z                     if not all(filename in files or "project_requests" for filename in keys_files):
2024-12-25T09:19:56.626944295Z                         self.create_association_file()
2024-12-25T09:19:56.626946191Z             
2024-12-25T09:19:56.626948006Z                 
2024-12-25T09:19:56.626955312Z                 if os.path.exists(association_filepath):
2024-12-25T09:19:56.626957996Z                     #find the overlapping caches and skip them
2024-12-25T09:19:56.626959914Z                     cached_indices = []
2024-12-25T09:19:56.626961781Z                     with open(association_filepath,"r") as file:
2024-12-25T09:19:56.626963736Z                         cache_hash_data = json.load(file)
2024-12-25T09:19:56.626965647Z                    
2024-12-25T09:19:56.626967473Z                     values=[]
2024-12-25T09:19:56.626969347Z                     new_cache_hash_list = self.cache_hash.copy()
2024-12-25T09:19:56.626971263Z                     
2024-12-25T09:19:56.626973091Z                     for key in cache_hash_data:
2024-12-25T09:19:56.626975159Z                         #skip this keywors as it represent project association
2024-12-25T09:19:56.626977098Z                         if key=="project_requests":
2024-12-25T09:19:56.626979002Z                             continue
2024-12-25T09:19:56.626980827Z                         #get the stored hash from file
2024-12-25T09:19:56.626982739Z                         stored_hash_list = cache_hash_data[key]
2024-12-25T09:19:56.626984678Z                         
2024-12-25T09:19:56.626986494Z                         indices=[]
2024-12-25T09:19:56.626988322Z                         #iterate and check hashes
2024-12-25T09:19:56.626990212Z                         for i, hashh in enumerate(new_cache_hash_list):
2024-12-25T09:19:56.626992129Z                             if i not in cached_indices:
2024-12-25T09:19:56.626993997Z                                 if hashh in stored_hash_list:
2024-12-25T09:19:56.626995905Z                                 
2024-12-25T09:19:56.626997752Z                                     values.append(hashh)                             
2024-12-25T09:19:56.626999767Z                                     cached_indices.append(i)                                                                
2024-12-25T09:19:56.627001793Z                                     indices.append(stored_hash_list.index(hashh))
2024-12-25T09:19:56.627003764Z                         #read data and save response in response_list 
2024-12-25T09:19:56.627007842Z                         with open(os.path.join(self.cache_dir,key+".jsonl")) as f:
2024-12-25T09:19:56.627009931Z                             file_data = f.readlines()
2024-12-25T09:19:56.627011802Z                             #Get the responses
2024-12-25T09:19:56.627013668Z                             for j in indices:
2024-12-25T09:19:56.627015558Z                                 self.response_list.append(json.loads(file_data[j]))  
2024-12-25T09:19:56.627017527Z                                       
2024-12-25T09:19:56.627019371Z                     #cached indices to be skipped
2024-12-25T09:19:56.627021241Z                     self.skip_task_ids = cached_indices
2024-12-25T09:19:56.627023161Z                 else:
2024-12-25T09:19:56.627024994Z                     print("Association file doesn't exist")
2024-12-25T09:19:56.627026980Z             else:
2024-12-25T09:19:56.627028802Z                 self.create_association_file(first=True)
2024-12-25T09:19:56.627030723Z         
2024-12-25T09:19:56.627032557Z         
2024-12-25T09:19:56.627034354Z         if different_apis:
2024-12-25T09:19:56.627036177Z             #for different api providers
2024-12-25T09:19:56.627038543Z             asyncio.run(
2024-12-25T09:19:56.627041331Z                 self.process_api_requests(
2024-12-25T09:19:56.627044519Z                     request_url,
2024-12-25T09:19:56.627047399Z                     api_key="",
2024-12-25T09:19:56.627049994Z                     request_list=request_list,
2024-12-25T09:19:56.627053105Z                     cache_filepath=cache_filepath,
2024-12-25T09:19:56.627056218Z                     association_filepath=association_filepath,
2024-12-25T09:19:56.627059521Z                     project_name=self.project_name,
2024-12-25T09:19:56.627063149Z                     different_requests=True
2024-12-25T09:19:56.627066381Z                 )
2024-12-25T09:19:56.627069170Z             )
2024-12-25T09:19:56.627071889Z         else:
2024-12-25T09:19:56.627074981Z              #for same api provider
2024-12-25T09:19:56.627078366Z              asyncio.run(
2024-12-25T09:19:56.627080201Z                 self.process_api_requests(
2024-12-25T09:19:56.627082060Z                     request_url,
2024-12-25T09:19:56.627083926Z                     api_key,
2024-12-25T09:19:56.627085758Z                     request_list=request_list,
2024-12-25T09:19:56.627087620Z                     cache_filepath=cache_filepath,
2024-12-25T09:19:56.627089499Z                     association_filepath=association_filepath,
2024-12-25T09:19:56.627093901Z                     project_name=self.project_name,
2024-12-25T09:19:56.627095875Z                     different_requests=False
2024-12-25T09:19:56.627097764Z                 )
2024-12-25T09:19:56.627099580Z             )           
2024-12-25T09:19:56.627101422Z         sorted_response_list = sorted(
2024-12-25T09:19:56.627103290Z             self.response_list, key=lambda x: list(x[0].values())[0]
2024-12-25T09:19:56.627105257Z         )
2024-12-25T09:19:56.627107059Z         
2024-12-25T09:19:56.627108837Z         sorted_response_list = [
2024-12-25T09:19:56.627110704Z             item[1:] for item in sorted_response_list
2024-12-25T09:19:56.627112579Z         ]  # Exclude self.cache_hash from the list
2024-12-25T09:19:56.627114481Z         
2024-12-25T09:19:56.627116248Z         return sorted_response_list
2024-12-25T09:20:04.897175171Z [?2004hroot@f7349b543439:/dataformer# clear
2024-12-25T09:21:24.247774197Z [?2004l
[H[2J[3J[?2004hroot@f7349b543439:/dataformer# 
[K
root@f7349b543439:/dataformer# 
[K
root@f7349b543439:/dataformer# 
[K
root@f7349b543439:/dataformer# 
[K
root@f7349b543439:/dataformer# ls
2024-12-25T09:21:24.249261577Z [?2004l
CONTRIBUTING.md  LICENSE  Makefile  README.md  env.example  examples  pyproject.toml  src  tests
2024-12-25T09:22:18.708417782Z [?2004hroot@f7349b543439:/dataformer# exit
2024-12-25T09:22:18.708474649Z [?2004l
exit
